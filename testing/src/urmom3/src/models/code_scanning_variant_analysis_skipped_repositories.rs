/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CodeScanningVariantAnalysisSkippedRepositories : Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CodeScanningVariantAnalysisSkippedRepositories {
    #[serde(rename = "access_mismatch_repos")]
    pub access_mismatch_repos: Box<crate::models::CodeScanningVariantAnalysisSkippedRepoGroup>,
    #[serde(rename = "not_found_repos")]
    pub not_found_repos: Box<crate::models::CodeScanningVariantAnalysisSkippedRepositoriesNotFoundRepos>,
    #[serde(rename = "no_codeql_db_repos")]
    pub no_codeql_db_repos: Box<crate::models::CodeScanningVariantAnalysisSkippedRepoGroup>,
    #[serde(rename = "over_limit_repos")]
    pub over_limit_repos: Box<crate::models::CodeScanningVariantAnalysisSkippedRepoGroup>,
}

impl CodeScanningVariantAnalysisSkippedRepositories {
    /// Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.
    pub fn new(access_mismatch_repos: crate::models::CodeScanningVariantAnalysisSkippedRepoGroup, not_found_repos: crate::models::CodeScanningVariantAnalysisSkippedRepositoriesNotFoundRepos, no_codeql_db_repos: crate::models::CodeScanningVariantAnalysisSkippedRepoGroup, over_limit_repos: crate::models::CodeScanningVariantAnalysisSkippedRepoGroup) -> CodeScanningVariantAnalysisSkippedRepositories {
        CodeScanningVariantAnalysisSkippedRepositories {
            access_mismatch_repos: Box::new(access_mismatch_repos),
            not_found_repos: Box::new(not_found_repos),
            no_codeql_db_repos: Box::new(no_codeql_db_repos),
            over_limit_repos: Box::new(over_limit_repos),
        }
    }
}


