/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookWorkflowJobInProgressWorkflowJobAllOf {
    #[serde(rename = "check_run_url", skip_serializing_if = "Option::is_none")]
    pub check_run_url: Option<String>,
    #[serde(rename = "completed_at", skip_serializing_if = "Option::is_none")]
    pub completed_at: Option<String>,
    #[serde(rename = "conclusion", skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<String>,
    /// The time that the job created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "head_sha", skip_serializing_if = "Option::is_none")]
    pub head_sha: Option<String>,
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "run_attempt", skip_serializing_if = "Option::is_none")]
    pub run_attempt: Option<i32>,
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(rename = "run_url", skip_serializing_if = "Option::is_none")]
    pub run_url: Option<String>,
    #[serde(rename = "runner_group_id", skip_serializing_if = "Option::is_none")]
    pub runner_group_id: Option<f32>,
    #[serde(rename = "runner_group_name", skip_serializing_if = "Option::is_none")]
    pub runner_group_name: Option<String>,
    #[serde(rename = "runner_id", skip_serializing_if = "Option::is_none")]
    pub runner_id: Option<f32>,
    #[serde(rename = "runner_name", skip_serializing_if = "Option::is_none")]
    pub runner_name: Option<String>,
    #[serde(rename = "started_at", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    /// The name of the current branch.
    #[serde(rename = "head_branch", skip_serializing_if = "Option::is_none")]
    pub head_branch: Option<String>,
    /// The name of the workflow.
    #[serde(rename = "workflow_name", skip_serializing_if = "Option::is_none")]
    pub workflow_name: Option<String>,
    #[serde(rename = "steps")]
    pub steps: Vec<crate::models::WorkflowStep2>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl WebhookWorkflowJobInProgressWorkflowJobAllOf {
    pub fn new(status: Status, steps: Vec<crate::models::WorkflowStep2>) -> WebhookWorkflowJobInProgressWorkflowJobAllOf {
        WebhookWorkflowJobInProgressWorkflowJobAllOf {
            check_run_url: None,
            completed_at: None,
            conclusion: None,
            created_at: None,
            head_sha: None,
            html_url: None,
            id: None,
            labels: None,
            name: None,
            node_id: None,
            run_attempt: None,
            run_id: None,
            run_url: None,
            runner_group_id: None,
            runner_group_name: None,
            runner_id: None,
            runner_name: None,
            started_at: None,
            status,
            head_branch: None,
            workflow_name: None,
            steps,
            url: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "queued")]
    Queued,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}

