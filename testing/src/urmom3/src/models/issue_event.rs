/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IssueEvent : Issue Event



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IssueEvent {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "actor")]
    pub actor: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "event")]
    pub event: String,
    #[serde(rename = "commit_id")]
    pub commit_id: Option<String>,
    #[serde(rename = "commit_url")]
    pub commit_url: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "issue", skip_serializing_if = "Option::is_none")]
    pub issue: Option<Box<crate::models::NullableIssue>>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<Box<crate::models::IssueEventLabel>>,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "assigner", skip_serializing_if = "Option::is_none")]
    pub assigner: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "review_requester", skip_serializing_if = "Option::is_none")]
    pub review_requester: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "requested_reviewer", skip_serializing_if = "Option::is_none")]
    pub requested_reviewer: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "requested_team", skip_serializing_if = "Option::is_none")]
    pub requested_team: Option<Box<crate::models::Team>>,
    #[serde(rename = "dismissed_review", skip_serializing_if = "Option::is_none")]
    pub dismissed_review: Option<Box<crate::models::IssueEventDismissedReview>>,
    #[serde(rename = "milestone", skip_serializing_if = "Option::is_none")]
    pub milestone: Option<Box<crate::models::IssueEventMilestone>>,
    #[serde(rename = "project_card", skip_serializing_if = "Option::is_none")]
    pub project_card: Option<Box<crate::models::IssueEventProjectCard>>,
    #[serde(rename = "rename", skip_serializing_if = "Option::is_none")]
    pub rename: Option<Box<crate::models::IssueEventRename>>,
    #[serde(rename = "author_association", skip_serializing_if = "Option::is_none")]
    pub author_association: Option<crate::models::AuthorAssociation>,
    #[serde(rename = "lock_reason", skip_serializing_if = "Option::is_none")]
    pub lock_reason: Option<String>,
    #[serde(rename = "performed_via_github_app", skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Box<crate::models::NullableIntegration>>,
}

impl IssueEvent {
    /// Issue Event
    pub fn new(id: i64, node_id: String, url: String, actor: Option<crate::models::NullableSimpleUser>, event: String, commit_id: Option<String>, commit_url: Option<String>, created_at: String) -> IssueEvent {
        IssueEvent {
            id,
            node_id,
            url,
            actor: if let Some(x) = actor {Some(Box::new(x))} else {None},
            event,
            commit_id,
            commit_url,
            created_at,
            issue: None,
            label: None,
            assignee: None,
            assigner: None,
            review_requester: None,
            requested_reviewer: None,
            requested_team: None,
            dismissed_review: None,
            milestone: None,
            project_card: None,
            rename: None,
            author_association: None,
            lock_reason: None,
            performed_via_github_app: None,
        }
    }
}


