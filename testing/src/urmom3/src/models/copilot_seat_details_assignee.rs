/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CopilotSeatDetailsAssignee : The assignee that has been granted access to GitHub Copilot.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CopilotSeatDetailsAssignee {
    /// Display name for the organization
    #[serde(rename = "name")]
    pub name: String,
    /// Display email for the organization
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Unique login name of the organization
    #[serde(rename = "login")]
    pub login: String,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "avatar_url")]
    pub avatar_url: String,
    #[serde(rename = "gravatar_id")]
    pub gravatar_id: Option<String>,
    /// URL for the organization
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "followers_url")]
    pub followers_url: String,
    #[serde(rename = "following_url")]
    pub following_url: String,
    #[serde(rename = "gists_url")]
    pub gists_url: String,
    #[serde(rename = "starred_url")]
    pub starred_url: String,
    #[serde(rename = "subscriptions_url")]
    pub subscriptions_url: String,
    #[serde(rename = "organizations_url")]
    pub organizations_url: String,
    #[serde(rename = "repos_url")]
    pub repos_url: String,
    #[serde(rename = "events_url")]
    pub events_url: String,
    #[serde(rename = "received_events_url")]
    pub received_events_url: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "site_admin")]
    pub site_admin: bool,
    #[serde(rename = "starred_at", skip_serializing_if = "Option::is_none")]
    pub starred_at: Option<String>,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "description")]
    pub description: Option<String>,
    #[serde(rename = "privacy", skip_serializing_if = "Option::is_none")]
    pub privacy: Option<String>,
    #[serde(rename = "notification_setting", skip_serializing_if = "Option::is_none")]
    pub notification_setting: Option<String>,
    #[serde(rename = "permission")]
    pub permission: String,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::TeamPermissions>>,
    #[serde(rename = "members_url")]
    pub members_url: String,
    #[serde(rename = "repositories_url")]
    pub repositories_url: String,
    #[serde(rename = "parent")]
    pub parent: Option<Box<crate::models::NullableTeamSimple>>,
    #[serde(rename = "hooks_url")]
    pub hooks_url: String,
    #[serde(rename = "issues_url")]
    pub issues_url: String,
    #[serde(rename = "public_members_url")]
    pub public_members_url: String,
    /// Display blog url for the organization
    #[serde(rename = "blog", skip_serializing_if = "Option::is_none")]
    pub blog: Option<String>,
    /// Display company name for the organization
    #[serde(rename = "company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    /// Display location for the organization
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Specifies if organization projects are enabled for this org
    #[serde(rename = "has_organization_projects")]
    pub has_organization_projects: bool,
    /// Specifies if repository projects are enabled for repositories that belong to this org
    #[serde(rename = "has_repository_projects")]
    pub has_repository_projects: bool,
    #[serde(rename = "is_verified", skip_serializing_if = "Option::is_none")]
    pub is_verified: Option<bool>,
    #[serde(rename = "public_repos")]
    pub public_repos: i32,
    #[serde(rename = "public_gists")]
    pub public_gists: i32,
    #[serde(rename = "followers")]
    pub followers: i32,
    #[serde(rename = "following")]
    pub following: i32,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<Box<crate::models::OrganizationPlan>>,
}

impl CopilotSeatDetailsAssignee {
    /// The assignee that has been granted access to GitHub Copilot.
    pub fn new(name: String, login: String, id: i32, node_id: String, avatar_url: String, gravatar_id: Option<String>, url: String, html_url: String, followers_url: String, following_url: String, gists_url: String, starred_url: String, subscriptions_url: String, organizations_url: String, repos_url: String, events_url: String, received_events_url: String, r#type: String, site_admin: bool, slug: String, description: Option<String>, permission: String, members_url: String, repositories_url: String, parent: Option<crate::models::NullableTeamSimple>, hooks_url: String, issues_url: String, public_members_url: String, has_organization_projects: bool, has_repository_projects: bool, public_repos: i32, public_gists: i32, followers: i32, following: i32, created_at: String, updated_at: String) -> CopilotSeatDetailsAssignee {
        CopilotSeatDetailsAssignee {
            name,
            email: None,
            login,
            id,
            node_id,
            avatar_url,
            gravatar_id,
            url,
            html_url,
            followers_url,
            following_url,
            gists_url,
            starred_url,
            subscriptions_url,
            organizations_url,
            repos_url,
            events_url,
            received_events_url,
            r#type,
            site_admin,
            starred_at: None,
            slug,
            description,
            privacy: None,
            notification_setting: None,
            permission,
            permissions: None,
            members_url,
            repositories_url,
            parent: if let Some(x) = parent {Some(Box::new(x))} else {None},
            hooks_url,
            issues_url,
            public_members_url,
            blog: None,
            company: None,
            location: None,
            has_organization_projects,
            has_repository_projects,
            is_verified: None,
            public_repos,
            public_gists,
            followers,
            following,
            created_at,
            updated_at,
            plan: None,
        }
    }
}


