/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookDiscussionAnswered {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "answer")]
    pub answer: Box<crate::models::WebhooksAnswer>,
    #[serde(rename = "discussion")]
    pub discussion: Box<crate::models::Discussion>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<crate::models::SimpleInstallation>>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::RepositoryWebhooks>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::SimpleUserWebhooks>,
}

impl WebhookDiscussionAnswered {
    pub fn new(action: Action, answer: crate::models::WebhooksAnswer, discussion: crate::models::Discussion, repository: crate::models::RepositoryWebhooks, sender: crate::models::SimpleUserWebhooks) -> WebhookDiscussionAnswered {
        WebhookDiscussionAnswered {
            action,
            answer: Box::new(answer),
            discussion: Box::new(discussion),
            enterprise: None,
            installation: None,
            organization: None,
            repository: Box::new(repository),
            sender: Box::new(sender),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "answered")]
    Answered,
}

impl Default for Action {
    fn default() -> Action {
        Self::Answered
    }
}

