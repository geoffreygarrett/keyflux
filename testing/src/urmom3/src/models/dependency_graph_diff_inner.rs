/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DependencyGraphDiffInner {
    #[serde(rename = "change_type")]
    pub change_type: ChangeType,
    #[serde(rename = "manifest")]
    pub manifest: String,
    #[serde(rename = "ecosystem")]
    pub ecosystem: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "package_url")]
    pub package_url: Option<String>,
    #[serde(rename = "license")]
    pub license: Option<String>,
    #[serde(rename = "source_repository_url")]
    pub source_repository_url: Option<String>,
    #[serde(rename = "vulnerabilities")]
    pub vulnerabilities: Vec<crate::models::DependencyGraphDiffInnerVulnerabilitiesInner>,
    /// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
    #[serde(rename = "scope")]
    pub scope: Scope,
}

impl DependencyGraphDiffInner {
    pub fn new(change_type: ChangeType, manifest: String, ecosystem: String, name: String, version: String, package_url: Option<String>, license: Option<String>, source_repository_url: Option<String>, vulnerabilities: Vec<crate::models::DependencyGraphDiffInnerVulnerabilitiesInner>, scope: Scope) -> DependencyGraphDiffInner {
        DependencyGraphDiffInner {
            change_type,
            manifest,
            ecosystem,
            name,
            version,
            package_url,
            license,
            source_repository_url,
            vulnerabilities,
            scope,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChangeType {
    #[serde(rename = "added")]
    Added,
    #[serde(rename = "removed")]
    Removed,
}

impl Default for ChangeType {
    fn default() -> ChangeType {
        Self::Added
    }
}
/// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Scope {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "runtime")]
    Runtime,
    #[serde(rename = "development")]
    Development,
}

impl Default for Scope {
    fn default() -> Scope {
        Self::Unknown
    }
}

