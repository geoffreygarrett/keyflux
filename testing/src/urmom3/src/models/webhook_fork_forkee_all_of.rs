/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookForkForkeeAllOf {
    #[serde(rename = "allow_forking", skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[serde(rename = "archive_url", skip_serializing_if = "Option::is_none")]
    pub archive_url: Option<String>,
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "assignees_url", skip_serializing_if = "Option::is_none")]
    pub assignees_url: Option<String>,
    #[serde(rename = "blobs_url", skip_serializing_if = "Option::is_none")]
    pub blobs_url: Option<String>,
    #[serde(rename = "branches_url", skip_serializing_if = "Option::is_none")]
    pub branches_url: Option<String>,
    #[serde(rename = "clone_url", skip_serializing_if = "Option::is_none")]
    pub clone_url: Option<String>,
    #[serde(rename = "collaborators_url", skip_serializing_if = "Option::is_none")]
    pub collaborators_url: Option<String>,
    #[serde(rename = "comments_url", skip_serializing_if = "Option::is_none")]
    pub comments_url: Option<String>,
    #[serde(rename = "commits_url", skip_serializing_if = "Option::is_none")]
    pub commits_url: Option<String>,
    #[serde(rename = "compare_url", skip_serializing_if = "Option::is_none")]
    pub compare_url: Option<String>,
    #[serde(rename = "contents_url", skip_serializing_if = "Option::is_none")]
    pub contents_url: Option<String>,
    #[serde(rename = "contributors_url", skip_serializing_if = "Option::is_none")]
    pub contributors_url: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "default_branch", skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<String>,
    #[serde(rename = "deployments_url", skip_serializing_if = "Option::is_none")]
    pub deployments_url: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(rename = "downloads_url", skip_serializing_if = "Option::is_none")]
    pub downloads_url: Option<String>,
    #[serde(rename = "events_url", skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[serde(rename = "fork", skip_serializing_if = "Option::is_none")]
    pub fork: Option<Fork>,
    #[serde(rename = "forks", skip_serializing_if = "Option::is_none")]
    pub forks: Option<i32>,
    #[serde(rename = "forks_count", skip_serializing_if = "Option::is_none")]
    pub forks_count: Option<i32>,
    #[serde(rename = "forks_url", skip_serializing_if = "Option::is_none")]
    pub forks_url: Option<String>,
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "git_commits_url", skip_serializing_if = "Option::is_none")]
    pub git_commits_url: Option<String>,
    #[serde(rename = "git_refs_url", skip_serializing_if = "Option::is_none")]
    pub git_refs_url: Option<String>,
    #[serde(rename = "git_tags_url", skip_serializing_if = "Option::is_none")]
    pub git_tags_url: Option<String>,
    #[serde(rename = "git_url", skip_serializing_if = "Option::is_none")]
    pub git_url: Option<String>,
    #[serde(rename = "has_downloads", skip_serializing_if = "Option::is_none")]
    pub has_downloads: Option<bool>,
    #[serde(rename = "has_issues", skip_serializing_if = "Option::is_none")]
    pub has_issues: Option<bool>,
    #[serde(rename = "has_pages", skip_serializing_if = "Option::is_none")]
    pub has_pages: Option<bool>,
    #[serde(rename = "has_projects", skip_serializing_if = "Option::is_none")]
    pub has_projects: Option<bool>,
    #[serde(rename = "has_wiki", skip_serializing_if = "Option::is_none")]
    pub has_wiki: Option<bool>,
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[serde(rename = "hooks_url", skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "is_template", skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[serde(rename = "issue_comment_url", skip_serializing_if = "Option::is_none")]
    pub issue_comment_url: Option<String>,
    #[serde(rename = "issue_events_url", skip_serializing_if = "Option::is_none")]
    pub issue_events_url: Option<String>,
    #[serde(rename = "issues_url", skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[serde(rename = "keys_url", skip_serializing_if = "Option::is_none")]
    pub keys_url: Option<String>,
    #[serde(rename = "labels_url", skip_serializing_if = "Option::is_none")]
    pub labels_url: Option<String>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<serde_json::Value>,
    #[serde(rename = "languages_url", skip_serializing_if = "Option::is_none")]
    pub languages_url: Option<String>,
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<serde_json::Value>,
    #[serde(rename = "merges_url", skip_serializing_if = "Option::is_none")]
    pub merges_url: Option<String>,
    #[serde(rename = "milestones_url", skip_serializing_if = "Option::is_none")]
    pub milestones_url: Option<String>,
    #[serde(rename = "mirror_url", skip_serializing_if = "Option::is_none")]
    pub mirror_url: Option<serde_json::Value>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "notifications_url", skip_serializing_if = "Option::is_none")]
    pub notifications_url: Option<String>,
    #[serde(rename = "open_issues", skip_serializing_if = "Option::is_none")]
    pub open_issues: Option<i32>,
    #[serde(rename = "open_issues_count", skip_serializing_if = "Option::is_none")]
    pub open_issues_count: Option<i32>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::WebhooksSponsorshipMaintainer>>,
    #[serde(rename = "private", skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[serde(rename = "pulls_url", skip_serializing_if = "Option::is_none")]
    pub pulls_url: Option<String>,
    #[serde(rename = "pushed_at", skip_serializing_if = "Option::is_none")]
    pub pushed_at: Option<String>,
    #[serde(rename = "releases_url", skip_serializing_if = "Option::is_none")]
    pub releases_url: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    #[serde(rename = "ssh_url", skip_serializing_if = "Option::is_none")]
    pub ssh_url: Option<String>,
    #[serde(rename = "stargazers_count", skip_serializing_if = "Option::is_none")]
    pub stargazers_count: Option<i32>,
    #[serde(rename = "stargazers_url", skip_serializing_if = "Option::is_none")]
    pub stargazers_url: Option<String>,
    #[serde(rename = "statuses_url", skip_serializing_if = "Option::is_none")]
    pub statuses_url: Option<String>,
    #[serde(rename = "subscribers_url", skip_serializing_if = "Option::is_none")]
    pub subscribers_url: Option<String>,
    #[serde(rename = "subscription_url", skip_serializing_if = "Option::is_none")]
    pub subscription_url: Option<String>,
    #[serde(rename = "svn_url", skip_serializing_if = "Option::is_none")]
    pub svn_url: Option<String>,
    #[serde(rename = "tags_url", skip_serializing_if = "Option::is_none")]
    pub tags_url: Option<String>,
    #[serde(rename = "teams_url", skip_serializing_if = "Option::is_none")]
    pub teams_url: Option<String>,
    #[serde(rename = "topics", skip_serializing_if = "Option::is_none")]
    pub topics: Option<Vec<serde_json::Value>>,
    #[serde(rename = "trees_url", skip_serializing_if = "Option::is_none")]
    pub trees_url: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
    #[serde(rename = "watchers", skip_serializing_if = "Option::is_none")]
    pub watchers: Option<i32>,
    #[serde(rename = "watchers_count", skip_serializing_if = "Option::is_none")]
    pub watchers_count: Option<i32>,
}

impl WebhookForkForkeeAllOf {
    pub fn new() -> WebhookForkForkeeAllOf {
        WebhookForkForkeeAllOf {
            allow_forking: None,
            archive_url: None,
            archived: None,
            assignees_url: None,
            blobs_url: None,
            branches_url: None,
            clone_url: None,
            collaborators_url: None,
            comments_url: None,
            commits_url: None,
            compare_url: None,
            contents_url: None,
            contributors_url: None,
            created_at: None,
            default_branch: None,
            deployments_url: None,
            description: None,
            disabled: None,
            downloads_url: None,
            events_url: None,
            fork: None,
            forks: None,
            forks_count: None,
            forks_url: None,
            full_name: None,
            git_commits_url: None,
            git_refs_url: None,
            git_tags_url: None,
            git_url: None,
            has_downloads: None,
            has_issues: None,
            has_pages: None,
            has_projects: None,
            has_wiki: None,
            homepage: None,
            hooks_url: None,
            html_url: None,
            id: None,
            is_template: None,
            issue_comment_url: None,
            issue_events_url: None,
            issues_url: None,
            keys_url: None,
            labels_url: None,
            language: None,
            languages_url: None,
            license: None,
            merges_url: None,
            milestones_url: None,
            mirror_url: None,
            name: None,
            node_id: None,
            notifications_url: None,
            open_issues: None,
            open_issues_count: None,
            owner: None,
            private: None,
            public: None,
            pulls_url: None,
            pushed_at: None,
            releases_url: None,
            size: None,
            ssh_url: None,
            stargazers_count: None,
            stargazers_url: None,
            statuses_url: None,
            subscribers_url: None,
            subscription_url: None,
            svn_url: None,
            tags_url: None,
            teams_url: None,
            topics: None,
            trees_url: None,
            updated_at: None,
            url: None,
            visibility: None,
            watchers: None,
            watchers_count: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Fork {
    #[serde(rename = "true")]
    True,
}

impl Default for Fork {
    fn default() -> Fork {
        Self::True
    }
}

