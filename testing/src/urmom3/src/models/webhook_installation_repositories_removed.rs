/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookInstallationRepositoriesRemoved {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::EnterpriseWebhooks>>,
    #[serde(rename = "installation")]
    pub installation: Box<crate::models::Installation>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    /// An array of repository objects, which were added to the installation.
    #[serde(rename = "repositories_added")]
    pub repositories_added: Vec<crate::models::WebhooksRepositoriesInner>,
    /// An array of repository objects, which were removed from the installation.
    #[serde(rename = "repositories_removed")]
    pub repositories_removed: Vec<crate::models::WebhooksRepositoriesInner>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<crate::models::RepositoryWebhooks>>,
    #[serde(rename = "repository_selection")]
    pub repository_selection: crate::models::WebhooksRepositorySelection,
    #[serde(rename = "requester")]
    pub requester: Option<Box<crate::models::WebhooksUser>>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::SimpleUserWebhooks>,
}

impl WebhookInstallationRepositoriesRemoved {
    pub fn new(action: Action, installation: crate::models::Installation, repositories_added: Vec<crate::models::WebhooksRepositoriesInner>, repositories_removed: Vec<crate::models::WebhooksRepositoriesInner>, repository_selection: crate::models::WebhooksRepositorySelection, requester: Option<crate::models::WebhooksUser>, sender: crate::models::SimpleUserWebhooks) -> WebhookInstallationRepositoriesRemoved {
        WebhookInstallationRepositoriesRemoved {
            action,
            enterprise: None,
            installation: Box::new(installation),
            organization: None,
            repositories_added,
            repositories_removed,
            repository: None,
            repository_selection,
            requester: if let Some(x) = requester {Some(Box::new(x))} else {None},
            sender: Box::new(sender),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "removed")]
    Removed,
}

impl Default for Action {
    fn default() -> Action {
        Self::Removed
    }
}

