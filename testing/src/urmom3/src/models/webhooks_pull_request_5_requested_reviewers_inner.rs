/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhooksPullRequest5RequestedReviewersInner {
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "events_url", skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[serde(rename = "followers_url", skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[serde(rename = "following_url", skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[serde(rename = "gists_url", skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[serde(rename = "gravatar_id", skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    /// Unique identifier of the team
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "login")]
    pub login: String,
    /// Name of the team
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "organizations_url", skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[serde(rename = "received_events_url", skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[serde(rename = "repos_url", skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[serde(rename = "site_admin", skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[serde(rename = "starred_url", skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[serde(rename = "subscriptions_url", skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// URL for the team
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Description of the team
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "members_url", skip_serializing_if = "Option::is_none")]
    pub members_url: Option<String>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<crate::models::TeamParent>>,
    /// Permission that the team will have for its repositories
    #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
    #[serde(rename = "privacy", skip_serializing_if = "Option::is_none")]
    pub privacy: Option<Privacy>,
    #[serde(rename = "repositories_url", skip_serializing_if = "Option::is_none")]
    pub repositories_url: Option<String>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
}

impl WebhooksPullRequest5RequestedReviewersInner {
    pub fn new(id: i32, login: String, name: String) -> WebhooksPullRequest5RequestedReviewersInner {
        WebhooksPullRequest5RequestedReviewersInner {
            avatar_url: None,
            deleted: None,
            email: None,
            events_url: None,
            followers_url: None,
            following_url: None,
            gists_url: None,
            gravatar_id: None,
            html_url: None,
            id,
            login,
            name,
            node_id: None,
            organizations_url: None,
            received_events_url: None,
            repos_url: None,
            site_admin: None,
            starred_url: None,
            subscriptions_url: None,
            r#type: None,
            url: None,
            description: None,
            members_url: None,
            parent: None,
            permission: None,
            privacy: None,
            repositories_url: None,
            slug: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "Bot")]
    Bot,
    #[serde(rename = "User")]
    User,
    #[serde(rename = "Organization")]
    Organization,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Bot
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Privacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}

impl Default for Privacy {
    fn default() -> Privacy {
        Self::Open
    }
}

