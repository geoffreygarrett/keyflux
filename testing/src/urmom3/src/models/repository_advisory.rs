/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RepositoryAdvisory : A repository security advisory.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RepositoryAdvisory {
    /// The GitHub Security Advisory ID.
    #[serde(rename = "ghsa_id")]
    pub ghsa_id: String,
    /// The Common Vulnerabilities and Exposures (CVE) ID.
    #[serde(rename = "cve_id")]
    pub cve_id: Option<String>,
    /// The API URL for the advisory.
    #[serde(rename = "url")]
    pub url: String,
    /// The URL for the advisory.
    #[serde(rename = "html_url")]
    pub html_url: String,
    /// A short summary of the advisory.
    #[serde(rename = "summary")]
    pub summary: String,
    /// A detailed description of what the advisory entails.
    #[serde(rename = "description")]
    pub description: Option<String>,
    /// The severity of the advisory.
    #[serde(rename = "severity")]
    pub severity: Option<Severity>,
    #[serde(rename = "author")]
    pub author: Option<Box<crate::models::RepositoryAdvisoryAuthor>>,
    #[serde(rename = "publisher")]
    pub publisher: Option<Box<crate::models::RepositoryAdvisoryPublisher>>,
    #[serde(rename = "identifiers")]
    pub identifiers: Vec<crate::models::GlobalAdvisoryIdentifiersInner>,
    /// The state of the advisory.
    #[serde(rename = "state")]
    pub state: State,
    /// The date and time of when the advisory was created, in ISO 8601 format.
    #[serde(rename = "created_at")]
    pub created_at: Option<String>,
    /// The date and time of when the advisory was last updated, in ISO 8601 format.
    #[serde(rename = "updated_at")]
    pub updated_at: Option<String>,
    /// The date and time of when the advisory was published, in ISO 8601 format.
    #[serde(rename = "published_at")]
    pub published_at: Option<String>,
    /// The date and time of when the advisory was closed, in ISO 8601 format.
    #[serde(rename = "closed_at")]
    pub closed_at: Option<String>,
    /// The date and time of when the advisory was withdrawn, in ISO 8601 format.
    #[serde(rename = "withdrawn_at")]
    pub withdrawn_at: Option<String>,
    #[serde(rename = "submission")]
    pub submission: Option<Box<crate::models::RepositoryAdvisorySubmission>>,
    #[serde(rename = "vulnerabilities")]
    pub vulnerabilities: Option<Vec<crate::models::RepositoryAdvisoryVulnerability>>,
    #[serde(rename = "cvss")]
    pub cvss: Option<Box<crate::models::GlobalAdvisoryCvss>>,
    #[serde(rename = "cwes")]
    pub cwes: Option<Vec<crate::models::GlobalAdvisoryCwesInner>>,
    /// A list of only the CWE IDs.
    #[serde(rename = "cwe_ids")]
    pub cwe_ids: Option<Vec<String>>,
    #[serde(rename = "credits")]
    pub credits: Option<Vec<crate::models::RepositoryAdvisoryCreditsInner>>,
    #[serde(rename = "credits_detailed")]
    pub credits_detailed: Option<Vec<crate::models::RepositoryAdvisoryCredit>>,
    /// A list of users that collaborate on the advisory.
    #[serde(rename = "collaborating_users")]
    pub collaborating_users: Option<Vec<crate::models::SimpleUser>>,
    /// A list of teams that collaborate on the advisory.
    #[serde(rename = "collaborating_teams")]
    pub collaborating_teams: Option<Vec<crate::models::Team>>,
    #[serde(rename = "private_fork")]
    pub private_fork: Option<Box<crate::models::RepositoryAdvisoryPrivateFork>>,
}

impl RepositoryAdvisory {
    /// A repository security advisory.
    pub fn new(ghsa_id: String, cve_id: Option<String>, url: String, html_url: String, summary: String, description: Option<String>, severity: Option<Severity>, author: Option<crate::models::RepositoryAdvisoryAuthor>, publisher: Option<crate::models::RepositoryAdvisoryPublisher>, identifiers: Vec<crate::models::GlobalAdvisoryIdentifiersInner>, state: State, created_at: Option<String>, updated_at: Option<String>, published_at: Option<String>, closed_at: Option<String>, withdrawn_at: Option<String>, submission: Option<crate::models::RepositoryAdvisorySubmission>, vulnerabilities: Option<Vec<crate::models::RepositoryAdvisoryVulnerability>>, cvss: Option<crate::models::GlobalAdvisoryCvss>, cwes: Option<Vec<crate::models::GlobalAdvisoryCwesInner>>, cwe_ids: Option<Vec<String>>, credits: Option<Vec<crate::models::RepositoryAdvisoryCreditsInner>>, credits_detailed: Option<Vec<crate::models::RepositoryAdvisoryCredit>>, collaborating_users: Option<Vec<crate::models::SimpleUser>>, collaborating_teams: Option<Vec<crate::models::Team>>, private_fork: Option<crate::models::RepositoryAdvisoryPrivateFork>) -> RepositoryAdvisory {
        RepositoryAdvisory {
            ghsa_id,
            cve_id,
            url,
            html_url,
            summary,
            description,
            severity,
            author: if let Some(x) = author {Some(Box::new(x))} else {None},
            publisher: if let Some(x) = publisher {Some(Box::new(x))} else {None},
            identifiers,
            state,
            created_at,
            updated_at,
            published_at,
            closed_at,
            withdrawn_at,
            submission: if let Some(x) = submission {Some(Box::new(x))} else {None},
            vulnerabilities,
            cvss: if let Some(x) = cvss {Some(Box::new(x))} else {None},
            cwes,
            cwe_ids,
            credits,
            credits_detailed,
            collaborating_users,
            collaborating_teams,
            private_fork: if let Some(x) = private_fork {Some(Box::new(x))} else {None},
        }
    }
}

/// The severity of the advisory.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "low")]
    Low,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Critical
    }
}
/// The state of the advisory.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "withdrawn")]
    Withdrawn,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "triage")]
    Triage,
}

impl Default for State {
    fn default() -> State {
        Self::Published
    }
}

