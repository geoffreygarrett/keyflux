/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CommitSearchResultItem : Commit Search Result Item



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CommitSearchResultItem {
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "commit")]
    pub commit: Box<crate::models::CommitSearchResultItemCommit>,
    #[serde(rename = "author")]
    pub author: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "committer")]
    pub committer: Option<Box<crate::models::NullableGitUser>>,
    #[serde(rename = "parents")]
    pub parents: Vec<crate::models::FileCommitCommitParentsInner>,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::MinimalRepository>,
    #[serde(rename = "score")]
    pub score: f32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "text_matches", skip_serializing_if = "Option::is_none")]
    pub text_matches: Option<Vec<crate::models::SearchResultTextMatchesInner>>,
}

impl CommitSearchResultItem {
    /// Commit Search Result Item
    pub fn new(url: String, sha: String, html_url: String, comments_url: String, commit: crate::models::CommitSearchResultItemCommit, author: Option<crate::models::NullableSimpleUser>, committer: Option<crate::models::NullableGitUser>, parents: Vec<crate::models::FileCommitCommitParentsInner>, repository: crate::models::MinimalRepository, score: f32, node_id: String) -> CommitSearchResultItem {
        CommitSearchResultItem {
            url,
            sha,
            html_url,
            comments_url,
            commit: Box::new(commit),
            author: if let Some(x) = author {Some(Box::new(x))} else {None},
            committer: if let Some(x) = committer {Some(Box::new(x))} else {None},
            parents,
            repository: Box::new(repository),
            score,
            node_id,
            text_matches: None,
        }
    }
}


