/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookPing {
    #[serde(rename = "hook", skip_serializing_if = "Option::is_none")]
    pub hook: Option<Box<crate::models::Webhook>>,
    /// The ID of the webhook that triggered the ping.
    #[serde(rename = "hook_id", skip_serializing_if = "Option::is_none")]
    pub hook_id: Option<i32>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<crate::models::RepositoryWebhooks>>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::models::SimpleUserWebhooks>>,
    /// Random string of GitHub zen.
    #[serde(rename = "zen", skip_serializing_if = "Option::is_none")]
    pub zen: Option<String>,
}

impl WebhookPing {
    pub fn new() -> WebhookPing {
        WebhookPing {
            hook: None,
            hook_id: None,
            organization: None,
            repository: None,
            sender: None,
            zen: None,
        }
    }
}


