/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookMergeGroupDestroyed {
    #[serde(rename = "action")]
    pub action: Action,
    /// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<crate::models::SimpleInstallation>>,
    #[serde(rename = "merge_group")]
    pub merge_group: Box<crate::models::MergeGroup>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<crate::models::RepositoryWebhooks>>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::models::SimpleUserWebhooks>>,
}

impl WebhookMergeGroupDestroyed {
    pub fn new(action: Action, merge_group: crate::models::MergeGroup) -> WebhookMergeGroupDestroyed {
        WebhookMergeGroupDestroyed {
            action,
            reason: None,
            installation: None,
            merge_group: Box::new(merge_group),
            organization: None,
            repository: None,
            sender: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "destroyed")]
    Destroyed,
}

impl Default for Action {
    fn default() -> Action {
        Self::Destroyed
    }
}
/// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "merged")]
    Merged,
    #[serde(rename = "invalidated")]
    Invalidated,
    #[serde(rename = "dequeued")]
    Dequeued,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Merged
    }
}

