/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NullableSimpleCommit : A commit.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NullableSimpleCommit {
    /// SHA for the commit
    #[serde(rename = "id")]
    pub id: String,
    /// SHA for the commit's tree
    #[serde(rename = "tree_id")]
    pub tree_id: String,
    /// Message describing the purpose of the commit
    #[serde(rename = "message")]
    pub message: String,
    /// Timestamp of the commit
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "author")]
    pub author: Option<Box<crate::models::NullableSimpleCommitAuthor>>,
    #[serde(rename = "committer")]
    pub committer: Option<Box<crate::models::NullableSimpleCommitCommitter>>,
}

impl NullableSimpleCommit {
    /// A commit.
    pub fn new(id: String, tree_id: String, message: String, timestamp: String, author: Option<crate::models::NullableSimpleCommitAuthor>, committer: Option<crate::models::NullableSimpleCommitCommitter>) -> NullableSimpleCommit {
        NullableSimpleCommit {
            id,
            tree_id,
            message,
            timestamp,
            author: if let Some(x) = author {Some(Box::new(x))} else {None},
            committer: if let Some(x) = committer {Some(Box::new(x))} else {None},
        }
    }
}


