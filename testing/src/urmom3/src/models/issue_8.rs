/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Issue8 : The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Issue8 {
    #[serde(rename = "active_lock_reason")]
    pub active_lock_reason: Option<ActiveLockReason>,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Box<crate::models::User>>,
    #[serde(rename = "assignees")]
    pub assignees: Vec<crate::models::User>,
    /// How the author is associated with the repository.
    #[serde(rename = "author_association")]
    pub author_association: AuthorAssociation,
    /// Contents of the issue
    #[serde(rename = "body")]
    pub body: Option<String>,
    #[serde(rename = "closed_at")]
    pub closed_at: Option<String>,
    #[serde(rename = "comments")]
    pub comments: i32,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "draft", skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[serde(rename = "events_url")]
    pub events_url: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::models::Label1>>,
    #[serde(rename = "labels_url")]
    pub labels_url: String,
    #[serde(rename = "locked")]
    pub locked: Locked,
    #[serde(rename = "milestone")]
    pub milestone: Option<Box<crate::models::Milestone1>>,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "performed_via_github_app", skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Box<crate::models::App14>>,
    #[serde(rename = "pull_request", skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<Box<crate::models::WebhooksIssuePullRequest>>,
    #[serde(rename = "reactions")]
    pub reactions: Box<crate::models::Reactions>,
    #[serde(rename = "repository_url")]
    pub repository_url: String,
    /// State of the issue; either 'open' or 'closed'
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[serde(rename = "timeline_url", skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    /// Title of the issue
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// URL for the issue
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "user")]
    pub user: Option<Box<crate::models::User1>>,
}

impl Issue8 {
    /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    pub fn new(active_lock_reason: Option<ActiveLockReason>, assignees: Vec<crate::models::User>, author_association: AuthorAssociation, body: Option<String>, closed_at: Option<String>, comments: i32, comments_url: String, created_at: String, events_url: String, html_url: String, id: i64, labels_url: String, locked: Locked, milestone: Option<crate::models::Milestone1>, node_id: String, number: i32, reactions: crate::models::Reactions, repository_url: String, title: String, updated_at: String, url: String, user: Option<crate::models::User1>) -> Issue8 {
        Issue8 {
            active_lock_reason,
            assignee: None,
            assignees,
            author_association,
            body,
            closed_at,
            comments,
            comments_url,
            created_at,
            draft: None,
            events_url,
            html_url,
            id,
            labels: None,
            labels_url,
            locked,
            milestone: if let Some(x) = milestone {Some(Box::new(x))} else {None},
            node_id,
            number,
            performed_via_github_app: None,
            pull_request: None,
            reactions: Box::new(reactions),
            repository_url,
            state: None,
            state_reason: None,
            timeline_url: None,
            title,
            updated_at,
            url,
            user: if let Some(x) = user {Some(Box::new(x))} else {None},
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActiveLockReason {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "too heated")]
    TooHeated,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "null")]
    Null,
}

impl Default for ActiveLockReason {
    fn default() -> ActiveLockReason {
        Self::Resolved
    }
}
/// How the author is associated with the repository.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthorAssociation {
    #[serde(rename = "COLLABORATOR")]
    Collaborator,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
    #[serde(rename = "FIRST_TIMER")]
    FirstTimer,
    #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
    FirstTimeContributor,
    #[serde(rename = "MANNEQUIN")]
    Mannequin,
    #[serde(rename = "MEMBER")]
    Member,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "OWNER")]
    Owner,
}

impl Default for AuthorAssociation {
    fn default() -> AuthorAssociation {
        Self::Collaborator
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Locked {
    #[serde(rename = "true")]
    True,
}

impl Default for Locked {
    fn default() -> Locked {
        Self::True
    }
}
/// State of the issue; either 'open' or 'closed'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}

