/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookDeploymentReviewApproved {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "approver", skip_serializing_if = "Option::is_none")]
    pub approver: Option<Box<crate::models::WebhooksApprover>>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<crate::models::SimpleInstallation>>,
    #[serde(rename = "organization")]
    pub organization: Box<crate::models::OrganizationSimpleWebhooks>,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::RepositoryWebhooks>,
    #[serde(rename = "reviewers", skip_serializing_if = "Option::is_none")]
    pub reviewers: Option<Vec<crate::models::WebhooksReviewersInner>>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::SimpleUserWebhooks>,
    #[serde(rename = "since")]
    pub since: String,
    #[serde(rename = "workflow_job_run", skip_serializing_if = "Option::is_none")]
    pub workflow_job_run: Option<Box<crate::models::WebhooksWorkflowJobRun>>,
    #[serde(rename = "workflow_job_runs", skip_serializing_if = "Option::is_none")]
    pub workflow_job_runs: Option<Vec<crate::models::WebhookDeploymentReviewApprovedWorkflowJobRunsInner>>,
    #[serde(rename = "workflow_run")]
    pub workflow_run: Option<Box<crate::models::DeploymentWorkflowRun1>>,
}

impl WebhookDeploymentReviewApproved {
    pub fn new(action: Action, organization: crate::models::OrganizationSimpleWebhooks, repository: crate::models::RepositoryWebhooks, sender: crate::models::SimpleUserWebhooks, since: String, workflow_run: Option<crate::models::DeploymentWorkflowRun1>) -> WebhookDeploymentReviewApproved {
        WebhookDeploymentReviewApproved {
            action,
            approver: None,
            comment: None,
            enterprise: None,
            installation: None,
            organization: Box::new(organization),
            repository: Box::new(repository),
            reviewers: None,
            sender: Box::new(sender),
            since,
            workflow_job_run: None,
            workflow_job_runs: None,
            workflow_run: if let Some(x) = workflow_run {Some(Box::new(x))} else {None},
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "approved")]
    Approved,
}

impl Default for Action {
    fn default() -> Action {
        Self::Approved
    }
}

