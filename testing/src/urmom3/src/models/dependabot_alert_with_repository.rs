/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DependabotAlertWithRepository : A Dependabot alert.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DependabotAlertWithRepository {
    /// The security alert number.
    #[serde(rename = "number")]
    pub number: i32,
    /// The state of the Dependabot alert.
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "dependency")]
    pub dependency: Box<crate::models::DependabotAlertWithRepositoryDependency>,
    #[serde(rename = "security_advisory")]
    pub security_advisory: Box<crate::models::DependabotAlertSecurityAdvisory>,
    #[serde(rename = "security_vulnerability")]
    pub security_vulnerability: Box<crate::models::DependabotAlertSecurityVulnerability>,
    /// The REST API URL of the alert resource.
    #[serde(rename = "url")]
    pub url: String,
    /// The GitHub URL of the alert resource.
    #[serde(rename = "html_url")]
    pub html_url: String,
    /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "dismissed_at")]
    pub dismissed_at: Option<String>,
    #[serde(rename = "dismissed_by")]
    pub dismissed_by: Option<Box<crate::models::NullableSimpleUser>>,
    /// The reason that the alert was dismissed.
    #[serde(rename = "dismissed_reason")]
    pub dismissed_reason: Option<DismissedReason>,
    /// An optional comment associated with the alert's dismissal.
    #[serde(rename = "dismissed_comment")]
    pub dismissed_comment: Option<String>,
    /// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "fixed_at")]
    pub fixed_at: Option<String>,
    /// The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "auto_dismissed_at", skip_serializing_if = "Option::is_none")]
    pub auto_dismissed_at: Option<String>,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::SimpleRepository>,
}

impl DependabotAlertWithRepository {
    /// A Dependabot alert.
    pub fn new(number: i32, state: State, dependency: crate::models::DependabotAlertWithRepositoryDependency, security_advisory: crate::models::DependabotAlertSecurityAdvisory, security_vulnerability: crate::models::DependabotAlertSecurityVulnerability, url: String, html_url: String, created_at: String, updated_at: String, dismissed_at: Option<String>, dismissed_by: Option<crate::models::NullableSimpleUser>, dismissed_reason: Option<DismissedReason>, dismissed_comment: Option<String>, fixed_at: Option<String>, repository: crate::models::SimpleRepository) -> DependabotAlertWithRepository {
        DependabotAlertWithRepository {
            number,
            state,
            dependency: Box::new(dependency),
            security_advisory: Box::new(security_advisory),
            security_vulnerability: Box::new(security_vulnerability),
            url,
            html_url,
            created_at,
            updated_at,
            dismissed_at,
            dismissed_by: if let Some(x) = dismissed_by {Some(Box::new(x))} else {None},
            dismissed_reason,
            dismissed_comment,
            fixed_at,
            auto_dismissed_at: None,
            repository: Box::new(repository),
        }
    }
}

/// The state of the Dependabot alert.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "auto_dismissed")]
    AutoDismissed,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "open")]
    Open,
}

impl Default for State {
    fn default() -> State {
        Self::AutoDismissed
    }
}
/// The reason that the alert was dismissed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DismissedReason {
    #[serde(rename = "fix_started")]
    FixStarted,
    #[serde(rename = "inaccurate")]
    Inaccurate,
    #[serde(rename = "no_bandwidth")]
    NoBandwidth,
    #[serde(rename = "not_used")]
    NotUsed,
    #[serde(rename = "tolerable_risk")]
    TolerableRisk,
}

impl Default for DismissedReason {
    fn default() -> DismissedReason {
        Self::FixStarted
    }
}

