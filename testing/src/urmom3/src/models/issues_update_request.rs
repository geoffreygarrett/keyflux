/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IssuesUpdateRequest {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<Box<crate::models::IssuesUpdateRequestTitle>>,
    /// The contents of the issue.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Username to assign to this issue. **This field is deprecated.**
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<String>,
    /// The open or closed state of the issue.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The reason for the state change. Ignored unless `state` is changed.
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<StateReason>,
    #[serde(rename = "milestone", skip_serializing_if = "Option::is_none")]
    pub milestone: Option<Box<crate::models::IssuesUpdateRequestMilestone>>,
    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::models::IssuesCreateRequestLabelsInner>>,
    /// Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
    #[serde(rename = "assignees", skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<String>>,
}

impl IssuesUpdateRequest {
    pub fn new() -> IssuesUpdateRequest {
        IssuesUpdateRequest {
            title: None,
            body: None,
            assignee: None,
            state: None,
            state_reason: None,
            milestone: None,
            labels: None,
            assignees: None,
        }
    }
}

/// The open or closed state of the issue.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}
/// The reason for the state change. Ignored unless `state` is changed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StateReason {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "not_planned")]
    NotPlanned,
    #[serde(rename = "reopened")]
    Reopened,
}

impl Default for StateReason {
    fn default() -> StateReason {
        Self::Completed
    }
}

