/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GistComment : A comment made to a gist.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GistComment {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "url")]
    pub url: String,
    /// The comment text.
    #[serde(rename = "body")]
    pub body: String,
    #[serde(rename = "user")]
    pub user: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "author_association")]
    pub author_association: crate::models::AuthorAssociation,
}

impl GistComment {
    /// A comment made to a gist.
    pub fn new(id: i32, node_id: String, url: String, body: String, user: Option<crate::models::NullableSimpleUser>, created_at: String, updated_at: String, author_association: crate::models::AuthorAssociation) -> GistComment {
        GistComment {
            id,
            node_id,
            url,
            body,
            user: if let Some(x) = user {Some(Box::new(x))} else {None},
            created_at,
            updated_at,
            author_association,
        }
    }
}


