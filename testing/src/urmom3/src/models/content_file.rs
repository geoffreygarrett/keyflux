/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ContentFile : Content File



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContentFile {
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "encoding")]
    pub encoding: String,
    #[serde(rename = "size")]
    pub size: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "content")]
    pub content: String,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "git_url")]
    pub git_url: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: Option<String>,
    #[serde(rename = "download_url")]
    pub download_url: Option<String>,
    #[serde(rename = "_links")]
    pub _links: Box<crate::models::ContentTreeEntriesInnerLinks>,
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(rename = "submodule_git_url", skip_serializing_if = "Option::is_none")]
    pub submodule_git_url: Option<String>,
}

impl ContentFile {
    /// Content File
    pub fn new(r#type: RHashType, encoding: String, size: i32, name: String, path: String, content: String, sha: String, url: String, git_url: Option<String>, html_url: Option<String>, download_url: Option<String>, _links: crate::models::ContentTreeEntriesInnerLinks) -> ContentFile {
        ContentFile {
            r#type,
            encoding,
            size,
            name,
            path,
            content,
            sha,
            url,
            git_url,
            html_url,
            download_url,
            _links: Box::new(_links),
            target: None,
            submodule_git_url: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "file")]
    File,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::File
    }
}

