/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookDeploymentStatusCreated {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "check_run", skip_serializing_if = "Option::is_none")]
    pub check_run: Option<Box<crate::models::WebhookDeploymentStatusCreatedCheckRun>>,
    #[serde(rename = "deployment")]
    pub deployment: Box<crate::models::Deployment1>,
    #[serde(rename = "deployment_status")]
    pub deployment_status: Box<crate::models::WebhookDeploymentStatusCreatedDeploymentStatus>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<crate::models::SimpleInstallation>>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::RepositoryWebhooks>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::SimpleUserWebhooks>,
    #[serde(rename = "workflow", skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Box<crate::models::WebhooksWorkflow>>,
    #[serde(rename = "workflow_run", skip_serializing_if = "Option::is_none")]
    pub workflow_run: Option<Box<crate::models::DeploymentWorkflowRun4>>,
}

impl WebhookDeploymentStatusCreated {
    pub fn new(action: Action, deployment: crate::models::Deployment1, deployment_status: crate::models::WebhookDeploymentStatusCreatedDeploymentStatus, repository: crate::models::RepositoryWebhooks, sender: crate::models::SimpleUserWebhooks) -> WebhookDeploymentStatusCreated {
        WebhookDeploymentStatusCreated {
            action,
            check_run: None,
            deployment: Box::new(deployment),
            deployment_status: Box::new(deployment_status),
            enterprise: None,
            installation: None,
            organization: None,
            repository: Box::new(repository),
            sender: Box::new(sender),
            workflow: None,
            workflow_run: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "created")]
    Created,
}

impl Default for Action {
    fn default() -> Action {
        Self::Created
    }
}

