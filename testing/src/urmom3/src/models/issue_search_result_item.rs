/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IssueSearchResultItem : Issue Search Result Item



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IssueSearchResultItem {
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "repository_url")]
    pub repository_url: String,
    #[serde(rename = "labels_url")]
    pub labels_url: String,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "events_url")]
    pub events_url: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "locked")]
    pub locked: bool,
    #[serde(rename = "active_lock_reason", skip_serializing_if = "Option::is_none")]
    pub active_lock_reason: Option<String>,
    #[serde(rename = "assignees", skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<crate::models::SimpleUser>>,
    #[serde(rename = "user")]
    pub user: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "labels")]
    pub labels: Vec<crate::models::IssueSearchResultItemLabelsInner>,
    #[serde(rename = "state")]
    pub state: String,
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[serde(rename = "assignee")]
    pub assignee: Option<Box<crate::models::NullableSimpleUser>>,
    #[serde(rename = "milestone")]
    pub milestone: Option<Box<crate::models::NullableMilestone>>,
    #[serde(rename = "comments")]
    pub comments: i32,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "closed_at")]
    pub closed_at: Option<String>,
    #[serde(rename = "text_matches", skip_serializing_if = "Option::is_none")]
    pub text_matches: Option<Vec<crate::models::SearchResultTextMatchesInner>>,
    #[serde(rename = "pull_request", skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<Box<crate::models::IssuePullRequest>>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "score")]
    pub score: f32,
    #[serde(rename = "author_association")]
    pub author_association: crate::models::AuthorAssociation,
    #[serde(rename = "draft", skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<crate::models::Repository>>,
    #[serde(rename = "body_html", skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[serde(rename = "body_text", skip_serializing_if = "Option::is_none")]
    pub body_text: Option<String>,
    #[serde(rename = "timeline_url", skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[serde(rename = "performed_via_github_app", skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Box<crate::models::NullableIntegration>>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<crate::models::ReactionRollup>>,
}

impl IssueSearchResultItem {
    /// Issue Search Result Item
    pub fn new(url: String, repository_url: String, labels_url: String, comments_url: String, events_url: String, html_url: String, id: i64, node_id: String, number: i32, title: String, locked: bool, user: Option<crate::models::NullableSimpleUser>, labels: Vec<crate::models::IssueSearchResultItemLabelsInner>, state: String, assignee: Option<crate::models::NullableSimpleUser>, milestone: Option<crate::models::NullableMilestone>, comments: i32, created_at: String, updated_at: String, closed_at: Option<String>, score: f32, author_association: crate::models::AuthorAssociation) -> IssueSearchResultItem {
        IssueSearchResultItem {
            url,
            repository_url,
            labels_url,
            comments_url,
            events_url,
            html_url,
            id,
            node_id,
            number,
            title,
            locked,
            active_lock_reason: None,
            assignees: None,
            user: if let Some(x) = user {Some(Box::new(x))} else {None},
            labels,
            state,
            state_reason: None,
            assignee: if let Some(x) = assignee {Some(Box::new(x))} else {None},
            milestone: if let Some(x) = milestone {Some(Box::new(x))} else {None},
            comments,
            created_at,
            updated_at,
            closed_at,
            text_matches: None,
            pull_request: None,
            body: None,
            score,
            author_association,
            draft: None,
            repository: None,
            body_html: None,
            body_text: None,
            timeline_url: None,
            performed_via_github_app: None,
            reactions: None,
        }
    }
}


