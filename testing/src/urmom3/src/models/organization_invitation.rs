/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// OrganizationInvitation : Organization Invitation



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrganizationInvitation {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "login")]
    pub login: Option<String>,
    #[serde(rename = "email")]
    pub email: Option<String>,
    #[serde(rename = "role")]
    pub role: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "failed_at", skip_serializing_if = "Option::is_none")]
    pub failed_at: Option<String>,
    #[serde(rename = "failed_reason", skip_serializing_if = "Option::is_none")]
    pub failed_reason: Option<String>,
    #[serde(rename = "inviter")]
    pub inviter: Box<crate::models::SimpleUser>,
    #[serde(rename = "team_count")]
    pub team_count: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "invitation_teams_url")]
    pub invitation_teams_url: String,
    #[serde(rename = "invitation_source", skip_serializing_if = "Option::is_none")]
    pub invitation_source: Option<String>,
}

impl OrganizationInvitation {
    /// Organization Invitation
    pub fn new(id: i64, login: Option<String>, email: Option<String>, role: String, created_at: String, inviter: crate::models::SimpleUser, team_count: i32, node_id: String, invitation_teams_url: String) -> OrganizationInvitation {
        OrganizationInvitation {
            id,
            login,
            email,
            role,
            created_at,
            failed_at: None,
            failed_reason: None,
            inviter: Box::new(inviter),
            team_count,
            node_id,
            invitation_teams_url,
            invitation_source: None,
        }
    }
}


