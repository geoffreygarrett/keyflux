/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookWorkflowDispatch {
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::EnterpriseWebhooks>>,
    #[serde(rename = "inputs")]
    pub inputs: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<crate::models::SimpleInstallation>>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "ref")]
    pub r#ref: String,
    #[serde(rename = "repository")]
    pub repository: Box<crate::models::RepositoryWebhooks>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::SimpleUserWebhooks>,
    #[serde(rename = "workflow")]
    pub workflow: String,
}

impl WebhookWorkflowDispatch {
    pub fn new(inputs: Option<::std::collections::HashMap<String, serde_json::Value>>, r#ref: String, repository: crate::models::RepositoryWebhooks, sender: crate::models::SimpleUserWebhooks, workflow: String) -> WebhookWorkflowDispatch {
        WebhookWorkflowDispatch {
            enterprise: None,
            inputs,
            installation: None,
            organization: None,
            r#ref,
            repository: Box::new(repository),
            sender: Box::new(sender),
            workflow,
        }
    }
}


