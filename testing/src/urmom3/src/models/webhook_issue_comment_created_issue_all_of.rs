/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookIssueCommentCreatedIssueAllOf {
    #[serde(rename = "active_lock_reason", skip_serializing_if = "Option::is_none")]
    pub active_lock_reason: Option<String>,
    #[serde(rename = "assignee")]
    pub assignee: Option<Box<crate::models::User3>>,
    #[serde(rename = "assignees", skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<serde_json::Value>>,
    #[serde(rename = "author_association", skip_serializing_if = "Option::is_none")]
    pub author_association: Option<String>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "closed_at", skip_serializing_if = "Option::is_none")]
    pub closed_at: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<i32>,
    #[serde(rename = "comments_url", skip_serializing_if = "Option::is_none")]
    pub comments_url: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "events_url", skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "labels")]
    pub labels: Vec<crate::models::Label>,
    #[serde(rename = "labels_url", skip_serializing_if = "Option::is_none")]
    pub labels_url: Option<String>,
    #[serde(rename = "locked")]
    pub locked: bool,
    #[serde(rename = "milestone", skip_serializing_if = "Option::is_none")]
    pub milestone: Option<serde_json::Value>,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
    #[serde(rename = "performed_via_github_app", skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<serde_json::Value>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<crate::models::WebhookIssueCommentCreatedIssueAllOfReactions>>,
    #[serde(rename = "repository_url", skip_serializing_if = "Option::is_none")]
    pub repository_url: Option<String>,
    /// State of the issue; either 'open' or 'closed'
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "timeline_url", skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::WebhookIssueCommentCreatedIssueAllOfUser>>,
}

impl WebhookIssueCommentCreatedIssueAllOf {
    pub fn new(assignee: Option<crate::models::User3>, labels: Vec<crate::models::Label>, locked: bool, state: State) -> WebhookIssueCommentCreatedIssueAllOf {
        WebhookIssueCommentCreatedIssueAllOf {
            active_lock_reason: None,
            assignee: if let Some(x) = assignee {Some(Box::new(x))} else {None},
            assignees: None,
            author_association: None,
            body: None,
            closed_at: None,
            comments: None,
            comments_url: None,
            created_at: None,
            events_url: None,
            html_url: None,
            id: None,
            labels,
            labels_url: None,
            locked,
            milestone: None,
            node_id: None,
            number: None,
            performed_via_github_app: None,
            reactions: None,
            repository_url: None,
            state,
            timeline_url: None,
            title: None,
            updated_at: None,
            url: None,
            user: None,
        }
    }
}

/// State of the issue; either 'open' or 'closed'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}

