/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// OrganizationProgrammaticAccessGrantRequest : Minimal representation of an organization programmatic access grant request for enumerations



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrganizationProgrammaticAccessGrantRequest {
    /// Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
    #[serde(rename = "id")]
    pub id: i32,
    /// Reason for requesting access.
    #[serde(rename = "reason")]
    pub reason: Option<String>,
    #[serde(rename = "owner")]
    pub owner: Box<crate::models::SimpleUser>,
    /// Type of repository selection requested.
    #[serde(rename = "repository_selection")]
    pub repository_selection: RepositorySelection,
    /// URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
    #[serde(rename = "repositories_url")]
    pub repositories_url: String,
    #[serde(rename = "permissions")]
    pub permissions: Box<crate::models::OrganizationProgrammaticAccessGrantRequestPermissions>,
    /// Date and time when the request for access was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Whether the associated fine-grained personal access token has expired.
    #[serde(rename = "token_expired")]
    pub token_expired: bool,
    /// Date and time when the associated fine-grained personal access token expires.
    #[serde(rename = "token_expires_at")]
    pub token_expires_at: Option<String>,
    /// Date and time when the associated fine-grained personal access token was last used for authentication.
    #[serde(rename = "token_last_used_at")]
    pub token_last_used_at: Option<String>,
}

impl OrganizationProgrammaticAccessGrantRequest {
    /// Minimal representation of an organization programmatic access grant request for enumerations
    pub fn new(id: i32, reason: Option<String>, owner: crate::models::SimpleUser, repository_selection: RepositorySelection, repositories_url: String, permissions: crate::models::OrganizationProgrammaticAccessGrantRequestPermissions, created_at: String, token_expired: bool, token_expires_at: Option<String>, token_last_used_at: Option<String>) -> OrganizationProgrammaticAccessGrantRequest {
        OrganizationProgrammaticAccessGrantRequest {
            id,
            reason,
            owner: Box::new(owner),
            repository_selection,
            repositories_url,
            permissions: Box::new(permissions),
            created_at,
            token_expired,
            token_expires_at,
            token_last_used_at,
        }
    }
}

/// Type of repository selection requested.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RepositorySelection {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "subset")]
    Subset,
}

impl Default for RepositorySelection {
    fn default() -> RepositorySelection {
        Self::None
    }
}

