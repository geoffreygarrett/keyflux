/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookStatusCommit {
    #[serde(rename = "author")]
    pub author: Option<Box<crate::models::User9>>,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "commit")]
    pub commit: Box<crate::models::WebhookStatusCommitCommit>,
    #[serde(rename = "committer")]
    pub committer: Option<Box<crate::models::User9>>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "parents")]
    pub parents: Vec<crate::models::WebhookStatusCommitParentsInner>,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "url")]
    pub url: String,
}

impl WebhookStatusCommit {
    pub fn new(author: Option<crate::models::User9>, comments_url: String, commit: crate::models::WebhookStatusCommitCommit, committer: Option<crate::models::User9>, html_url: String, node_id: String, parents: Vec<crate::models::WebhookStatusCommitParentsInner>, sha: String, url: String) -> WebhookStatusCommit {
        WebhookStatusCommit {
            author: if let Some(x) = author {Some(Box::new(x))} else {None},
            comments_url,
            commit: Box::new(commit),
            committer: if let Some(x) = committer {Some(Box::new(x))} else {None},
            html_url,
            node_id,
            parents,
            sha,
            url,
        }
    }
}


