=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class CodeScanningApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a CodeQL variant analysis
    # Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.  Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).  Use the `owner` and `repo` parameters in the URL to specify the controller repository that will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_create_variant_analysis_request [CodeScanningCreateVariantAnalysisRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningVariantAnalysis]
    def code_scanning_create_variant_analysis(owner, repo, code_scanning_create_variant_analysis_request, opts = {})
      data, _status_code, _headers = code_scanning_create_variant_analysis_with_http_info(owner, repo, code_scanning_create_variant_analysis_request, opts)
      data
    end

    # Create a CodeQL variant analysis
    # Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.  Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).  Use the &#x60;owner&#x60; and &#x60;repo&#x60; parameters in the URL to specify the controller repository that will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_create_variant_analysis_request [CodeScanningCreateVariantAnalysisRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningVariantAnalysis, Integer, Hash)>] CodeScanningVariantAnalysis data, response status code and response headers
    def code_scanning_create_variant_analysis_with_http_info(owner, repo, code_scanning_create_variant_analysis_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_create_variant_analysis ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_create_variant_analysis"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_create_variant_analysis"
      end
      # verify the required parameter 'code_scanning_create_variant_analysis_request' is set
      if @api_client.config.client_side_validation && code_scanning_create_variant_analysis_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_scanning_create_variant_analysis_request' when calling CodeScanningApi.code_scanning_create_variant_analysis"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_scanning_create_variant_analysis_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningVariantAnalysis'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_create_variant_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_create_variant_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a code scanning analysis from a repository
    # Deletes a specified code scanning analysis from a repository.  You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor.  When you list the analyses for a repository, one or more will be identified as deletable in the response:  ``` \"deletable\": true ```  An analysis is deletable when it's the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values:  * `ref` * `tool` * `category`  If you attempt to delete an analysis that is not the most recent in a set, you'll get a 400 response with the message:  ``` Analysis specified is not deletable. ```  The response from a successful `DELETE` operation provides you with two alternative URLs for deleting the next analysis in the set: `next_analysis_url` and `confirm_delete_url`. Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis in a set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url` in the 200 response is `null`.  As an example of the deletion process, let's imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You've now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find an analysis that's identified as deletable. Each set of analyses always has one that's identified as deletable. Having found the deletable analysis for one of the two sets, delete this analysis and then continue deleting the next analysis in the set until they're all deleted. Then repeat the process for the second set. The procedure therefore consists of a nested loop:  **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found:    **Inner loop**:   * Delete the identified analysis.   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.  The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param analysis_id [Integer] The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :confirm_delete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60;
    # @return [CodeScanningAnalysisDeletion]
    def code_scanning_delete_analysis(owner, repo, analysis_id, opts = {})
      data, _status_code, _headers = code_scanning_delete_analysis_with_http_info(owner, repo, analysis_id, opts)
      data
    end

    # Delete a code scanning analysis from a repository
    # Deletes a specified code scanning analysis from a repository.  You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor.  When you list the analyses for a repository, one or more will be identified as deletable in the response:  &#x60;&#x60;&#x60; \&quot;deletable\&quot;: true &#x60;&#x60;&#x60;  An analysis is deletable when it&#39;s the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values:  * &#x60;ref&#x60; * &#x60;tool&#x60; * &#x60;category&#x60;  If you attempt to delete an analysis that is not the most recent in a set, you&#39;ll get a 400 response with the message:  &#x60;&#x60;&#x60; Analysis specified is not deletable. &#x60;&#x60;&#x60;  The response from a successful &#x60;DELETE&#x60; operation provides you with two alternative URLs for deleting the next analysis in the set: &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60;. Use the &#x60;next_analysis_url&#x60; URL if you want to avoid accidentally deleting the final analysis in a set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the &#x60;confirm_delete_url&#x60; URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set, the value of &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60; in the 200 response is &#x60;null&#x60;.  As an example of the deletion process, let&#39;s imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You&#39;ve now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find an analysis that&#39;s identified as deletable. Each set of analyses always has one that&#39;s identified as deletable. Having found the deletable analysis for one of the two sets, delete this analysis and then continue deleting the next analysis in the set until they&#39;re all deleted. Then repeat the process for the second set. The procedure therefore consists of a nested loop:  **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found:    **Inner loop**:   * Delete the identified analysis.   * Parse the response for the value of &#x60;confirm_delete_url&#x60; and, if found, use this in the next iteration.  The above process assumes that you want to remove all trace of the tool&#39;s analyses from the GitHub user interface, for the specified repository, and it therefore uses the &#x60;confirm_delete_url&#x60; value. Alternatively, you could use the &#x60;next_analysis_url&#x60; value, which would leave the last analysis in each set undeleted to avoid removing a tool&#39;s analysis entirely.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param analysis_id [Integer] The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :confirm_delete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60;
    # @return [Array<(CodeScanningAnalysisDeletion, Integer, Hash)>] CodeScanningAnalysisDeletion data, response status code and response headers
    def code_scanning_delete_analysis_with_http_info(owner, repo, analysis_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_delete_analysis ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_delete_analysis"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_delete_analysis"
      end
      # verify the required parameter 'analysis_id' is set
      if @api_client.config.client_side_validation && analysis_id.nil?
        fail ArgumentError, "Missing the required parameter 'analysis_id' when calling CodeScanningApi.code_scanning_delete_analysis"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'analysis_id' + '}', CGI.escape(analysis_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'confirm_delete'] = opts[:'confirm_delete'] if !opts[:'confirm_delete'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningAnalysisDeletion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_delete_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_delete_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a code scanning alert
    # Gets a single code scanning alert.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningAlert]
    def code_scanning_get_alert(owner, repo, alert_number, opts = {})
      data, _status_code, _headers = code_scanning_get_alert_with_http_info(owner, repo, alert_number, opts)
      data
    end

    # Get a code scanning alert
    # Gets a single code scanning alert.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningAlert, Integer, Hash)>] CodeScanningAlert data, response status code and response headers
    def code_scanning_get_alert_with_http_info(owner, repo, alert_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_alert ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_alert"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_alert"
      end
      # verify the required parameter 'alert_number' is set
      if @api_client.config.client_side_validation && alert_number.nil?
        fail ArgumentError, "Missing the required parameter 'alert_number' when calling CodeScanningApi.code_scanning_get_alert"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'alert_number' + '}', CGI.escape(alert_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningAlert'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a code scanning analysis for a repository
    # Gets a specified code scanning analysis for a repository.  The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts.  The `rules_count` field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and `0` is returned in this field.  This endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"  - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param analysis_id [Integer] The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningAnalysis]
    def code_scanning_get_analysis(owner, repo, analysis_id, opts = {})
      data, _status_code, _headers = code_scanning_get_analysis_with_http_info(owner, repo, analysis_id, opts)
      data
    end

    # Get a code scanning analysis for a repository
    # Gets a specified code scanning analysis for a repository.  The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts.  The &#x60;rules_count&#x60; field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/sarif+json&#x60;**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the &#x60;github/alertNumber&#x60; and &#x60;github/alertUrl&#x60; properties.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param analysis_id [Integer] The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningAnalysis, Integer, Hash)>] CodeScanningAnalysis data, response status code and response headers
    def code_scanning_get_analysis_with_http_info(owner, repo, analysis_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_analysis ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_analysis"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_analysis"
      end
      # verify the required parameter 'analysis_id' is set
      if @api_client.config.client_side_validation && analysis_id.nil?
        fail ArgumentError, "Missing the required parameter 'analysis_id' when calling CodeScanningApi.code_scanning_get_analysis"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'analysis_id' + '}', CGI.escape(analysis_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json+sarif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningAnalysis'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a CodeQL database for a repository
    # Gets a CodeQL database for a language in a repository.  By default this endpoint returns JSON metadata about the CodeQL database. To download the CodeQL database binary content, set the `Accept` header of the request to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure your HTTP client is configured to follow redirects or use the `Location` header to make a second request to get the redirect URL.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param language [String] The language of the CodeQL database.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningCodeqlDatabase]
    def code_scanning_get_codeql_database(owner, repo, language, opts = {})
      data, _status_code, _headers = code_scanning_get_codeql_database_with_http_info(owner, repo, language, opts)
      data
    end

    # Get a CodeQL database for a repository
    # Gets a CodeQL database for a language in a repository.  By default this endpoint returns JSON metadata about the CodeQL database. To download the CodeQL database binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/zip&#x60;](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure your HTTP client is configured to follow redirects or use the &#x60;Location&#x60; header to make a second request to get the redirect URL.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param language [String] The language of the CodeQL database.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningCodeqlDatabase, Integer, Hash)>] CodeScanningCodeqlDatabase data, response status code and response headers
    def code_scanning_get_codeql_database_with_http_info(owner, repo, language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_codeql_database ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_codeql_database"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_codeql_database"
      end
      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling CodeScanningApi.code_scanning_get_codeql_database"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'language' + '}', CGI.escape(language.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningCodeqlDatabase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_codeql_database",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_codeql_database\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a code scanning default setup configuration
    # Gets a code scanning default setup configuration.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningDefaultSetup]
    def code_scanning_get_default_setup(owner, repo, opts = {})
      data, _status_code, _headers = code_scanning_get_default_setup_with_http_info(owner, repo, opts)
      data
    end

    # Get a code scanning default setup configuration
    # Gets a code scanning default setup configuration.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningDefaultSetup, Integer, Hash)>] CodeScanningDefaultSetup data, response status code and response headers
    def code_scanning_get_default_setup_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_default_setup ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_default_setup"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_default_setup"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/default-setup'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningDefaultSetup'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_default_setup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_default_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about a SARIF upload
    # Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \"[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository).\" OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param sarif_id [String] The SARIF ID obtained after uploading.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningSarifsStatus]
    def code_scanning_get_sarif(owner, repo, sarif_id, opts = {})
      data, _status_code, _headers = code_scanning_get_sarif_with_http_info(owner, repo, sarif_id, opts)
      data
    end

    # Get information about a SARIF upload
    # Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \&quot;[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository).\&quot; OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param sarif_id [String] The SARIF ID obtained after uploading.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningSarifsStatus, Integer, Hash)>] CodeScanningSarifsStatus data, response status code and response headers
    def code_scanning_get_sarif_with_http_info(owner, repo, sarif_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_sarif ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_sarif"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_sarif"
      end
      # verify the required parameter 'sarif_id' is set
      if @api_client.config.client_side_validation && sarif_id.nil?
        fail ArgumentError, "Missing the required parameter 'sarif_id' when calling CodeScanningApi.code_scanning_get_sarif"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'sarif_id' + '}', CGI.escape(sarif_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningSarifsStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_sarif",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_sarif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the summary of a CodeQL variant analysis
    # Gets the summary of a CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param codeql_variant_analysis_id [Integer] The unique identifier of the variant analysis.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningVariantAnalysis]
    def code_scanning_get_variant_analysis(owner, repo, codeql_variant_analysis_id, opts = {})
      data, _status_code, _headers = code_scanning_get_variant_analysis_with_http_info(owner, repo, codeql_variant_analysis_id, opts)
      data
    end

    # Get the summary of a CodeQL variant analysis
    # Gets the summary of a CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param codeql_variant_analysis_id [Integer] The unique identifier of the variant analysis.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningVariantAnalysis, Integer, Hash)>] CodeScanningVariantAnalysis data, response status code and response headers
    def code_scanning_get_variant_analysis_with_http_info(owner, repo, codeql_variant_analysis_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_variant_analysis ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_variant_analysis"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_variant_analysis"
      end
      # verify the required parameter 'codeql_variant_analysis_id' is set
      if @api_client.config.client_side_validation && codeql_variant_analysis_id.nil?
        fail ArgumentError, "Missing the required parameter 'codeql_variant_analysis_id' when calling CodeScanningApi.code_scanning_get_variant_analysis"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'codeql_variant_analysis_id' + '}', CGI.escape(codeql_variant_analysis_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningVariantAnalysis'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_variant_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_variant_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the analysis status of a repository in a CodeQL variant analysis
    # Gets the analysis status of a repository in a CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the controller repository.
    # @param codeql_variant_analysis_id [Integer] The ID of the variant analysis.
    # @param repo_owner [String] The account owner of the variant analysis repository. The name is not case sensitive.
    # @param repo_name [String] The name of the variant analysis repository.
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningVariantAnalysisRepoTask]
    def code_scanning_get_variant_analysis_repo_task(owner, repo, codeql_variant_analysis_id, repo_owner, repo_name, opts = {})
      data, _status_code, _headers = code_scanning_get_variant_analysis_repo_task_with_http_info(owner, repo, codeql_variant_analysis_id, repo_owner, repo_name, opts)
      data
    end

    # Get the analysis status of a repository in a CodeQL variant analysis
    # Gets the analysis status of a repository in a CodeQL variant analysis.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the controller repository.
    # @param codeql_variant_analysis_id [Integer] The ID of the variant analysis.
    # @param repo_owner [String] The account owner of the variant analysis repository. The name is not case sensitive.
    # @param repo_name [String] The name of the variant analysis repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningVariantAnalysisRepoTask, Integer, Hash)>] CodeScanningVariantAnalysisRepoTask data, response status code and response headers
    def code_scanning_get_variant_analysis_repo_task_with_http_info(owner, repo, codeql_variant_analysis_id, repo_owner, repo_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_get_variant_analysis_repo_task ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_get_variant_analysis_repo_task"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_get_variant_analysis_repo_task"
      end
      # verify the required parameter 'codeql_variant_analysis_id' is set
      if @api_client.config.client_side_validation && codeql_variant_analysis_id.nil?
        fail ArgumentError, "Missing the required parameter 'codeql_variant_analysis_id' when calling CodeScanningApi.code_scanning_get_variant_analysis_repo_task"
      end
      # verify the required parameter 'repo_owner' is set
      if @api_client.config.client_side_validation && repo_owner.nil?
        fail ArgumentError, "Missing the required parameter 'repo_owner' when calling CodeScanningApi.code_scanning_get_variant_analysis_repo_task"
      end
      # verify the required parameter 'repo_name' is set
      if @api_client.config.client_side_validation && repo_name.nil?
        fail ArgumentError, "Missing the required parameter 'repo_name' when calling CodeScanningApi.code_scanning_get_variant_analysis_repo_task"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'codeql_variant_analysis_id' + '}', CGI.escape(codeql_variant_analysis_id.to_s)).sub('{' + 'repo_owner' + '}', CGI.escape(repo_owner.to_s)).sub('{' + 'repo_name' + '}', CGI.escape(repo_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningVariantAnalysisRepoTask'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_get_variant_analysis_repo_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_get_variant_analysis_repo_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List instances of a code scanning alert
    # Lists all instances of the specified code scanning alert.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [Array<CodeScanningAlertInstance>]
    def code_scanning_list_alert_instances(owner, repo, alert_number, opts = {})
      data, _status_code, _headers = code_scanning_list_alert_instances_with_http_info(owner, repo, alert_number, opts)
      data
    end

    # List instances of a code scanning alert
    # Lists all instances of the specified code scanning alert.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [Array<(Array<CodeScanningAlertInstance>, Integer, Hash)>] Array<CodeScanningAlertInstance> data, response status code and response headers
    def code_scanning_list_alert_instances_with_http_info(owner, repo, alert_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_list_alert_instances ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_list_alert_instances"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_list_alert_instances"
      end
      # verify the required parameter 'alert_number' is set
      if @api_client.config.client_side_validation && alert_number.nil?
        fail ArgumentError, "Missing the required parameter 'alert_number' when calling CodeScanningApi.code_scanning_list_alert_instances"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'alert_number' + '}', CGI.escape(alert_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeScanningAlertInstance>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_list_alert_instances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_list_alert_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List code scanning alerts for an organization
    # Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [CodeScanningAlertStateQuery] :state If specified, only code scanning alerts with this state will be returned.
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @option opts [CodeScanningAlertSeverity] :severity If specified, only code scanning alerts with this severity will be returned.
    # @return [Array<CodeScanningOrganizationAlertItems>]
    def code_scanning_list_alerts_for_org(org, opts = {})
      data, _status_code, _headers = code_scanning_list_alerts_for_org_with_http_info(org, opts)
      data
    end

    # List code scanning alerts for an organization
    # Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; or &#x60;repo&#x60;s cope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [CodeScanningAlertStateQuery] :state If specified, only code scanning alerts with this state will be returned.
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @option opts [CodeScanningAlertSeverity] :severity If specified, only code scanning alerts with this severity will be returned.
    # @return [Array<(Array<CodeScanningOrganizationAlertItems>, Integer, Hash)>] Array<CodeScanningOrganizationAlertItems> data, response status code and response headers
    def code_scanning_list_alerts_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_list_alerts_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeScanningApi.code_scanning_list_alerts_for_org"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-scanning/alerts'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tool_name'] = opts[:'tool_name'] if !opts[:'tool_name'].nil?
      query_params[:'tool_guid'] = opts[:'tool_guid'] if !opts[:'tool_guid'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeScanningOrganizationAlertItems>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_list_alerts_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_list_alerts_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List code scanning alerts for a repository
    # Lists code scanning alerts.  The response includes a `most_recent_instance` object. This provides details of the most recent instance of this alert for the default branch (or for the specified Git reference if you used `ref` in the request).  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @option opts [CodeScanningAlertStateQuery] :state If specified, only code scanning alerts with this state will be returned.
    # @option opts [CodeScanningAlertSeverity] :severity If specified, only code scanning alerts with this severity will be returned.
    # @return [Array<CodeScanningAlertItems>]
    def code_scanning_list_alerts_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = code_scanning_list_alerts_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List code scanning alerts for a repository
    # Lists code scanning alerts.  The response includes a &#x60;most_recent_instance&#x60; object. This provides details of the most recent instance of this alert for the default branch (or for the specified Git reference if you used &#x60;ref&#x60; in the request).  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @option opts [CodeScanningAlertStateQuery] :state If specified, only code scanning alerts with this state will be returned.
    # @option opts [CodeScanningAlertSeverity] :severity If specified, only code scanning alerts with this severity will be returned.
    # @return [Array<(Array<CodeScanningAlertItems>, Integer, Hash)>] Array<CodeScanningAlertItems> data, response status code and response headers
    def code_scanning_list_alerts_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_list_alerts_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_list_alerts_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_list_alerts_for_repo"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/alerts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tool_name'] = opts[:'tool_name'] if !opts[:'tool_name'].nil?
      query_params[:'tool_guid'] = opts[:'tool_guid'] if !opts[:'tool_guid'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeScanningAlertItems>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_list_alerts_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_list_alerts_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CodeQL databases for a repository
    # Lists the CodeQL databases that are available in a repository.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<CodeScanningCodeqlDatabase>]
    def code_scanning_list_codeql_databases(owner, repo, opts = {})
      data, _status_code, _headers = code_scanning_list_codeql_databases_with_http_info(owner, repo, opts)
      data
    end

    # List CodeQL databases for a repository
    # Lists the CodeQL databases that are available in a repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CodeScanningCodeqlDatabase>, Integer, Hash)>] Array<CodeScanningCodeqlDatabase> data, response status code and response headers
    def code_scanning_list_codeql_databases_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_list_codeql_databases ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_list_codeql_databases"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_list_codeql_databases"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/codeql/databases'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeScanningCodeqlDatabase>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_list_codeql_databases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_list_codeql_databases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List code scanning analyses for a repository
    # Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the `page` and `per_page` parameters to list the analyses you're interested in. By default 30 analyses are listed per page.  The `rules_count` field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and `0` is returned in this field.  **Deprecation notice**: The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :sarif_id Filter analyses belonging to the same SARIF upload.
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @return [Array<CodeScanningAnalysis>]
    def code_scanning_list_recent_analyses(owner, repo, opts = {})
      data, _status_code, _headers = code_scanning_list_recent_analyses_with_http_info(owner, repo, opts)
      data
    end

    # List code scanning analyses for a repository
    # Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to list the analyses you&#39;re interested in. By default 30 analyses are listed per page.  The &#x60;rules_count&#x60; field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tool_name The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both.
    # @option opts [String] :tool_guid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both.
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :sarif_id Filter analyses belonging to the same SARIF upload.
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property by which to sort the results. (default to 'created')
    # @return [Array<(Array<CodeScanningAnalysis>, Integer, Hash)>] Array<CodeScanningAnalysis> data, response status code and response headers
    def code_scanning_list_recent_analyses_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_list_recent_analyses ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_list_recent_analyses"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_list_recent_analyses"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["created"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/analyses'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tool_name'] = opts[:'tool_name'] if !opts[:'tool_name'].nil?
      query_params[:'tool_guid'] = opts[:'tool_guid'] if !opts[:'tool_guid'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?
      query_params[:'sarif_id'] = opts[:'sarif_id'] if !opts[:'sarif_id'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeScanningAnalysis>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_list_recent_analyses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_list_recent_analyses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a code scanning alert
    # Updates the status of a single code scanning alert. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param code_scanning_update_alert_request [CodeScanningUpdateAlertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningAlert]
    def code_scanning_update_alert(owner, repo, alert_number, code_scanning_update_alert_request, opts = {})
      data, _status_code, _headers = code_scanning_update_alert_with_http_info(owner, repo, alert_number, code_scanning_update_alert_request, opts)
      data
    end

    # Update a code scanning alert
    # Updates the status of a single code scanning alert. OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation.
    # @param code_scanning_update_alert_request [CodeScanningUpdateAlertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningAlert, Integer, Hash)>] CodeScanningAlert data, response status code and response headers
    def code_scanning_update_alert_with_http_info(owner, repo, alert_number, code_scanning_update_alert_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_update_alert ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_update_alert"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_update_alert"
      end
      # verify the required parameter 'alert_number' is set
      if @api_client.config.client_side_validation && alert_number.nil?
        fail ArgumentError, "Missing the required parameter 'alert_number' when calling CodeScanningApi.code_scanning_update_alert"
      end
      # verify the required parameter 'code_scanning_update_alert_request' is set
      if @api_client.config.client_side_validation && code_scanning_update_alert_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_scanning_update_alert_request' when calling CodeScanningApi.code_scanning_update_alert"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'alert_number' + '}', CGI.escape(alert_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_scanning_update_alert_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningAlert'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_update_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_update_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a code scanning default setup configuration
    # Updates a code scanning default setup configuration.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_default_setup_update [CodeScanningDefaultSetupUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def code_scanning_update_default_setup(owner, repo, code_scanning_default_setup_update, opts = {})
      data, _status_code, _headers = code_scanning_update_default_setup_with_http_info(owner, repo, code_scanning_default_setup_update, opts)
      data
    end

    # Update a code scanning default setup configuration
    # Updates a code scanning default setup configuration.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_default_setup_update [CodeScanningDefaultSetupUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def code_scanning_update_default_setup_with_http_info(owner, repo, code_scanning_default_setup_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_update_default_setup ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_update_default_setup"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_update_default_setup"
      end
      # verify the required parameter 'code_scanning_default_setup_update' is set
      if @api_client.config.client_side_validation && code_scanning_default_setup_update.nil?
        fail ArgumentError, "Missing the required parameter 'code_scanning_default_setup_update' when calling CodeScanningApi.code_scanning_update_default_setup"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/default-setup'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_scanning_default_setup_update)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_update_default_setup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_update_default_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an analysis as SARIF data
    # Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see \"[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif).\"  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\"  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"  You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:  ``` gzip -c analysis-data.sarif | base64 -w0 ```  SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable. To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see \"[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).\"   | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            | |----------------------------------|:------------------:|----------------------------------------------------------------------------------| | Runs per file                    |         20         |                                                                                  | | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            | | Rules per run                    |       25,000       |                                                                                  | | Tool extensions per run          |        100         |                                                                                  | | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. | | Location per result              |       1,000        | Only 100 locations will be included.                                             | | Tags per rule                    |         20         | Only 10 tags will be included.                                                   |   The `202 Accepted` response includes an `id` value. You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint. For more information, see \"[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).\"  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.  This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_upload_sarif_request [CodeScanningUploadSarifRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeScanningSarifsReceipt]
    def code_scanning_upload_sarif(owner, repo, code_scanning_upload_sarif_request, opts = {})
      data, _status_code, _headers = code_scanning_upload_sarif_with_http_info(owner, repo, code_scanning_upload_sarif_request, opts)
      data
    end

    # Upload an analysis as SARIF data
    # Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see \&quot;[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif).\&quot;  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example &#x60;--ref refs/pull/42/merge&#x60; or &#x60;--ref refs/pull/42/head&#x60;, then the results appear as alerts in a pull request check. For more information, see \&quot;[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\&quot;  - If you upload to a branch, for example &#x60;--ref refs/heads/my-branch&#x60;, then the results appear in the **Security** tab for your repository. For more information, see \&quot;[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\&quot;  You must compress the SARIF-formatted analysis data that you want to upload, using &#x60;gzip&#x60;, and then encode it as a Base64 format string. For example:  &#x60;&#x60;&#x60; gzip -c analysis-data.sarif | base64 -w0 &#x60;&#x60;&#x60;  SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable. To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see \&quot;[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).\&quot;   | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            | |----------------------------------|:------------------:|----------------------------------------------------------------------------------| | Runs per file                    |         20         |                                                                                  | | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            | | Rules per run                    |       25,000       |                                                                                  | | Tool extensions per run          |        100         |                                                                                  | | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. | | Location per result              |       1,000        | Only 100 locations will be included.                                             | | Tags per rule                    |         20         | Only 10 tags will be included.                                                   |   The &#x60;202 Accepted&#x60; response includes an &#x60;id&#x60; value. You can use this ID to check the status of the upload by using it in the &#x60;/sarifs/{sarif_id}&#x60; endpoint. For more information, see \&quot;[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.  This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param code_scanning_upload_sarif_request [CodeScanningUploadSarifRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeScanningSarifsReceipt, Integer, Hash)>] CodeScanningSarifsReceipt data, response status code and response headers
    def code_scanning_upload_sarif_with_http_info(owner, repo, code_scanning_upload_sarif_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeScanningApi.code_scanning_upload_sarif ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling CodeScanningApi.code_scanning_upload_sarif"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling CodeScanningApi.code_scanning_upload_sarif"
      end
      # verify the required parameter 'code_scanning_upload_sarif_request' is set
      if @api_client.config.client_side_validation && code_scanning_upload_sarif_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_scanning_upload_sarif_request' when calling CodeScanningApi.code_scanning_upload_sarif"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/code-scanning/sarifs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_scanning_upload_sarif_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeScanningSarifsReceipt'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeScanningApi.code_scanning_upload_sarif",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeScanningApi#code_scanning_upload_sarif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
