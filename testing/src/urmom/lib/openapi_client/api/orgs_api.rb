=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class OrgsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a security manager team
    # Adds a team as a security manager for an organization. For more information, see \"[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_add_security_manager_team(org, team_slug, opts = {})
      orgs_add_security_manager_team_with_http_info(org, team_slug, opts)
      nil
    end

    # Add a security manager team
    # Adds a team as a security manager for an organization. For more information, see \&quot;[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_add_security_manager_team_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_add_security_manager_team ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_add_security_manager_team"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling OrgsApi.orgs_add_security_manager_team"
      end
      # resource path
      local_var_path = '/orgs/{org}/security-managers/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_add_security_manager_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_add_security_manager_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign an organization role to a team
    # Assigns an organization role to a team in an organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_assign_team_to_org_role(org, team_slug, role_id, opts = {})
      orgs_assign_team_to_org_role_with_http_info(org, team_slug, role_id, opts)
      nil
    end

    # Assign an organization role to a team
    # Assigns an organization role to a team in an organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_assign_team_to_org_role_with_http_info(org, team_slug, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_assign_team_to_org_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_assign_team_to_org_role"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling OrgsApi.orgs_assign_team_to_org_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_assign_team_to_org_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_assign_team_to_org_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_assign_team_to_org_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign an organization role to a user
    # Assigns an organization role to a member of an organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_assign_user_to_org_role(org, username, role_id, opts = {})
      orgs_assign_user_to_org_role_with_http_info(org, username, role_id, opts)
      nil
    end

    # Assign an organization role to a user
    # Assigns an organization role to a member of an organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_assign_user_to_org_role_with_http_info(org, username, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_assign_user_to_org_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_assign_user_to_org_role"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_assign_user_to_org_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_assign_user_to_org_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/users/{username}/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_assign_user_to_org_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_assign_user_to_org_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Block a user from an organization
    # Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_block_user(org, username, opts = {})
      orgs_block_user_with_http_info(org, username, opts)
      nil
    end

    # Block a user from an organization
    # Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_block_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_block_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_block_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_block_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/blocks/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_block_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_block_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel an organization invitation
    # Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param invitation_id [Integer] The unique identifier of the invitation.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_cancel_invitation(org, invitation_id, opts = {})
      orgs_cancel_invitation_with_http_info(org, invitation_id, opts)
      nil
    end

    # Cancel an organization invitation
    # Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param invitation_id [Integer] The unique identifier of the invitation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_cancel_invitation_with_http_info(org, invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_cancel_invitation ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_cancel_invitation"
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling OrgsApi.orgs_cancel_invitation"
      end
      # resource path
      local_var_path = '/orgs/{org}/invitations/{invitation_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'invitation_id' + '}', CGI.escape(invitation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_cancel_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_cancel_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if a user is blocked by an organization
    # Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_check_blocked_user(org, username, opts = {})
      orgs_check_blocked_user_with_http_info(org, username, opts)
      nil
    end

    # Check if a user is blocked by an organization
    # Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_check_blocked_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_check_blocked_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_check_blocked_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_check_blocked_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/blocks/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_check_blocked_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_check_blocked_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check organization membership for a user
    # Check if a user is, publicly or privately, a member of the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_check_membership_for_user(org, username, opts = {})
      orgs_check_membership_for_user_with_http_info(org, username, opts)
      nil
    end

    # Check organization membership for a user
    # Check if a user is, publicly or privately, a member of the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_check_membership_for_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_check_membership_for_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_check_membership_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_check_membership_for_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/members/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_check_membership_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_check_membership_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check public organization membership for a user
    # Check if the provided user is a public member of the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_check_public_membership_for_user(org, username, opts = {})
      orgs_check_public_membership_for_user_with_http_info(org, username, opts)
      nil
    end

    # Check public organization membership for a user
    # Check if the provided user is a public member of the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_check_public_membership_for_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_check_public_membership_for_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_check_public_membership_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_check_public_membership_for_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/public_members/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_check_public_membership_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_check_public_membership_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert an organization member to outside collaborator
    # When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsConvertMemberToOutsideCollaboratorRequest] :orgs_convert_member_to_outside_collaborator_request 
    # @return [Object]
    def orgs_convert_member_to_outside_collaborator(org, username, opts = {})
      data, _status_code, _headers = orgs_convert_member_to_outside_collaborator_with_http_info(org, username, opts)
      data
    end

    # Convert an organization member to outside collaborator
    # When an organization member is converted to an outside collaborator, they&#39;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \&quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\&quot;. Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \&quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\&quot;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsConvertMemberToOutsideCollaboratorRequest] :orgs_convert_member_to_outside_collaborator_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def orgs_convert_member_to_outside_collaborator_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_convert_member_to_outside_collaborator ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_convert_member_to_outside_collaborator"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_convert_member_to_outside_collaborator"
      end
      # resource path
      local_var_path = '/orgs/{org}/outside_collaborators/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_convert_member_to_outside_collaborator_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_convert_member_to_outside_collaborator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_convert_member_to_outside_collaborator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a custom organization role
    # Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_custom_organization_role_request [OrgsCreateCustomOrganizationRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRole]
    def orgs_create_custom_organization_role(org, orgs_create_custom_organization_role_request, opts = {})
      data, _status_code, _headers = orgs_create_custom_organization_role_with_http_info(org, orgs_create_custom_organization_role_request, opts)
      data
    end

    # Create a custom organization role
    # Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_custom_organization_role_request [OrgsCreateCustomOrganizationRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRole, Integer, Hash)>] OrganizationRole data, response status code and response headers
    def orgs_create_custom_organization_role_with_http_info(org, orgs_create_custom_organization_role_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_custom_organization_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_custom_organization_role"
      end
      # verify the required parameter 'orgs_create_custom_organization_role_request' is set
      if @api_client.config.client_side_validation && orgs_create_custom_organization_role_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_create_custom_organization_role_request' when calling OrgsApi.orgs_create_custom_organization_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_create_custom_organization_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRole'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_custom_organization_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_custom_organization_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization invitation
    # Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsCreateInvitationRequest] :orgs_create_invitation_request 
    # @return [OrganizationInvitation]
    def orgs_create_invitation(org, opts = {})
      data, _status_code, _headers = orgs_create_invitation_with_http_info(org, opts)
      data
    end

    # Create an organization invitation
    # Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsCreateInvitationRequest] :orgs_create_invitation_request 
    # @return [Array<(OrganizationInvitation, Integer, Hash)>] OrganizationInvitation data, response status code and response headers
    def orgs_create_invitation_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_invitation ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_invitation"
      end
      # resource path
      local_var_path = '/orgs/{org}/invitations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_create_invitation_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationInvitation'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update custom properties for an organization
    # Creates new or updates existing custom properties defined for an organization in a batch.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_or_update_custom_properties_request [OrgsCreateOrUpdateCustomPropertiesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrgCustomProperty>]
    def orgs_create_or_update_custom_properties(org, orgs_create_or_update_custom_properties_request, opts = {})
      data, _status_code, _headers = orgs_create_or_update_custom_properties_with_http_info(org, orgs_create_or_update_custom_properties_request, opts)
      data
    end

    # Create or update custom properties for an organization
    # Creates new or updates existing custom properties defined for an organization in a batch.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_or_update_custom_properties_request [OrgsCreateOrUpdateCustomPropertiesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrgCustomProperty>, Integer, Hash)>] Array<OrgCustomProperty> data, response status code and response headers
    def orgs_create_or_update_custom_properties_with_http_info(org, orgs_create_or_update_custom_properties_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_or_update_custom_properties ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_or_update_custom_properties"
      end
      # verify the required parameter 'orgs_create_or_update_custom_properties_request' is set
      if @api_client.config.client_side_validation && orgs_create_or_update_custom_properties_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_create_or_update_custom_properties_request' when calling OrgsApi.orgs_create_or_update_custom_properties"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/schema'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_create_or_update_custom_properties_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgCustomProperty>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_or_update_custom_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_or_update_custom_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update custom property values for organization repositories
    # Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request.  A maximum of 30 repositories can be updated in a single request.  Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_or_update_custom_properties_values_for_repos_request [OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_create_or_update_custom_properties_values_for_repos(org, orgs_create_or_update_custom_properties_values_for_repos_request, opts = {})
      orgs_create_or_update_custom_properties_values_for_repos_with_http_info(org, orgs_create_or_update_custom_properties_values_for_repos_request, opts)
      nil
    end

    # Create or update custom property values for organization repositories
    # Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request.  A maximum of 30 repositories can be updated in a single request.  Using a value of &#x60;null&#x60; for a custom property will remove or &#39;unset&#39; the property value from the repository.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_values_editor&#x60; in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_or_update_custom_properties_values_for_repos_request [OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_create_or_update_custom_properties_values_for_repos_with_http_info(org, orgs_create_or_update_custom_properties_values_for_repos_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_or_update_custom_properties_values_for_repos ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_or_update_custom_properties_values_for_repos"
      end
      # verify the required parameter 'orgs_create_or_update_custom_properties_values_for_repos_request' is set
      if @api_client.config.client_side_validation && orgs_create_or_update_custom_properties_values_for_repos_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_create_or_update_custom_properties_values_for_repos_request' when calling OrgsApi.orgs_create_or_update_custom_properties_values_for_repos"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/values'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_create_or_update_custom_properties_values_for_repos_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_or_update_custom_properties_values_for_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_or_update_custom_properties_values_for_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a custom property for an organization
    # Creates a new or updates an existing custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param orgs_create_or_update_custom_property_request [OrgsCreateOrUpdateCustomPropertyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrgCustomProperty]
    def orgs_create_or_update_custom_property(org, custom_property_name, orgs_create_or_update_custom_property_request, opts = {})
      data, _status_code, _headers = orgs_create_or_update_custom_property_with_http_info(org, custom_property_name, orgs_create_or_update_custom_property_request, opts)
      data
    end

    # Create or update a custom property for an organization
    # Creates a new or updates an existing custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param orgs_create_or_update_custom_property_request [OrgsCreateOrUpdateCustomPropertyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgCustomProperty, Integer, Hash)>] OrgCustomProperty data, response status code and response headers
    def orgs_create_or_update_custom_property_with_http_info(org, custom_property_name, orgs_create_or_update_custom_property_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_or_update_custom_property ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_or_update_custom_property"
      end
      # verify the required parameter 'custom_property_name' is set
      if @api_client.config.client_side_validation && custom_property_name.nil?
        fail ArgumentError, "Missing the required parameter 'custom_property_name' when calling OrgsApi.orgs_create_or_update_custom_property"
      end
      # verify the required parameter 'orgs_create_or_update_custom_property_request' is set
      if @api_client.config.client_side_validation && orgs_create_or_update_custom_property_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_create_or_update_custom_property_request' when calling OrgsApi.orgs_create_or_update_custom_property"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/schema/{custom_property_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'custom_property_name' + '}', CGI.escape(custom_property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_create_or_update_custom_property_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgCustomProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_or_update_custom_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_or_update_custom_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization webhook
    # Create a hook that posts payloads in JSON format.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_webhook_request [OrgsCreateWebhookRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrgHook]
    def orgs_create_webhook(org, orgs_create_webhook_request, opts = {})
      data, _status_code, _headers = orgs_create_webhook_with_http_info(org, orgs_create_webhook_request, opts)
      data
    end

    # Create an organization webhook
    # Create a hook that posts payloads in JSON format.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_create_webhook_request [OrgsCreateWebhookRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgHook, Integer, Hash)>] OrgHook data, response status code and response headers
    def orgs_create_webhook_with_http_info(org, orgs_create_webhook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_create_webhook ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_create_webhook"
      end
      # verify the required parameter 'orgs_create_webhook_request' is set
      if @api_client.config.client_side_validation && orgs_create_webhook_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_create_webhook_request' when calling OrgsApi.orgs_create_webhook"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_create_webhook_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgHook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_create_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_create_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization
    # Deletes an organization and all its repositories.  The organization login will be unavailable for 90 days after deletion.  Please review the Terms of Service regarding account deletion before using this endpoint:  https://docs.github.com/site-policy/github-terms/github-terms-of-service
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def orgs_delete(org, opts = {})
      data, _status_code, _headers = orgs_delete_with_http_info(org, opts)
      data
    end

    # Delete an organization
    # Deletes an organization and all its repositories.  The organization login will be unavailable for 90 days after deletion.  Please review the Terms of Service regarding account deletion before using this endpoint:  https://docs.github.com/site-policy/github-terms/github-terms-of-service
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def orgs_delete_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_delete ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_delete"
      end
      # resource path
      local_var_path = '/orgs/{org}'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a custom organization role.
    # Deletes a custom organization role. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_delete_custom_organization_role(org, role_id, opts = {})
      orgs_delete_custom_organization_role_with_http_info(org, role_id, opts)
      nil
    end

    # Delete a custom organization role.
    # Deletes a custom organization role. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_delete_custom_organization_role_with_http_info(org, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_delete_custom_organization_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_delete_custom_organization_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_delete_custom_organization_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_delete_custom_organization_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_delete_custom_organization_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization webhook
    # You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_delete_webhook(org, hook_id, opts = {})
      orgs_delete_webhook_with_http_info(org, hook_id, opts)
      nil
    end

    # Delete an organization webhook
    # You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_delete_webhook_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_delete_webhook ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_delete_webhook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_delete_webhook"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_delete_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable a security feature for an organization
    # Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param security_product [String] The security feature to enable or disable.
    # @param enablement [String] The action to take.  &#x60;enable_all&#x60; means to enable the specified security feature for all repositories in the organization. &#x60;disable_all&#x60; means to disable the specified security feature for all repositories in the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest] :orgs_enable_or_disable_security_product_on_all_org_repos_request 
    # @return [nil]
    def orgs_enable_or_disable_security_product_on_all_org_repos(org, security_product, enablement, opts = {})
      orgs_enable_or_disable_security_product_on_all_org_repos_with_http_info(org, security_product, enablement, opts)
      nil
    end

    # Enable or disable a security feature for an organization
    # Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param security_product [String] The security feature to enable or disable.
    # @param enablement [String] The action to take.  &#x60;enable_all&#x60; means to enable the specified security feature for all repositories in the organization. &#x60;disable_all&#x60; means to disable the specified security feature for all repositories in the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest] :orgs_enable_or_disable_security_product_on_all_org_repos_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_enable_or_disable_security_product_on_all_org_repos_with_http_info(org, security_product, enablement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_enable_or_disable_security_product_on_all_org_repos ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_enable_or_disable_security_product_on_all_org_repos"
      end
      # verify the required parameter 'security_product' is set
      if @api_client.config.client_side_validation && security_product.nil?
        fail ArgumentError, "Missing the required parameter 'security_product' when calling OrgsApi.orgs_enable_or_disable_security_product_on_all_org_repos"
      end
      # verify enum value
      allowable_values = ["dependency_graph", "dependabot_alerts", "dependabot_security_updates", "advanced_security", "code_scanning_default_setup", "secret_scanning", "secret_scanning_push_protection"]
      if @api_client.config.client_side_validation && !allowable_values.include?(security_product)
        fail ArgumentError, "invalid value for \"security_product\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'enablement' is set
      if @api_client.config.client_side_validation && enablement.nil?
        fail ArgumentError, "Missing the required parameter 'enablement' when calling OrgsApi.orgs_enable_or_disable_security_product_on_all_org_repos"
      end
      # verify enum value
      allowable_values = ["enable_all", "disable_all"]
      if @api_client.config.client_side_validation && !allowable_values.include?(enablement)
        fail ArgumentError, "invalid value for \"enablement\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/{security_product}/{enablement}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'security_product' + '}', CGI.escape(security_product.to_s)).sub('{' + 'enablement' + '}', CGI.escape(enablement.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_enable_or_disable_security_product_on_all_org_repos_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_enable_or_disable_security_product_on_all_org_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_enable_or_disable_security_product_on_all_org_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization
    # Gets information about an organization.  When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  To see the full details about an organization, the authenticated user must be an organization owner.  The values returned by this endpoint are set by the \"Update an organization\" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the \"Update an organization\" endpoint have been overwritten by that configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on security configurations, see \"[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.  To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationFull]
    def orgs_get(org, opts = {})
      data, _status_code, _headers = orgs_get_with_http_info(org, opts)
      data
    end

    # Get an organization
    # Gets information about an organization.  When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  To see the full details about an organization, the authenticated user must be an organization owner.  The values returned by this endpoint are set by the \&quot;Update an organization\&quot; endpoint. If your organization set a default security configuration (beta), the following values retrieved from the \&quot;Update an organization\&quot; endpoint have been overwritten by that configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on security configurations, see \&quot;[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to see the full details about an organization.  To see information about an organization&#39;s GitHub plan, GitHub Apps need the &#x60;Organization plan&#x60; permission.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationFull, Integer, Hash)>] OrganizationFull data, response status code and response headers
    def orgs_get_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get"
      end
      # resource path
      local_var_path = '/orgs/{org}'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFull'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all custom properties for an organization
    # Gets all custom properties defined for an organization. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<OrgCustomProperty>]
    def orgs_get_all_custom_properties(org, opts = {})
      data, _status_code, _headers = orgs_get_all_custom_properties_with_http_info(org, opts)
      data
    end

    # Get all custom properties for an organization
    # Gets all custom properties defined for an organization. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrgCustomProperty>, Integer, Hash)>] Array<OrgCustomProperty> data, response status code and response headers
    def orgs_get_all_custom_properties_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_all_custom_properties ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_all_custom_properties"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/schema'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgCustomProperty>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_all_custom_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_all_custom_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a custom property for an organization
    # Gets a custom property that is defined for an organization. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [OrgCustomProperty]
    def orgs_get_custom_property(org, custom_property_name, opts = {})
      data, _status_code, _headers = orgs_get_custom_property_with_http_info(org, custom_property_name, opts)
      data
    end

    # Get a custom property for an organization
    # Gets a custom property that is defined for an organization. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgCustomProperty, Integer, Hash)>] OrgCustomProperty data, response status code and response headers
    def orgs_get_custom_property_with_http_info(org, custom_property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_custom_property ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_custom_property"
      end
      # verify the required parameter 'custom_property_name' is set
      if @api_client.config.client_side_validation && custom_property_name.nil?
        fail ArgumentError, "Missing the required parameter 'custom_property_name' when calling OrgsApi.orgs_get_custom_property"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/schema/{custom_property_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'custom_property_name' + '}', CGI.escape(custom_property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgCustomProperty'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_custom_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_custom_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization membership for the authenticated user
    # If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [OrgMembership]
    def orgs_get_membership_for_authenticated_user(org, opts = {})
      data, _status_code, _headers = orgs_get_membership_for_authenticated_user_with_http_info(org, opts)
      data
    end

    # Get an organization membership for the authenticated user
    # If the authenticated user is an active or pending member of the organization, this endpoint will return the user&#39;s membership. If the authenticated user is not affiliated with the organization, a &#x60;404&#x60; is returned. This endpoint will return a &#x60;403&#x60; if the request is made by a GitHub App that is blocked by the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMembership, Integer, Hash)>] OrgMembership data, response status code and response headers
    def orgs_get_membership_for_authenticated_user_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_membership_for_authenticated_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_membership_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/memberships/orgs/{org}'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_membership_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_membership_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization membership for a user
    # In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [OrgMembership]
    def orgs_get_membership_for_user(org, username, opts = {})
      data, _status_code, _headers = orgs_get_membership_for_user_with_http_info(org, username, opts)
      data
    end

    # Get organization membership for a user
    # In order to get a user&#39;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#39;s membership status.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMembership, Integer, Hash)>] OrgMembership data, response status code and response headers
    def orgs_get_membership_for_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_membership_for_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_membership_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_get_membership_for_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_membership_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_membership_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization role
    # Gets an organization role that is available to this organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRole]
    def orgs_get_org_role(org, role_id, opts = {})
      data, _status_code, _headers = orgs_get_org_role_with_http_info(org, role_id, opts)
      data
    end

    # Get an organization role
    # Gets an organization role that is available to this organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRole, Integer, Hash)>] OrganizationRole data, response status code and response headers
    def orgs_get_org_role_with_http_info(org, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_org_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_org_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_get_org_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRole'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_org_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_org_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization webhook
    # Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [OrgHook]
    def orgs_get_webhook(org, hook_id, opts = {})
      data, _status_code, _headers = orgs_get_webhook_with_http_info(org, hook_id, opts)
      data
    end

    # Get an organization webhook
    # Returns a webhook configured in an organization. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgHook, Integer, Hash)>] OrgHook data, response status code and response headers
    def orgs_get_webhook_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_webhook ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_webhook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_get_webhook"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgHook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a webhook configuration for an organization
    # Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [WebhookConfig]
    def orgs_get_webhook_config_for_org(org, hook_id, opts = {})
      data, _status_code, _headers = orgs_get_webhook_config_for_org_with_http_info(org, hook_id, opts)
      data
    end

    # Get a webhook configuration for an organization
    # Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\&quot;  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookConfig, Integer, Hash)>] WebhookConfig data, response status code and response headers
    def orgs_get_webhook_config_for_org_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_webhook_config_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_webhook_config_for_org"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_get_webhook_config_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/config'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_webhook_config_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_webhook_config_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a webhook delivery for an organization webhook
    # Returns a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param delivery_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [HookDelivery]
    def orgs_get_webhook_delivery(org, hook_id, delivery_id, opts = {})
      data, _status_code, _headers = orgs_get_webhook_delivery_with_http_info(org, hook_id, delivery_id, opts)
      data
    end

    # Get a webhook delivery for an organization webhook
    # Returns a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param delivery_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HookDelivery, Integer, Hash)>] HookDelivery data, response status code and response headers
    def orgs_get_webhook_delivery_with_http_info(org, hook_id, delivery_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_get_webhook_delivery ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_get_webhook_delivery"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_get_webhook_delivery"
      end
      # verify the required parameter 'delivery_id' is set
      if @api_client.config.client_side_validation && delivery_id.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_id' when calling OrgsApi.orgs_get_webhook_delivery"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s)).sub('{' + 'delivery_id' + '}', CGI.escape(delivery_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HookDelivery'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_get_webhook_delivery",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_get_webhook_delivery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organizations
    # Lists all organizations, in the order that they were created.  **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since An organization ID. Only return organizations with an ID greater than this ID.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<OrganizationSimple>]
    def orgs_list(opts = {})
      data, _status_code, _headers = orgs_list_with_http_info(opts)
      data
    end

    # List organizations
    # Lists all organizations, in the order that they were created.  **Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :since An organization ID. Only return organizations with an ID greater than this ID.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<OrganizationSimple>, Integer, Hash)>] Array<OrganizationSimple> data, response status code and response headers
    def orgs_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list ...'
      end
      # resource path
      local_var_path = '/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List app installations for an organization
    # Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [OrgsListAppInstallations200Response]
    def orgs_list_app_installations(org, opts = {})
      data, _status_code, _headers = orgs_list_app_installations_with_http_info(org, opts)
      data
    end

    # List app installations for an organization
    # Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:read&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(OrgsListAppInstallations200Response, Integer, Hash)>] OrgsListAppInstallations200Response data, response status code and response headers
    def orgs_list_app_installations_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_app_installations ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_app_installations"
      end
      # resource path
      local_var_path = '/orgs/{org}/installations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgsListAppInstallations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_app_installations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_app_installations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List attestations
    # List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.  The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.  **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param subject_digest [String] The parameter should be set to the attestation&#39;s subject&#39;s SHA256 digest, in the form &#x60;sha256:HEX_DIGEST&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @return [OrgsListAttestations200Response]
    def orgs_list_attestations(org, subject_digest, opts = {})
      data, _status_code, _headers = orgs_list_attestations_with_http_info(org, subject_digest, opts)
      data
    end

    # List attestations
    # List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.  The collection of attestations returned by this endpoint is filtered according to the authenticated user&#39;s permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the &#x60;attestations:read&#x60; permission is required.  **Please note:** in order to offer meaningful security benefits, an attestation&#39;s signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI &#x60;attestation verify&#x60; command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build&#39;s provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    # @param org [String] The organization name. The name is not case sensitive.
    # @param subject_digest [String] The parameter should be set to the attestation&#39;s subject&#39;s SHA256 digest, in the form &#x60;sha256:HEX_DIGEST&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @return [Array<(OrgsListAttestations200Response, Integer, Hash)>] OrgsListAttestations200Response data, response status code and response headers
    def orgs_list_attestations_with_http_info(org, subject_digest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_attestations ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_attestations"
      end
      # verify the required parameter 'subject_digest' is set
      if @api_client.config.client_side_validation && subject_digest.nil?
        fail ArgumentError, "Missing the required parameter 'subject_digest' when calling OrgsApi.orgs_list_attestations"
      end
      # resource path
      local_var_path = '/orgs/{org}/attestations/{subject_digest}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'subject_digest' + '}', CGI.escape(subject_digest.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgsListAttestations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_attestations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_attestations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users blocked by an organization
    # List the users blocked by an organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<SimpleUser>]
    def orgs_list_blocked_users(org, opts = {})
      data, _status_code, _headers = orgs_list_blocked_users_with_http_info(org, opts)
      data
    end

    # List users blocked by an organization
    # List the users blocked by an organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<SimpleUser>, Integer, Hash)>] Array<SimpleUser> data, response status code and response headers
    def orgs_list_blocked_users_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_blocked_users ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_blocked_users"
      end
      # resource path
      local_var_path = '/orgs/{org}/blocks'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_blocked_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_blocked_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List custom property values for organization repositories
    # Lists organization repositories with all of their custom property values. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :repository_query Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \&quot;[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\&quot; for a detailed list of qualifiers.
    # @return [Array<OrgRepoCustomPropertyValues>]
    def orgs_list_custom_properties_values_for_repos(org, opts = {})
      data, _status_code, _headers = orgs_list_custom_properties_values_for_repos_with_http_info(org, opts)
      data
    end

    # List custom property values for organization repositories
    # Lists organization repositories with all of their custom property values. Organization members can read these properties.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :repository_query Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \&quot;[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\&quot; for a detailed list of qualifiers.
    # @return [Array<(Array<OrgRepoCustomPropertyValues>, Integer, Hash)>] Array<OrgRepoCustomPropertyValues> data, response status code and response headers
    def orgs_list_custom_properties_values_for_repos_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_custom_properties_values_for_repos ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_custom_properties_values_for_repos"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/values'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'repository_query'] = opts[:'repository_query'] if !opts[:'repository_query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgRepoCustomPropertyValues>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_custom_properties_values_for_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_custom_properties_values_for_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List failed organization invitations
    # The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<OrganizationInvitation>]
    def orgs_list_failed_invitations(org, opts = {})
      data, _status_code, _headers = orgs_list_failed_invitations_with_http_info(org, opts)
      data
    end

    # List failed organization invitations
    # The return hash contains &#x60;failed_at&#x60; and &#x60;failed_reason&#x60; fields which represent the time at which the invitation failed and the reason for the failure.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<OrganizationInvitation>, Integer, Hash)>] Array<OrganizationInvitation> data, response status code and response headers
    def orgs_list_failed_invitations_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_failed_invitations ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_failed_invitations"
      end
      # resource path
      local_var_path = '/orgs/{org}/failed_invitations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationInvitation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_failed_invitations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_failed_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organizations for the authenticated user
    # List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<OrganizationSimple>]
    def orgs_list_for_authenticated_user(opts = {})
      data, _status_code, _headers = orgs_list_for_authenticated_user_with_http_info(opts)
      data
    end

    # List organizations for the authenticated user
    # List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a &#x60;403 Forbidden&#x60; response.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<OrganizationSimple>, Integer, Hash)>] Array<OrganizationSimple> data, response status code and response headers
    def orgs_list_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/orgs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organizations for a user
    # List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<OrganizationSimple>]
    def orgs_list_for_user(username, opts = {})
      data, _status_code, _headers = orgs_list_for_user_with_http_info(username, opts)
      data
    end

    # List organizations for a user
    # List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<OrganizationSimple>, Integer, Hash)>] Array<OrganizationSimple> data, response status code and response headers
    def orgs_list_for_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_for_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_list_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/orgs'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization invitation teams
    # List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param invitation_id [Integer] The unique identifier of the invitation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<Team>]
    def orgs_list_invitation_teams(org, invitation_id, opts = {})
      data, _status_code, _headers = orgs_list_invitation_teams_with_http_info(org, invitation_id, opts)
      data
    end

    # List organization invitation teams
    # List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param invitation_id [Integer] The unique identifier of the invitation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def orgs_list_invitation_teams_with_http_info(org, invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_invitation_teams ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_invitation_teams"
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling OrgsApi.orgs_list_invitation_teams"
      end
      # resource path
      local_var_path = '/orgs/{org}/invitations/{invitation_id}/teams'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'invitation_id' + '}', CGI.escape(invitation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_invitation_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_invitation_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization members
    # List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter members returned in the list. &#x60;2fa_disabled&#x60; means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. (default to 'all')
    # @option opts [String] :role Filter members returned by their role. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<SimpleUser>]
    def orgs_list_members(org, opts = {})
      data, _status_code, _headers = orgs_list_members_with_http_info(org, opts)
      data
    end

    # List organization members
    # List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter members returned in the list. &#x60;2fa_disabled&#x60; means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. (default to 'all')
    # @option opts [String] :role Filter members returned by their role. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<SimpleUser>, Integer, Hash)>] Array<SimpleUser> data, response status code and response headers
    def orgs_list_members_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_members ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_members"
      end
      allowable_values = ["2fa_disabled", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      allowable_values = ["all", "admin", "member"]
      if @api_client.config.client_side_validation && opts[:'role'] && !allowable_values.include?(opts[:'role'])
        fail ArgumentError, "invalid value for \"role\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/members'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization memberships for the authenticated user
    # Lists all of the authenticated user's organization memberships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<OrgMembership>]
    def orgs_list_memberships_for_authenticated_user(opts = {})
      data, _status_code, _headers = orgs_list_memberships_for_authenticated_user_with_http_info(opts)
      data
    end

    # List organization memberships for the authenticated user
    # Lists all of the authenticated user&#39;s organization memberships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<OrgMembership>, Integer, Hash)>] Array<OrgMembership> data, response status code and response headers
    def orgs_list_memberships_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_memberships_for_authenticated_user ...'
      end
      allowable_values = ["active", "pending"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/memberships/orgs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgMembership>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_memberships_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_memberships_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teams that are assigned to an organization role
    # Lists the teams that are assigned to an organization role. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<TeamRoleAssignment>]
    def orgs_list_org_role_teams(org, role_id, opts = {})
      data, _status_code, _headers = orgs_list_org_role_teams_with_http_info(org, role_id, opts)
      data
    end

    # List teams that are assigned to an organization role
    # Lists the teams that are assigned to an organization role. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<TeamRoleAssignment>, Integer, Hash)>] Array<TeamRoleAssignment> data, response status code and response headers
    def orgs_list_org_role_teams_with_http_info(org, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_org_role_teams ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_org_role_teams"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_list_org_role_teams"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/{role_id}/teams'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamRoleAssignment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_org_role_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_org_role_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users that are assigned to an organization role
    # Lists organization members that are assigned to an organization role. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<UserRoleAssignment>]
    def orgs_list_org_role_users(org, role_id, opts = {})
      data, _status_code, _headers = orgs_list_org_role_users_with_http_info(org, role_id, opts)
      data
    end

    # List users that are assigned to an organization role
    # Lists organization members that are assigned to an organization role. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<UserRoleAssignment>, Integer, Hash)>] Array<UserRoleAssignment> data, response status code and response headers
    def orgs_list_org_role_users_with_http_info(org, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_org_role_users ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_org_role_users"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_list_org_role_users"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/{role_id}/users'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserRoleAssignment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_org_role_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_org_role_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organization roles for an organization
    # Lists the organization roles available in this organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [OrgsListOrgRoles200Response]
    def orgs_list_org_roles(org, opts = {})
      data, _status_code, _headers = orgs_list_org_roles_with_http_info(org, opts)
      data
    end

    # Get all organization roles for an organization
    # Lists the organization roles available in this organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgsListOrgRoles200Response, Integer, Hash)>] OrgsListOrgRoles200Response data, response status code and response headers
    def orgs_list_org_roles_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_org_roles ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_org_roles"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgsListOrgRoles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_org_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_org_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization fine-grained permissions for an organization
    # Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To list the fine-grained permissions that can be used in custom repository roles for an organization, see \"[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationFineGrainedPermission>]
    def orgs_list_organization_fine_grained_permissions(org, opts = {})
      data, _status_code, _headers = orgs_list_organization_fine_grained_permissions_with_http_info(org, opts)
      data
    end

    # List organization fine-grained permissions for an organization
    # Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To list the fine-grained permissions that can be used in custom repository roles for an organization, see \&quot;[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationFineGrainedPermission>, Integer, Hash)>] Array<OrganizationFineGrainedPermission> data, response status code and response headers
    def orgs_list_organization_fine_grained_permissions_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_organization_fine_grained_permissions ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_organization_fine_grained_permissions"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-fine-grained-permissions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationFineGrainedPermission>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_organization_fine_grained_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_organization_fine_grained_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List outside collaborators for an organization
    # List all users who are outside collaborators of an organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the list of outside collaborators. &#x60;2fa_disabled&#x60; means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<SimpleUser>]
    def orgs_list_outside_collaborators(org, opts = {})
      data, _status_code, _headers = orgs_list_outside_collaborators_with_http_info(org, opts)
      data
    end

    # List outside collaborators for an organization
    # List all users who are outside collaborators of an organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter the list of outside collaborators. &#x60;2fa_disabled&#x60; means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. (default to 'all')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<SimpleUser>, Integer, Hash)>] Array<SimpleUser> data, response status code and response headers
    def orgs_list_outside_collaborators_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_outside_collaborators ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_outside_collaborators"
      end
      allowable_values = ["2fa_disabled", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/outside_collaborators'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_outside_collaborators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_outside_collaborators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories a fine-grained personal access token has access to
    # Lists the repositories a fine-grained personal access token has access to.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_id [Integer] Unique identifier of the fine-grained personal access token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<MinimalRepository>]
    def orgs_list_pat_grant_repositories(org, pat_id, opts = {})
      data, _status_code, _headers = orgs_list_pat_grant_repositories_with_http_info(org, pat_id, opts)
      data
    end

    # List repositories a fine-grained personal access token has access to
    # Lists the repositories a fine-grained personal access token has access to.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_id [Integer] Unique identifier of the fine-grained personal access token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def orgs_list_pat_grant_repositories_with_http_info(org, pat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_pat_grant_repositories ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_pat_grant_repositories"
      end
      # verify the required parameter 'pat_id' is set
      if @api_client.config.client_side_validation && pat_id.nil?
        fail ArgumentError, "Missing the required parameter 'pat_id' when calling OrgsApi.orgs_list_pat_grant_repositories"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-tokens/{pat_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'pat_id' + '}', CGI.escape(pat_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_pat_grant_repositories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_pat_grant_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories requested to be accessed by a fine-grained personal access token
    # Lists the repositories a fine-grained personal access token request is requesting access to.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_request_id [Integer] Unique identifier of the request for access via fine-grained personal access token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<MinimalRepository>]
    def orgs_list_pat_grant_request_repositories(org, pat_request_id, opts = {})
      data, _status_code, _headers = orgs_list_pat_grant_request_repositories_with_http_info(org, pat_request_id, opts)
      data
    end

    # List repositories requested to be accessed by a fine-grained personal access token
    # Lists the repositories a fine-grained personal access token request is requesting access to.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_request_id [Integer] Unique identifier of the request for access via fine-grained personal access token.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<MinimalRepository>, Integer, Hash)>] Array<MinimalRepository> data, response status code and response headers
    def orgs_list_pat_grant_request_repositories_with_http_info(org, pat_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_pat_grant_request_repositories ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_pat_grant_request_repositories"
      end
      # verify the required parameter 'pat_request_id' is set
      if @api_client.config.client_side_validation && pat_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'pat_request_id' when calling OrgsApi.orgs_list_pat_grant_request_repositories"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'pat_request_id' + '}', CGI.escape(pat_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MinimalRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_pat_grant_request_repositories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_pat_grant_request_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List requests to access organization resources with fine-grained personal access tokens
    # Lists requests from organization members to access organization resources with a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :sort The property by which to sort the results. (default to 'created_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Array<String>] :owner A list of owner usernames to use to filter the results.
    # @option opts [String] :repository The name of the repository to use to filter the results.
    # @option opts [String] :permission The permission to use to filter the results.
    # @option opts [Time] :last_used_before Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Time] :last_used_after Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @return [Array<OrganizationProgrammaticAccessGrantRequest>]
    def orgs_list_pat_grant_requests(org, opts = {})
      data, _status_code, _headers = orgs_list_pat_grant_requests_with_http_info(org, opts)
      data
    end

    # List requests to access organization resources with fine-grained personal access tokens
    # Lists requests from organization members to access organization resources with a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :sort The property by which to sort the results. (default to 'created_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Array<String>] :owner A list of owner usernames to use to filter the results.
    # @option opts [String] :repository The name of the repository to use to filter the results.
    # @option opts [String] :permission The permission to use to filter the results.
    # @option opts [Time] :last_used_before Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Time] :last_used_after Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @return [Array<(Array<OrganizationProgrammaticAccessGrantRequest>, Integer, Hash)>] Array<OrganizationProgrammaticAccessGrantRequest> data, response status code and response headers
    def orgs_list_pat_grant_requests_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_pat_grant_requests ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_pat_grant_requests"
      end
      allowable_values = ["created_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'owner'].nil? && opts[:'owner'].length > 10
        fail ArgumentError, 'invalid value for "opts[:"owner"]" when calling OrgsApi.orgs_list_pat_grant_requests, number of items must be less than or equal to 10.'
      end

      # resource path
      local_var_path = '/orgs/{org}/personal-access-token-requests'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'owner'] = @api_client.build_collection_param(opts[:'owner'], :multi) if !opts[:'owner'].nil?
      query_params[:'repository'] = opts[:'repository'] if !opts[:'repository'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'last_used_before'] = opts[:'last_used_before'] if !opts[:'last_used_before'].nil?
      query_params[:'last_used_after'] = opts[:'last_used_after'] if !opts[:'last_used_after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationProgrammaticAccessGrantRequest>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_pat_grant_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_pat_grant_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List fine-grained personal access tokens with access to organization resources
    # Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :sort The property by which to sort the results. (default to 'created_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Array<String>] :owner A list of owner usernames to use to filter the results.
    # @option opts [String] :repository The name of the repository to use to filter the results.
    # @option opts [String] :permission The permission to use to filter the results.
    # @option opts [Time] :last_used_before Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Time] :last_used_after Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @return [Array<OrganizationProgrammaticAccessGrant>]
    def orgs_list_pat_grants(org, opts = {})
      data, _status_code, _headers = orgs_list_pat_grants_with_http_info(org, opts)
      data
    end

    # List fine-grained personal access tokens with access to organization resources
    # Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :sort The property by which to sort the results. (default to 'created_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Array<String>] :owner A list of owner usernames to use to filter the results.
    # @option opts [String] :repository The name of the repository to use to filter the results.
    # @option opts [String] :permission The permission to use to filter the results.
    # @option opts [Time] :last_used_before Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @option opts [Time] :last_used_after Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
    # @return [Array<(Array<OrganizationProgrammaticAccessGrant>, Integer, Hash)>] Array<OrganizationProgrammaticAccessGrant> data, response status code and response headers
    def orgs_list_pat_grants_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_pat_grants ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_pat_grants"
      end
      allowable_values = ["created_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'owner'].nil? && opts[:'owner'].length > 10
        fail ArgumentError, 'invalid value for "opts[:"owner"]" when calling OrgsApi.orgs_list_pat_grants, number of items must be less than or equal to 10.'
      end

      # resource path
      local_var_path = '/orgs/{org}/personal-access-tokens'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'owner'] = @api_client.build_collection_param(opts[:'owner'], :multi) if !opts[:'owner'].nil?
      query_params[:'repository'] = opts[:'repository'] if !opts[:'repository'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'last_used_before'] = opts[:'last_used_before'] if !opts[:'last_used_before'].nil?
      query_params[:'last_used_after'] = opts[:'last_used_after'] if !opts[:'last_used_after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationProgrammaticAccessGrant>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_pat_grants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_pat_grants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pending organization invitations
    # The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :role Filter invitations by their member role. (default to 'all')
    # @option opts [String] :invitation_source Filter invitations by their invitation source. (default to 'all')
    # @return [Array<OrganizationInvitation>]
    def orgs_list_pending_invitations(org, opts = {})
      data, _status_code, _headers = orgs_list_pending_invitations_with_http_info(org, opts)
      data
    end

    # List pending organization invitations
    # The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, or &#x60;hiring_manager&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :role Filter invitations by their member role. (default to 'all')
    # @option opts [String] :invitation_source Filter invitations by their invitation source. (default to 'all')
    # @return [Array<(Array<OrganizationInvitation>, Integer, Hash)>] Array<OrganizationInvitation> data, response status code and response headers
    def orgs_list_pending_invitations_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_pending_invitations ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_pending_invitations"
      end
      allowable_values = ["all", "admin", "direct_member", "billing_manager", "hiring_manager"]
      if @api_client.config.client_side_validation && opts[:'role'] && !allowable_values.include?(opts[:'role'])
        fail ArgumentError, "invalid value for \"role\", must be one of #{allowable_values}"
      end
      allowable_values = ["all", "member", "scim"]
      if @api_client.config.client_side_validation && opts[:'invitation_source'] && !allowable_values.include?(opts[:'invitation_source'])
        fail ArgumentError, "invalid value for \"invitation_source\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/invitations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'invitation_source'] = opts[:'invitation_source'] if !opts[:'invitation_source'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationInvitation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_pending_invitations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_pending_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public organization members
    # Members of an organization can choose to have their membership publicized or not.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<SimpleUser>]
    def orgs_list_public_members(org, opts = {})
      data, _status_code, _headers = orgs_list_public_members_with_http_info(org, opts)
      data
    end

    # List public organization members
    # Members of an organization can choose to have their membership publicized or not.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<SimpleUser>, Integer, Hash)>] Array<SimpleUser> data, response status code and response headers
    def orgs_list_public_members_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_public_members ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_public_members"
      end
      # resource path
      local_var_path = '/orgs/{org}/public_members'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleUser>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_public_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_public_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List security manager teams
    # Lists teams that are security managers for an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<TeamSimple>]
    def orgs_list_security_manager_teams(org, opts = {})
      data, _status_code, _headers = orgs_list_security_manager_teams_with_http_info(org, opts)
      data
    end

    # List security manager teams
    # Lists teams that are security managers for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TeamSimple>, Integer, Hash)>] Array<TeamSimple> data, response status code and response headers
    def orgs_list_security_manager_teams_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_security_manager_teams ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_security_manager_teams"
      end
      # resource path
      local_var_path = '/orgs/{org}/security-managers'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamSimple>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_security_manager_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_security_manager_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List deliveries for an organization webhook
    # Returns a list of webhook deliveries for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :cursor Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the &#x60;link&#x60; header for the next and previous page cursors.
    # @option opts [Boolean] :redelivery 
    # @return [Array<HookDeliveryItem>]
    def orgs_list_webhook_deliveries(org, hook_id, opts = {})
      data, _status_code, _headers = orgs_list_webhook_deliveries_with_http_info(org, hook_id, opts)
      data
    end

    # List deliveries for an organization webhook
    # Returns a list of webhook deliveries for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :cursor Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the &#x60;link&#x60; header for the next and previous page cursors.
    # @option opts [Boolean] :redelivery 
    # @return [Array<(Array<HookDeliveryItem>, Integer, Hash)>] Array<HookDeliveryItem> data, response status code and response headers
    def orgs_list_webhook_deliveries_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_webhook_deliveries ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_webhook_deliveries"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_list_webhook_deliveries"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/deliveries'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'redelivery'] = opts[:'redelivery'] if !opts[:'redelivery'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<HookDeliveryItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_webhook_deliveries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_webhook_deliveries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization webhooks
    # You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<OrgHook>]
    def orgs_list_webhooks(org, opts = {})
      data, _status_code, _headers = orgs_list_webhooks_with_http_info(org, opts)
      data
    end

    # List organization webhooks
    # You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(Array<OrgHook>, Integer, Hash)>] Array<OrgHook> data, response status code and response headers
    def orgs_list_webhooks_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_list_webhooks ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_list_webhooks"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgHook>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_list_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_list_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a custom organization role
    # Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"   To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param orgs_patch_custom_organization_role_request [OrgsPatchCustomOrganizationRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRole]
    def orgs_patch_custom_organization_role(org, role_id, orgs_patch_custom_organization_role_request, opts = {})
      data, _status_code, _headers = orgs_patch_custom_organization_role_with_http_info(org, role_id, orgs_patch_custom_organization_role_request, opts)
      data
    end

    # Update a custom organization role
    # Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;   To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param role_id [Integer] The unique identifier of the role.
    # @param orgs_patch_custom_organization_role_request [OrgsPatchCustomOrganizationRoleRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRole, Integer, Hash)>] OrganizationRole data, response status code and response headers
    def orgs_patch_custom_organization_role_with_http_info(org, role_id, orgs_patch_custom_organization_role_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_patch_custom_organization_role ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_patch_custom_organization_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_patch_custom_organization_role"
      end
      # verify the required parameter 'orgs_patch_custom_organization_role_request' is set
      if @api_client.config.client_side_validation && orgs_patch_custom_organization_role_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_patch_custom_organization_role_request' when calling OrgsApi.orgs_patch_custom_organization_role"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_patch_custom_organization_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRole'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_patch_custom_organization_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_patch_custom_organization_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ping an organization webhook
    # This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_ping_webhook(org, hook_id, opts = {})
      orgs_ping_webhook_with_http_info(org, hook_id, opts)
      nil
    end

    # Ping an organization webhook
    # This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_ping_webhook_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_ping_webhook ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_ping_webhook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_ping_webhook"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/pings'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_ping_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_ping_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeliver a delivery for an organization webhook
    # Redeliver a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param delivery_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def orgs_redeliver_webhook_delivery(org, hook_id, delivery_id, opts = {})
      data, _status_code, _headers = orgs_redeliver_webhook_delivery_with_http_info(org, hook_id, delivery_id, opts)
      data
    end

    # Redeliver a delivery for an organization webhook
    # Redeliver a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param delivery_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def orgs_redeliver_webhook_delivery_with_http_info(org, hook_id, delivery_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_redeliver_webhook_delivery ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_redeliver_webhook_delivery"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_redeliver_webhook_delivery"
      end
      # verify the required parameter 'delivery_id' is set
      if @api_client.config.client_side_validation && delivery_id.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_id' when calling OrgsApi.orgs_redeliver_webhook_delivery"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s)).sub('{' + 'delivery_id' + '}', CGI.escape(delivery_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_redeliver_webhook_delivery",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_redeliver_webhook_delivery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom property for an organization
    # Removes a custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_custom_property(org, custom_property_name, opts = {})
      orgs_remove_custom_property_with_http_info(org, custom_property_name, opts)
      nil
    end

    # Remove a custom property for an organization
    # Removes a custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param custom_property_name [String] The custom property name. The name is case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_custom_property_with_http_info(org, custom_property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_custom_property ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_custom_property"
      end
      # verify the required parameter 'custom_property_name' is set
      if @api_client.config.client_side_validation && custom_property_name.nil?
        fail ArgumentError, "Missing the required parameter 'custom_property_name' when calling OrgsApi.orgs_remove_custom_property"
      end
      # resource path
      local_var_path = '/orgs/{org}/properties/schema/{custom_property_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'custom_property_name' + '}', CGI.escape(custom_property_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_custom_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_custom_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an organization member
    # Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_member(org, username, opts = {})
      orgs_remove_member_with_http_info(org, username, opts)
      nil
    end

    # Remove an organization member
    # Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#39;s repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_member_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_member ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_member"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_remove_member"
      end
      # resource path
      local_var_path = '/orgs/{org}/members/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove organization membership for a user
    # In order to remove a user's membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_membership_for_user(org, username, opts = {})
      orgs_remove_membership_for_user_with_http_info(org, username, opts)
      nil
    end

    # Remove organization membership for a user
    # In order to remove a user&#39;s membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_membership_for_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_membership_for_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_membership_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_remove_membership_for_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_membership_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_membership_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove outside collaborator from an organization
    # Removing a user from this list will remove them from all the organization's repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_outside_collaborator(org, username, opts = {})
      orgs_remove_outside_collaborator_with_http_info(org, username, opts)
      nil
    end

    # Remove outside collaborator from an organization
    # Removing a user from this list will remove them from all the organization&#39;s repositories.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_outside_collaborator_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_outside_collaborator ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_outside_collaborator"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_remove_outside_collaborator"
      end
      # resource path
      local_var_path = '/orgs/{org}/outside_collaborators/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_outside_collaborator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_outside_collaborator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove public organization membership for the authenticated user
    # Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_public_membership_for_authenticated_user(org, username, opts = {})
      orgs_remove_public_membership_for_authenticated_user_with_http_info(org, username, opts)
      nil
    end

    # Remove public organization membership for the authenticated user
    # Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_public_membership_for_authenticated_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_public_membership_for_authenticated_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_public_membership_for_authenticated_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_remove_public_membership_for_authenticated_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/public_members/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_public_membership_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_public_membership_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a security manager team
    # Removes the security manager role from a team for an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_remove_security_manager_team(org, team_slug, opts = {})
      orgs_remove_security_manager_team_with_http_info(org, team_slug, opts)
      nil
    end

    # Remove a security manager team
    # Removes the security manager role from a team for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_remove_security_manager_team_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_remove_security_manager_team ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_remove_security_manager_team"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling OrgsApi.orgs_remove_security_manager_team"
      end
      # resource path
      local_var_path = '/orgs/{org}/security-managers/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_remove_security_manager_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_remove_security_manager_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review a request to access organization resources with a fine-grained personal access token
    # Approves or denies a pending request to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_request_id [Integer] Unique identifier of the request for access via fine-grained personal access token.
    # @param orgs_review_pat_grant_request_request [OrgsReviewPatGrantRequestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_review_pat_grant_request(org, pat_request_id, orgs_review_pat_grant_request_request, opts = {})
      orgs_review_pat_grant_request_with_http_info(org, pat_request_id, orgs_review_pat_grant_request_request, opts)
      nil
    end

    # Review a request to access organization resources with a fine-grained personal access token
    # Approves or denies a pending request to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_request_id [Integer] Unique identifier of the request for access via fine-grained personal access token.
    # @param orgs_review_pat_grant_request_request [OrgsReviewPatGrantRequestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_review_pat_grant_request_with_http_info(org, pat_request_id, orgs_review_pat_grant_request_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_review_pat_grant_request ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_review_pat_grant_request"
      end
      # verify the required parameter 'pat_request_id' is set
      if @api_client.config.client_side_validation && pat_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'pat_request_id' when calling OrgsApi.orgs_review_pat_grant_request"
      end
      # verify the required parameter 'orgs_review_pat_grant_request_request' is set
      if @api_client.config.client_side_validation && orgs_review_pat_grant_request_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_review_pat_grant_request_request' when calling OrgsApi.orgs_review_pat_grant_request"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-token-requests/{pat_request_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'pat_request_id' + '}', CGI.escape(pat_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_review_pat_grant_request_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_review_pat_grant_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_review_pat_grant_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review requests to access organization resources with fine-grained personal access tokens
    # Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_review_pat_grant_requests_in_bulk_request [OrgsReviewPatGrantRequestsInBulkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def orgs_review_pat_grant_requests_in_bulk(org, orgs_review_pat_grant_requests_in_bulk_request, opts = {})
      data, _status_code, _headers = orgs_review_pat_grant_requests_in_bulk_with_http_info(org, orgs_review_pat_grant_requests_in_bulk_request, opts)
      data
    end

    # Review requests to access organization resources with fine-grained personal access tokens
    # Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_review_pat_grant_requests_in_bulk_request [OrgsReviewPatGrantRequestsInBulkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def orgs_review_pat_grant_requests_in_bulk_with_http_info(org, orgs_review_pat_grant_requests_in_bulk_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_review_pat_grant_requests_in_bulk ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_review_pat_grant_requests_in_bulk"
      end
      # verify the required parameter 'orgs_review_pat_grant_requests_in_bulk_request' is set
      if @api_client.config.client_side_validation && orgs_review_pat_grant_requests_in_bulk_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_review_pat_grant_requests_in_bulk_request' when calling OrgsApi.orgs_review_pat_grant_requests_in_bulk"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-token-requests'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_review_pat_grant_requests_in_bulk_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_review_pat_grant_requests_in_bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_review_pat_grant_requests_in_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all organization roles for a team
    # Removes all assigned organization roles from a team. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_revoke_all_org_roles_team(org, team_slug, opts = {})
      orgs_revoke_all_org_roles_team_with_http_info(org, team_slug, opts)
      nil
    end

    # Remove all organization roles for a team
    # Removes all assigned organization roles from a team. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_revoke_all_org_roles_team_with_http_info(org, team_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_revoke_all_org_roles_team ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_revoke_all_org_roles_team"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling OrgsApi.orgs_revoke_all_org_roles_team"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/teams/{team_slug}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_revoke_all_org_roles_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_revoke_all_org_roles_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all organization roles for a user
    # Revokes all assigned organization roles from a user. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_revoke_all_org_roles_user(org, username, opts = {})
      orgs_revoke_all_org_roles_user_with_http_info(org, username, opts)
      nil
    end

    # Remove all organization roles for a user
    # Revokes all assigned organization roles from a user. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_revoke_all_org_roles_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_revoke_all_org_roles_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_revoke_all_org_roles_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_revoke_all_org_roles_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/users/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_revoke_all_org_roles_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_revoke_all_org_roles_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an organization role from a team
    # Removes an organization role from a team. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_revoke_org_role_team(org, team_slug, role_id, opts = {})
      orgs_revoke_org_role_team_with_http_info(org, team_slug, role_id, opts)
      nil
    end

    # Remove an organization role from a team
    # Removes an organization role from a team. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param team_slug [String] The slug of the team name.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_revoke_org_role_team_with_http_info(org, team_slug, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_revoke_org_role_team ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_revoke_org_role_team"
      end
      # verify the required parameter 'team_slug' is set
      if @api_client.config.client_side_validation && team_slug.nil?
        fail ArgumentError, "Missing the required parameter 'team_slug' when calling OrgsApi.orgs_revoke_org_role_team"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_revoke_org_role_team"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'team_slug' + '}', CGI.escape(team_slug.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_revoke_org_role_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_revoke_org_role_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an organization role from a user
    # Remove an organization role from a user. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_revoke_org_role_user(org, username, role_id, opts = {})
      orgs_revoke_org_role_user_with_http_info(org, username, role_id, opts)
      nil
    end

    # Remove an organization role from a user
    # Remove an organization role from a user. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param role_id [Integer] The unique identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_revoke_org_role_user_with_http_info(org, username, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_revoke_org_role_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_revoke_org_role_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_revoke_org_role_user"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OrgsApi.orgs_revoke_org_role_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/organization-roles/users/{username}/{role_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_revoke_org_role_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_revoke_org_role_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set organization membership for a user
    # Only authenticated organization owners can add a member to the organization or update the member's role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.      *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.  **Rate limits**  To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsSetMembershipForUserRequest] :orgs_set_membership_for_user_request 
    # @return [OrgMembership]
    def orgs_set_membership_for_user(org, username, opts = {})
      data, _status_code, _headers = orgs_set_membership_for_user_with_http_info(org, username, opts)
      data
    end

    # Set organization membership for a user
    # Only authenticated organization owners can add a member to the organization or update the member&#39;s role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#39;s [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.      *   Authenticated users can _update_ a user&#39;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#39;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#39;ve been made an organization owner. If the authenticated user changes an owner&#39;s role to &#x60;member&#x60;, no email will be sent.  **Rate limits**  To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsSetMembershipForUserRequest] :orgs_set_membership_for_user_request 
    # @return [Array<(OrgMembership, Integer, Hash)>] OrgMembership data, response status code and response headers
    def orgs_set_membership_for_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_set_membership_for_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_set_membership_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_set_membership_for_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/memberships/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_set_membership_for_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_set_membership_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_set_membership_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set public organization membership for the authenticated user
    # The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_set_public_membership_for_authenticated_user(org, username, opts = {})
      orgs_set_public_membership_for_authenticated_user_with_http_info(org, username, opts)
      nil
    end

    # Set public organization membership for the authenticated user
    # The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_set_public_membership_for_authenticated_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_set_public_membership_for_authenticated_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_set_public_membership_for_authenticated_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_set_public_membership_for_authenticated_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/public_members/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_set_public_membership_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_set_public_membership_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unblock a user from an organization
    # Unblocks the given user on behalf of the specified organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_unblock_user(org, username, opts = {})
      orgs_unblock_user_with_http_info(org, username, opts)
      nil
    end

    # Unblock a user from an organization
    # Unblocks the given user on behalf of the specified organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_unblock_user_with_http_info(org, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_unblock_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_unblock_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling OrgsApi.orgs_unblock_user"
      end
      # resource path
      local_var_path = '/orgs/{org}/blocks/{username}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_unblock_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_unblock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization
    # **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Updates the organization's profile and member privileges.  With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on setting a default security configuration, see \"[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\"  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsUpdateRequest] :orgs_update_request 
    # @return [OrganizationFull]
    def orgs_update(org, opts = {})
      data, _status_code, _headers = orgs_update_with_http_info(org, opts)
      data
    end

    # Update an organization
    # **Parameter Deprecation Notice:** GitHub will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Updates the organization&#39;s profile and member privileges.  With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on setting a default security configuration, see \&quot;[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\&quot;  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; or &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsUpdateRequest] :orgs_update_request 
    # @return [Array<(OrganizationFull, Integer, Hash)>] OrganizationFull data, response status code and response headers
    def orgs_update_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update"
      end
      # resource path
      local_var_path = '/orgs/{org}'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_update_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationFull'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization membership for the authenticated user
    # Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_update_membership_for_authenticated_user_request [OrgsUpdateMembershipForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrgMembership]
    def orgs_update_membership_for_authenticated_user(org, orgs_update_membership_for_authenticated_user_request, opts = {})
      data, _status_code, _headers = orgs_update_membership_for_authenticated_user_with_http_info(org, orgs_update_membership_for_authenticated_user_request, opts)
      data
    end

    # Update an organization membership for the authenticated user
    # Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_update_membership_for_authenticated_user_request [OrgsUpdateMembershipForAuthenticatedUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMembership, Integer, Hash)>] OrgMembership data, response status code and response headers
    def orgs_update_membership_for_authenticated_user_with_http_info(org, orgs_update_membership_for_authenticated_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update_membership_for_authenticated_user ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update_membership_for_authenticated_user"
      end
      # verify the required parameter 'orgs_update_membership_for_authenticated_user_request' is set
      if @api_client.config.client_side_validation && orgs_update_membership_for_authenticated_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_update_membership_for_authenticated_user_request' when calling OrgsApi.orgs_update_membership_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/memberships/orgs/{org}'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_update_membership_for_authenticated_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update_membership_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update_membership_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the access a fine-grained personal access token has to organization resources
    # Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_id [Integer] The unique identifier of the fine-grained personal access token.
    # @param orgs_update_pat_access_request [OrgsUpdatePatAccessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def orgs_update_pat_access(org, pat_id, orgs_update_pat_access_request, opts = {})
      orgs_update_pat_access_with_http_info(org, pat_id, orgs_update_pat_access_request, opts)
      nil
    end

    # Update the access a fine-grained personal access token has to organization resources
    # Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token&#39;s existing access. Limited to revoking a token&#39;s existing access.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param pat_id [Integer] The unique identifier of the fine-grained personal access token.
    # @param orgs_update_pat_access_request [OrgsUpdatePatAccessRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_update_pat_access_with_http_info(org, pat_id, orgs_update_pat_access_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update_pat_access ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update_pat_access"
      end
      # verify the required parameter 'pat_id' is set
      if @api_client.config.client_side_validation && pat_id.nil?
        fail ArgumentError, "Missing the required parameter 'pat_id' when calling OrgsApi.orgs_update_pat_access"
      end
      # verify the required parameter 'orgs_update_pat_access_request' is set
      if @api_client.config.client_side_validation && orgs_update_pat_access_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_update_pat_access_request' when calling OrgsApi.orgs_update_pat_access"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-tokens/{pat_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'pat_id' + '}', CGI.escape(pat_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_update_pat_access_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update_pat_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update_pat_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the access to organization resources via fine-grained personal access tokens
    # Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_update_pat_accesses_request [OrgsUpdatePatAccessesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def orgs_update_pat_accesses(org, orgs_update_pat_accesses_request, opts = {})
      data, _status_code, _headers = orgs_update_pat_accesses_with_http_info(org, orgs_update_pat_accesses_request, opts)
      data
    end

    # Update the access to organization resources via fine-grained personal access tokens
    # Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token&#39;s existing access.  Only GitHub Apps can use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param orgs_update_pat_accesses_request [OrgsUpdatePatAccessesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def orgs_update_pat_accesses_with_http_info(org, orgs_update_pat_accesses_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update_pat_accesses ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update_pat_accesses"
      end
      # verify the required parameter 'orgs_update_pat_accesses_request' is set
      if @api_client.config.client_side_validation && orgs_update_pat_accesses_request.nil?
        fail ArgumentError, "Missing the required parameter 'orgs_update_pat_accesses_request' when calling OrgsApi.orgs_update_pat_accesses"
      end
      # resource path
      local_var_path = '/orgs/{org}/personal-access-tokens'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(orgs_update_pat_accesses_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update_pat_accesses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update_pat_accesses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization webhook
    # Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\".  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsUpdateWebhookRequest] :orgs_update_webhook_request 
    # @return [OrgHook]
    def orgs_update_webhook(org, hook_id, opts = {})
      data, _status_code, _headers = orgs_update_webhook_with_http_info(org, hook_id, opts)
      data
    end

    # Update an organization webhook
    # Updates a webhook configured in an organization. When you update a webhook, the &#x60;secret&#x60; will be overwritten. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\&quot;.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [OrgsUpdateWebhookRequest] :orgs_update_webhook_request 
    # @return [Array<(OrgHook, Integer, Hash)>] OrgHook data, response status code and response headers
    def orgs_update_webhook_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update_webhook ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update_webhook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_update_webhook"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'orgs_update_webhook_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrgHook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a webhook configuration for an organization
    # Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [AppsUpdateWebhookConfigForAppRequest] :apps_update_webhook_config_for_app_request 
    # @return [WebhookConfig]
    def orgs_update_webhook_config_for_org(org, hook_id, opts = {})
      data, _status_code, _headers = orgs_update_webhook_config_for_org_with_http_info(org, hook_id, opts)
      data
    end

    # Update a webhook configuration for an organization
    # Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\&quot;  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need &#x60;admin:org_hook&#x60; scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param hook_id [Integer] The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery.
    # @param [Hash] opts the optional parameters
    # @option opts [AppsUpdateWebhookConfigForAppRequest] :apps_update_webhook_config_for_app_request 
    # @return [Array<(WebhookConfig, Integer, Hash)>] WebhookConfig data, response status code and response headers
    def orgs_update_webhook_config_for_org_with_http_info(org, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgsApi.orgs_update_webhook_config_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling OrgsApi.orgs_update_webhook_config_for_org"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling OrgsApi.orgs_update_webhook_config_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/hooks/{hook_id}/config'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'apps_update_webhook_config_for_app_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrgsApi.orgs_update_webhook_config_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgsApi#orgs_update_webhook_config_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
