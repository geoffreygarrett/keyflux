=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class ClassroomApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a classroom
    # Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
    # @param classroom_id [Integer] The unique identifier of the classroom.
    # @param [Hash] opts the optional parameters
    # @return [Classroom]
    def classroom_get_a_classroom(classroom_id, opts = {})
      data, _status_code, _headers = classroom_get_a_classroom_with_http_info(classroom_id, opts)
      data
    end

    # Get a classroom
    # Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
    # @param classroom_id [Integer] The unique identifier of the classroom.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Classroom, Integer, Hash)>] Classroom data, response status code and response headers
    def classroom_get_a_classroom_with_http_info(classroom_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_get_a_classroom ...'
      end
      # verify the required parameter 'classroom_id' is set
      if @api_client.config.client_side_validation && classroom_id.nil?
        fail ArgumentError, "Missing the required parameter 'classroom_id' when calling ClassroomApi.classroom_get_a_classroom"
      end
      # resource path
      local_var_path = '/classrooms/{classroom_id}'.sub('{' + 'classroom_id' + '}', CGI.escape(classroom_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Classroom'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_get_a_classroom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_get_a_classroom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an assignment
    # Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @return [ClassroomAssignment]
    def classroom_get_an_assignment(assignment_id, opts = {})
      data, _status_code, _headers = classroom_get_an_assignment_with_http_info(assignment_id, opts)
      data
    end

    # Get an assignment
    # Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassroomAssignment, Integer, Hash)>] ClassroomAssignment data, response status code and response headers
    def classroom_get_an_assignment_with_http_info(assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_get_an_assignment ...'
      end
      # verify the required parameter 'assignment_id' is set
      if @api_client.config.client_side_validation && assignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'assignment_id' when calling ClassroomApi.classroom_get_an_assignment"
      end
      # resource path
      local_var_path = '/assignments/{assignment_id}'.sub('{' + 'assignment_id' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClassroomAssignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_get_an_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_get_an_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get assignment grades
    # Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @return [Array<ClassroomAssignmentGrade>]
    def classroom_get_assignment_grades(assignment_id, opts = {})
      data, _status_code, _headers = classroom_get_assignment_grades_with_http_info(assignment_id, opts)
      data
    end

    # Get assignment grades
    # Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClassroomAssignmentGrade>, Integer, Hash)>] Array<ClassroomAssignmentGrade> data, response status code and response headers
    def classroom_get_assignment_grades_with_http_info(assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_get_assignment_grades ...'
      end
      # verify the required parameter 'assignment_id' is set
      if @api_client.config.client_side_validation && assignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'assignment_id' when calling ClassroomApi.classroom_get_assignment_grades"
      end
      # resource path
      local_var_path = '/assignments/{assignment_id}/grades'.sub('{' + 'assignment_id' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ClassroomAssignmentGrade>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_get_assignment_grades",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_get_assignment_grades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accepted assignments for an assignment
    # Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<ClassroomAcceptedAssignment>]
    def classroom_list_accepted_assigments_for_an_assignment(assignment_id, opts = {})
      data, _status_code, _headers = classroom_list_accepted_assigments_for_an_assignment_with_http_info(assignment_id, opts)
      data
    end

    # List accepted assignments for an assignment
    # Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
    # @param assignment_id [Integer] The unique identifier of the classroom assignment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<ClassroomAcceptedAssignment>, Integer, Hash)>] Array<ClassroomAcceptedAssignment> data, response status code and response headers
    def classroom_list_accepted_assigments_for_an_assignment_with_http_info(assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_list_accepted_assigments_for_an_assignment ...'
      end
      # verify the required parameter 'assignment_id' is set
      if @api_client.config.client_side_validation && assignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'assignment_id' when calling ClassroomApi.classroom_list_accepted_assigments_for_an_assignment"
      end
      # resource path
      local_var_path = '/assignments/{assignment_id}/accepted_assignments'.sub('{' + 'assignment_id' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ClassroomAcceptedAssignment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_list_accepted_assigments_for_an_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_list_accepted_assigments_for_an_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List assignments for a classroom
    # Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
    # @param classroom_id [Integer] The unique identifier of the classroom.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<SimpleClassroomAssignment>]
    def classroom_list_assignments_for_a_classroom(classroom_id, opts = {})
      data, _status_code, _headers = classroom_list_assignments_for_a_classroom_with_http_info(classroom_id, opts)
      data
    end

    # List assignments for a classroom
    # Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
    # @param classroom_id [Integer] The unique identifier of the classroom.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<SimpleClassroomAssignment>, Integer, Hash)>] Array<SimpleClassroomAssignment> data, response status code and response headers
    def classroom_list_assignments_for_a_classroom_with_http_info(classroom_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_list_assignments_for_a_classroom ...'
      end
      # verify the required parameter 'classroom_id' is set
      if @api_client.config.client_side_validation && classroom_id.nil?
        fail ArgumentError, "Missing the required parameter 'classroom_id' when calling ClassroomApi.classroom_list_assignments_for_a_classroom"
      end
      # resource path
      local_var_path = '/classrooms/{classroom_id}/assignments'.sub('{' + 'classroom_id' + '}', CGI.escape(classroom_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleClassroomAssignment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_list_assignments_for_a_classroom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_list_assignments_for_a_classroom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List classrooms
    # Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<SimpleClassroom>]
    def classroom_list_classrooms(opts = {})
      data, _status_code, _headers = classroom_list_classrooms_with_http_info(opts)
      data
    end

    # List classrooms
    # Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<SimpleClassroom>, Integer, Hash)>] Array<SimpleClassroom> data, response status code and response headers
    def classroom_list_classrooms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassroomApi.classroom_list_classrooms ...'
      end
      # resource path
      local_var_path = '/classrooms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SimpleClassroom>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ClassroomApi.classroom_list_classrooms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassroomApi#classroom_list_classrooms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
