=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class CodeSecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Attach a configuration to repositories
    # Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.  If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_attach_configuration_request [CodeSecurityAttachConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def code_security_attach_configuration(org, configuration_id, code_security_attach_configuration_request, opts = {})
      data, _status_code, _headers = code_security_attach_configuration_with_http_info(org, configuration_id, code_security_attach_configuration_request, opts)
      data
    end

    # Attach a configuration to repositories
    # Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.  If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_attach_configuration_request [CodeSecurityAttachConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def code_security_attach_configuration_with_http_info(org, configuration_id, code_security_attach_configuration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_attach_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_attach_configuration"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_attach_configuration"
      end
      # verify the required parameter 'code_security_attach_configuration_request' is set
      if @api_client.config.client_side_validation && code_security_attach_configuration_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_security_attach_configuration_request' when calling CodeSecurityApi.code_security_attach_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}/attach'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_security_attach_configuration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_attach_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_attach_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a code security configuration
    # Creates a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param code_security_create_configuration_request [CodeSecurityCreateConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeSecurityConfiguration]
    def code_security_create_configuration(org, code_security_create_configuration_request, opts = {})
      data, _status_code, _headers = code_security_create_configuration_with_http_info(org, code_security_create_configuration_request, opts)
      data
    end

    # Create a code security configuration
    # Creates a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param code_security_create_configuration_request [CodeSecurityCreateConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeSecurityConfiguration, Integer, Hash)>] CodeSecurityConfiguration data, response status code and response headers
    def code_security_create_configuration_with_http_info(org, code_security_create_configuration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_create_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_create_configuration"
      end
      # verify the required parameter 'code_security_create_configuration_request' is set
      if @api_client.config.client_side_validation && code_security_create_configuration_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_security_create_configuration_request' when calling CodeSecurityApi.code_security_create_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_security_create_configuration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeSecurityConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_create_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_create_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a code security configuration
    # Deletes the desired code security configuration from an organization. Repositories attached to the configuration will retain their settings but will no longer be associated with the configuration.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def code_security_delete_configuration(org, configuration_id, opts = {})
      code_security_delete_configuration_with_http_info(org, configuration_id, opts)
      nil
    end

    # Delete a code security configuration
    # Deletes the desired code security configuration from an organization. Repositories attached to the configuration will retain their settings but will no longer be associated with the configuration.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def code_security_delete_configuration_with_http_info(org, configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_delete_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_delete_configuration"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_delete_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_delete_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_delete_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a code security configuration
    # Gets a code security configuration available in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @return [CodeSecurityConfiguration]
    def code_security_get_configuration(org, configuration_id, opts = {})
      data, _status_code, _headers = code_security_get_configuration_with_http_info(org, configuration_id, opts)
      data
    end

    # Get a code security configuration
    # Gets a code security configuration available in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeSecurityConfiguration, Integer, Hash)>] CodeSecurityConfiguration data, response status code and response headers
    def code_security_get_configuration_with_http_info(org, configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_get_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_get_configuration"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_get_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CodeSecurityConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_get_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_get_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get code security configurations for an organization
    # Lists all code security configurations available in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target_type The target type of the code security configuration (default to 'all')
    # @option opts [Integer] :per_page &#39;The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;&#39;  (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @return [Array<CodeSecurityConfiguration>]
    def code_security_get_configurations_for_org(org, opts = {})
      data, _status_code, _headers = code_security_get_configurations_for_org_with_http_info(org, opts)
      data
    end

    # Get code security configurations for an organization
    # Lists all code security configurations available in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target_type The target type of the code security configuration (default to 'all')
    # @option opts [Integer] :per_page &#39;The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;&#39;  (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @return [Array<(Array<CodeSecurityConfiguration>, Integer, Hash)>] Array<CodeSecurityConfiguration> data, response status code and response headers
    def code_security_get_configurations_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_get_configurations_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_get_configurations_for_org"
      end
      allowable_values = ["global", "all"]
      if @api_client.config.client_side_validation && opts[:'target_type'] && !allowable_values.include?(opts[:'target_type'])
        fail ArgumentError, "invalid value for \"target_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'target_type'] = opts[:'target_type'] if !opts[:'target_type'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeSecurityConfiguration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_get_configurations_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_get_configurations_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default code security configurations
    # Lists the default code security configurations for an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<CodeSecurityDefaultConfigurationsInner>]
    def code_security_get_default_configurations(org, opts = {})
      data, _status_code, _headers = code_security_get_default_configurations_with_http_info(org, opts)
      data
    end

    # Get default code security configurations
    # Lists the default code security configurations for an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CodeSecurityDefaultConfigurationsInner>, Integer, Hash)>] Array<CodeSecurityDefaultConfigurationsInner> data, response status code and response headers
    def code_security_get_default_configurations_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_get_default_configurations ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_get_default_configurations"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/defaults'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeSecurityDefaultConfigurationsInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_get_default_configurations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_get_default_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get repositories associated with a code security configuration
    # Lists the repositories associated with a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :status A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.  Can be: &#x60;all&#x60;, &#x60;attached&#x60;, &#x60;attaching&#x60;, &#x60;detached&#x60;, &#x60;enforced&#x60;, &#x60;failed&#x60;, &#x60;updating&#x60; (default to 'all')
    # @return [Array<CodeSecurityConfigurationRepositories>]
    def code_security_get_repositories_for_configuration(org, configuration_id, opts = {})
      data, _status_code, _headers = code_security_get_repositories_for_configuration_with_http_info(org, configuration_id, opts)
      data
    end

    # Get repositories associated with a code security configuration
    # Lists the repositories associated with a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :status A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.  Can be: &#x60;all&#x60;, &#x60;attached&#x60;, &#x60;attaching&#x60;, &#x60;detached&#x60;, &#x60;enforced&#x60;, &#x60;failed&#x60;, &#x60;updating&#x60; (default to 'all')
    # @return [Array<(Array<CodeSecurityConfigurationRepositories>, Integer, Hash)>] Array<CodeSecurityConfigurationRepositories> data, response status code and response headers
    def code_security_get_repositories_for_configuration_with_http_info(org, configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_get_repositories_for_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_get_repositories_for_configuration"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_get_repositories_for_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CodeSecurityConfigurationRepositories>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_get_repositories_for_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_get_repositories_for_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set a code security configuration as a default for an organization
    # Sets a code security configuration as a default to be applied to new repositories in your organization.  This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_set_configuration_as_default_request [CodeSecuritySetConfigurationAsDefaultRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeSecuritySetConfigurationAsDefault200Response]
    def code_security_set_configuration_as_default(org, configuration_id, code_security_set_configuration_as_default_request, opts = {})
      data, _status_code, _headers = code_security_set_configuration_as_default_with_http_info(org, configuration_id, code_security_set_configuration_as_default_request, opts)
      data
    end

    # Set a code security configuration as a default for an organization
    # Sets a code security configuration as a default to be applied to new repositories in your organization.  This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_set_configuration_as_default_request [CodeSecuritySetConfigurationAsDefaultRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeSecuritySetConfigurationAsDefault200Response, Integer, Hash)>] CodeSecuritySetConfigurationAsDefault200Response data, response status code and response headers
    def code_security_set_configuration_as_default_with_http_info(org, configuration_id, code_security_set_configuration_as_default_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_set_configuration_as_default ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_set_configuration_as_default"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_set_configuration_as_default"
      end
      # verify the required parameter 'code_security_set_configuration_as_default_request' is set
      if @api_client.config.client_side_validation && code_security_set_configuration_as_default_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_security_set_configuration_as_default_request' when calling CodeSecurityApi.code_security_set_configuration_as_default"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}/defaults'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_security_set_configuration_as_default_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeSecuritySetConfigurationAsDefault200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_set_configuration_as_default",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_set_configuration_as_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a code security configuration
    # Updates a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_update_configuration_request [CodeSecurityUpdateConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CodeSecurityConfiguration]
    def code_security_update_configuration(org, configuration_id, code_security_update_configuration_request, opts = {})
      data, _status_code, _headers = code_security_update_configuration_with_http_info(org, configuration_id, code_security_update_configuration_request, opts)
      data
    end

    # Update a code security configuration
    # Updates a code security configuration in an organization.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param configuration_id [Integer] The unique identifier of the code security configuration.
    # @param code_security_update_configuration_request [CodeSecurityUpdateConfigurationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodeSecurityConfiguration, Integer, Hash)>] CodeSecurityConfiguration data, response status code and response headers
    def code_security_update_configuration_with_http_info(org, configuration_id, code_security_update_configuration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CodeSecurityApi.code_security_update_configuration ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling CodeSecurityApi.code_security_update_configuration"
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling CodeSecurityApi.code_security_update_configuration"
      end
      # verify the required parameter 'code_security_update_configuration_request' is set
      if @api_client.config.client_side_validation && code_security_update_configuration_request.nil?
        fail ArgumentError, "Missing the required parameter 'code_security_update_configuration_request' when calling CodeSecurityApi.code_security_update_configuration"
      end
      # resource path
      local_var_path = '/orgs/{org}/code-security/configurations/{configuration_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'configuration_id' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(code_security_update_configuration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CodeSecurityConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CodeSecurityApi.code_security_update_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CodeSecurityApi#code_security_update_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
