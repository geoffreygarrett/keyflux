=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class DependabotApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_add_selected_repo_to_org_secret(org, secret_name, repository_id, opts = {})
      dependabot_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_add_selected_repo_to_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling DependabotApi.dependabot_add_selected_repo_to_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_add_selected_repo_to_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_add_selected_repo_to_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_org_secret_request [DependabotCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dependabot_create_or_update_org_secret(org, secret_name, dependabot_create_or_update_org_secret_request, opts = {})
      data, _status_code, _headers = dependabot_create_or_update_org_secret_with_http_info(org, secret_name, dependabot_create_or_update_org_secret_request, opts)
      data
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_org_secret_request [DependabotCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def dependabot_create_or_update_org_secret_with_http_info(org, secret_name, dependabot_create_or_update_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_create_or_update_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # verify the required parameter 'dependabot_create_or_update_org_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_create_or_update_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_create_or_update_org_secret_request' when calling DependabotApi.dependabot_create_or_update_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_create_or_update_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_create_or_update_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_create_or_update_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_repo_secret_request [DependabotCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dependabot_create_or_update_repo_secret(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts = {})
      data, _status_code, _headers = dependabot_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts)
      data
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_create_or_update_repo_secret_request [DependabotCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def dependabot_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, dependabot_create_or_update_repo_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_create_or_update_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # verify the required parameter 'dependabot_create_or_update_repo_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_create_or_update_repo_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_create_or_update_repo_secret_request' when calling DependabotApi.dependabot_create_or_update_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_create_or_update_repo_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_create_or_update_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_create_or_update_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_delete_org_secret(org, secret_name, opts = {})
      dependabot_delete_org_secret_with_http_info(org, secret_name, opts)
      nil
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_delete_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_delete_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_delete_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_delete_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_delete_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_delete_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_delete_repo_secret(owner, repo, secret_name, opts = {})
      dependabot_delete_repo_secret_with_http_info(owner, repo, secret_name, opts)
      nil
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_delete_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_delete_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_delete_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_delete_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_delete_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Dependabot alert
    # OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [DependabotAlert]
    def dependabot_get_alert(owner, repo, alert_number, opts = {})
      data, _status_code, _headers = dependabot_get_alert_with_http_info(owner, repo, alert_number, opts)
      data
    end

    # Get a Dependabot alert
    # OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotAlert, Integer, Hash)>] DependabotAlert data, response status code and response headers
    def dependabot_get_alert_with_http_info(owner, repo, alert_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_alert ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_get_alert"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_get_alert"
      end
      # verify the required parameter 'alert_number' is set
      if @api_client.config.client_side_validation && alert_number.nil?
        fail ArgumentError, "Missing the required parameter 'alert_number' when calling DependabotApi.dependabot_get_alert"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'alert_number' + '}', CGI.escape(alert_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotAlert'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [DependabotPublicKey]
    def dependabot_get_org_public_key(org, opts = {})
      data, _status_code, _headers = dependabot_get_org_public_key_with_http_info(org, opts)
      data
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotPublicKey, Integer, Hash)>] DependabotPublicKey data, response status code and response headers
    def dependabot_get_org_public_key_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_org_public_key ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_get_org_public_key"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/public-key'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_org_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_org_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationDependabotSecret]
    def dependabot_get_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = dependabot_get_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationDependabotSecret, Integer, Hash)>] OrganizationDependabotSecret data, response status code and response headers
    def dependabot_get_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_get_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_get_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDependabotSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [DependabotPublicKey]
    def dependabot_get_repo_public_key(owner, repo, opts = {})
      data, _status_code, _headers = dependabot_get_repo_public_key_with_http_info(owner, repo, opts)
      data
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the repository is private.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotPublicKey, Integer, Hash)>] DependabotPublicKey data, response status code and response headers
    def dependabot_get_repo_public_key_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_repo_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_get_repo_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_get_repo_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_repo_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_repo_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [DependabotSecret]
    def dependabot_get_repo_secret(owner, repo, secret_name, opts = {})
      data, _status_code, _headers = dependabot_get_repo_secret_with_http_info(owner, repo, secret_name, opts)
      data
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotSecret, Integer, Hash)>] DependabotSecret data, response status code and response headers
    def dependabot_get_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_get_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_get_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_get_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_get_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Dependabot alerts for an enterprise
    # Lists Dependabot alerts for repositories that are owned by the specified enterprise.  The authenticated user must be a member of the enterprise to use this endpoint.  Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<DependabotAlertWithRepository>]
    def dependabot_list_alerts_for_enterprise(enterprise, opts = {})
      data, _status_code, _headers = dependabot_list_alerts_for_enterprise_with_http_info(enterprise, opts)
      data
    end

    # List Dependabot alerts for an enterprise
    # Lists Dependabot alerts for repositories that are owned by the specified enterprise.  The authenticated user must be a member of the enterprise to use this endpoint.  Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint.
    # @param enterprise [String] The slug version of the enterprise name. You can also substitute this value with the enterprise id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<DependabotAlertWithRepository>, Integer, Hash)>] Array<DependabotAlertWithRepository> data, response status code and response headers
    def dependabot_list_alerts_for_enterprise_with_http_info(enterprise, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_alerts_for_enterprise ...'
      end
      # verify the required parameter 'enterprise' is set
      if @api_client.config.client_side_validation && enterprise.nil?
        fail ArgumentError, "Missing the required parameter 'enterprise' when calling DependabotApi.dependabot_list_alerts_for_enterprise"
      end
      allowable_values = ["development", "runtime"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] > 100
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_enterprise, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] < 1
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_enterprise, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] > 100
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_enterprise, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] < 1
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_enterprise, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/enterprises/{enterprise}/dependabot/alerts'.sub('{' + 'enterprise' + '}', CGI.escape(enterprise.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'ecosystem'] = opts[:'ecosystem'] if !opts[:'ecosystem'].nil?
      query_params[:'package'] = opts[:'package'] if !opts[:'package'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'last'] = opts[:'last'] if !opts[:'last'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DependabotAlertWithRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_alerts_for_enterprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_alerts_for_enterprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Dependabot alerts for an organization
    # Lists Dependabot alerts for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<DependabotAlertWithRepository>]
    def dependabot_list_alerts_for_org(org, opts = {})
      data, _status_code, _headers = dependabot_list_alerts_for_org_with_http_info(org, opts)
      data
    end

    # List Dependabot alerts for an organization
    # Lists Dependabot alerts for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<DependabotAlertWithRepository>, Integer, Hash)>] Array<DependabotAlertWithRepository> data, response status code and response headers
    def dependabot_list_alerts_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_alerts_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_list_alerts_for_org"
      end
      allowable_values = ["development", "runtime"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] > 100
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_org, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] < 1
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_org, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] > 100
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_org, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] < 1
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_org, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/orgs/{org}/dependabot/alerts'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'ecosystem'] = opts[:'ecosystem'] if !opts[:'ecosystem'].nil?
      query_params[:'package'] = opts[:'package'] if !opts[:'package'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'last'] = opts[:'last'] if !opts[:'last'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DependabotAlertWithRepository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_alerts_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_alerts_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Dependabot alerts for a repository
    # OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @return [Array<DependabotAlert>]
    def dependabot_list_alerts_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = dependabot_list_alerts_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List Dependabot alerts for a repository
    # OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60;
    # @option opts [String] :severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60;
    # @option opts [String] :ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60;
    # @option opts [String] :package A comma-separated list of package names. If specified, only alerts for these packages will be returned.
    # @option opts [String] :manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
    # @option opts [String] :scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
    # @option opts [String] :sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (default to 'created')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (default to 30)
    # @option opts [Integer] :last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results.
    # @return [Array<(Array<DependabotAlert>, Integer, Hash)>] Array<DependabotAlert> data, response status code and response headers
    def dependabot_list_alerts_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_alerts_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_list_alerts_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_list_alerts_for_repo"
      end
      allowable_values = ["development", "runtime"]
      if @api_client.config.client_side_validation && opts[:'scope'] && !allowable_values.include?(opts[:'scope'])
        fail ArgumentError, "invalid value for \"scope\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] > 100
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_repo, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'first'].nil? && opts[:'first'] < 1
        fail ArgumentError, 'invalid value for "opts[:"first"]" when calling DependabotApi.dependabot_list_alerts_for_repo, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] > 100
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_repo, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'last'].nil? && opts[:'last'] < 1
        fail ArgumentError, 'invalid value for "opts[:"last"]" when calling DependabotApi.dependabot_list_alerts_for_repo, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/alerts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'ecosystem'] = opts[:'ecosystem'] if !opts[:'ecosystem'].nil?
      query_params[:'package'] = opts[:'package'] if !opts[:'package'].nil?
      query_params[:'manifest'] = opts[:'manifest'] if !opts[:'manifest'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'last'] = opts[:'last'] if !opts[:'last'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DependabotAlert>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_alerts_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_alerts_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [DependabotListOrgSecrets200Response]
    def dependabot_list_org_secrets(org, opts = {})
      data, _status_code, _headers = dependabot_list_org_secrets_with_http_info(org, opts)
      data
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(DependabotListOrgSecrets200Response, Integer, Hash)>] DependabotListOrgSecrets200Response data, response status code and response headers
    def dependabot_list_org_secrets_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_org_secrets ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_list_org_secrets"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotListOrgSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_org_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_org_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [DependabotListRepoSecrets200Response]
    def dependabot_list_repo_secrets(owner, repo, opts = {})
      data, _status_code, _headers = dependabot_list_repo_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(DependabotListRepoSecrets200Response, Integer, Hash)>] DependabotListRepoSecrets200Response data, response status code and response headers
    def dependabot_list_repo_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_repo_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_list_repo_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_list_repo_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotListRepoSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_repo_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_repo_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def dependabot_list_selected_repos_for_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = dependabot_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def dependabot_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_list_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_list_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_list_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_list_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_list_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_remove_selected_repo_from_org_secret(org, secret_name, repository_id, opts = {})
      dependabot_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_remove_selected_repo_from_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling DependabotApi.dependabot_remove_selected_repo_from_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_remove_selected_repo_from_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_remove_selected_repo_from_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_set_selected_repos_for_org_secret_request [DependabotSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dependabot_set_selected_repos_for_org_secret(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts = {})
      dependabot_set_selected_repos_for_org_secret_with_http_info(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts)
      nil
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param dependabot_set_selected_repos_for_org_secret_request [DependabotSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dependabot_set_selected_repos_for_org_secret_with_http_info(org, secret_name, dependabot_set_selected_repos_for_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_set_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'dependabot_set_selected_repos_for_org_secret_request' is set
      if @api_client.config.client_side_validation && dependabot_set_selected_repos_for_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_set_selected_repos_for_org_secret_request' when calling DependabotApi.dependabot_set_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/dependabot/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_set_selected_repos_for_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_set_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_set_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Dependabot alert
    # The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \"[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\"  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation.
    # @param dependabot_update_alert_request [DependabotUpdateAlertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DependabotAlert]
    def dependabot_update_alert(owner, repo, alert_number, dependabot_update_alert_request, opts = {})
      data, _status_code, _headers = dependabot_update_alert_with_http_info(owner, repo, alert_number, dependabot_update_alert_request, opts)
      data
    end

    # Update a Dependabot alert
    # The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \&quot;[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param alert_number [Integer] The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation.
    # @param dependabot_update_alert_request [DependabotUpdateAlertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DependabotAlert, Integer, Hash)>] DependabotAlert data, response status code and response headers
    def dependabot_update_alert_with_http_info(owner, repo, alert_number, dependabot_update_alert_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DependabotApi.dependabot_update_alert ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling DependabotApi.dependabot_update_alert"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling DependabotApi.dependabot_update_alert"
      end
      # verify the required parameter 'alert_number' is set
      if @api_client.config.client_side_validation && alert_number.nil?
        fail ArgumentError, "Missing the required parameter 'alert_number' when calling DependabotApi.dependabot_update_alert"
      end
      # verify the required parameter 'dependabot_update_alert_request' is set
      if @api_client.config.client_side_validation && dependabot_update_alert_request.nil?
        fail ArgumentError, "Missing the required parameter 'dependabot_update_alert_request' when calling DependabotApi.dependabot_update_alert"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'alert_number' + '}', CGI.escape(alert_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dependabot_update_alert_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DependabotAlert'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DependabotApi.dependabot_update_alert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DependabotApi#dependabot_update_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
