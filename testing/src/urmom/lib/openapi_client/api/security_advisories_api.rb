=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class SecurityAdvisoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a temporary private fork
    # Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.  **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [FullRepository]
    def security_advisories_create_fork(owner, repo, ghsa_id, opts = {})
      data, _status_code, _headers = security_advisories_create_fork_with_http_info(owner, repo, ghsa_id, opts)
      data
    end

    # Create a temporary private fork
    # Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.  **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullRepository, Integer, Hash)>] FullRepository data, response status code and response headers
    def security_advisories_create_fork_with_http_info(owner, repo, ghsa_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_create_fork ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_create_fork"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_create_fork"
      end
      # verify the required parameter 'ghsa_id' is set
      if @api_client.config.client_side_validation && ghsa_id.nil?
        fail ArgumentError, "Missing the required parameter 'ghsa_id' when calling SecurityAdvisoriesApi.security_advisories_create_fork"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ghsa_id' + '}', CGI.escape(ghsa_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FullRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_create_fork",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_create_fork\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Privately report a security vulnerability
    # Report a security vulnerability to the maintainers of the repository. See \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\" for more information about private vulnerability reporting.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param private_vulnerability_report_create [PrivateVulnerabilityReportCreate] 
    # @param [Hash] opts the optional parameters
    # @return [RepositoryAdvisory]
    def security_advisories_create_private_vulnerability_report(owner, repo, private_vulnerability_report_create, opts = {})
      data, _status_code, _headers = security_advisories_create_private_vulnerability_report_with_http_info(owner, repo, private_vulnerability_report_create, opts)
      data
    end

    # Privately report a security vulnerability
    # Report a security vulnerability to the maintainers of the repository. See \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot; for more information about private vulnerability reporting.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param private_vulnerability_report_create [PrivateVulnerabilityReportCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryAdvisory, Integer, Hash)>] RepositoryAdvisory data, response status code and response headers
    def security_advisories_create_private_vulnerability_report_with_http_info(owner, repo, private_vulnerability_report_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_create_private_vulnerability_report ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_create_private_vulnerability_report"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_create_private_vulnerability_report"
      end
      # verify the required parameter 'private_vulnerability_report_create' is set
      if @api_client.config.client_side_validation && private_vulnerability_report_create.nil?
        fail ArgumentError, "Missing the required parameter 'private_vulnerability_report_create' when calling SecurityAdvisoriesApi.security_advisories_create_private_vulnerability_report"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories/reports'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(private_vulnerability_report_create)

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryAdvisory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_create_private_vulnerability_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_create_private_vulnerability_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a repository security advisory
    # Creates a new repository security advisory.  In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param repository_advisory_create [RepositoryAdvisoryCreate] 
    # @param [Hash] opts the optional parameters
    # @return [RepositoryAdvisory]
    def security_advisories_create_repository_advisory(owner, repo, repository_advisory_create, opts = {})
      data, _status_code, _headers = security_advisories_create_repository_advisory_with_http_info(owner, repo, repository_advisory_create, opts)
      data
    end

    # Create a repository security advisory
    # Creates a new repository security advisory.  In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param repository_advisory_create [RepositoryAdvisoryCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryAdvisory, Integer, Hash)>] RepositoryAdvisory data, response status code and response headers
    def security_advisories_create_repository_advisory_with_http_info(owner, repo, repository_advisory_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_create_repository_advisory ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory"
      end
      # verify the required parameter 'repository_advisory_create' is set
      if @api_client.config.client_side_validation && repository_advisory_create.nil?
        fail ArgumentError, "Missing the required parameter 'repository_advisory_create' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(repository_advisory_create)

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryAdvisory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_create_repository_advisory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_create_repository_advisory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a CVE for a repository security advisory
    # If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see \"[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\"  You may request a CVE for public repositories, but cannot do so for private repositories.  In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def security_advisories_create_repository_advisory_cve_request(owner, repo, ghsa_id, opts = {})
      data, _status_code, _headers = security_advisories_create_repository_advisory_cve_request_with_http_info(owner, repo, ghsa_id, opts)
      data
    end

    # Request a CVE for a repository security advisory
    # If you want a CVE identification number for the security vulnerability in your project, and don&#39;t already have one, you can request a CVE identification number from GitHub. For more information see \&quot;[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\&quot;  You may request a CVE for public repositories, but cannot do so for private repositories.  In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def security_advisories_create_repository_advisory_cve_request_with_http_info(owner, repo, ghsa_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_create_repository_advisory_cve_request ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory_cve_request"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory_cve_request"
      end
      # verify the required parameter 'ghsa_id' is set
      if @api_client.config.client_side_validation && ghsa_id.nil?
        fail ArgumentError, "Missing the required parameter 'ghsa_id' when calling SecurityAdvisoriesApi.security_advisories_create_repository_advisory_cve_request"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ghsa_id' + '}', CGI.escape(ghsa_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_create_repository_advisory_cve_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_create_repository_advisory_cve_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a global security advisory
    # Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [GlobalAdvisory]
    def security_advisories_get_global_advisory(ghsa_id, opts = {})
      data, _status_code, _headers = security_advisories_get_global_advisory_with_http_info(ghsa_id, opts)
      data
    end

    # Get a global security advisory
    # Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalAdvisory, Integer, Hash)>] GlobalAdvisory data, response status code and response headers
    def security_advisories_get_global_advisory_with_http_info(ghsa_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_get_global_advisory ...'
      end
      # verify the required parameter 'ghsa_id' is set
      if @api_client.config.client_side_validation && ghsa_id.nil?
        fail ArgumentError, "Missing the required parameter 'ghsa_id' when calling SecurityAdvisoriesApi.security_advisories_get_global_advisory"
      end
      # resource path
      local_var_path = '/advisories/{ghsa_id}'.sub('{' + 'ghsa_id' + '}', CGI.escape(ghsa_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GlobalAdvisory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_get_global_advisory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_get_global_advisory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository security advisory
    # Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  Anyone can access any published security advisory on a public repository.  The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [RepositoryAdvisory]
    def security_advisories_get_repository_advisory(owner, repo, ghsa_id, opts = {})
      data, _status_code, _headers = security_advisories_get_repository_advisory_with_http_info(owner, repo, ghsa_id, opts)
      data
    end

    # Get a repository security advisory
    # Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  Anyone can access any published security advisory on a public repository.  The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryAdvisory, Integer, Hash)>] RepositoryAdvisory data, response status code and response headers
    def security_advisories_get_repository_advisory_with_http_info(owner, repo, ghsa_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_get_repository_advisory ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_get_repository_advisory"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_get_repository_advisory"
      end
      # verify the required parameter 'ghsa_id' is set
      if @api_client.config.client_side_validation && ghsa_id.nil?
        fail ArgumentError, "Missing the required parameter 'ghsa_id' when calling SecurityAdvisoriesApi.security_advisories_get_repository_advisory"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories/{ghsa_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ghsa_id' + '}', CGI.escape(ghsa_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryAdvisory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_get_repository_advisory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_get_repository_advisory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List global security advisories
    # Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.  By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see \"[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\"
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
    # @option opts [String] :type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (default to 'reviewed')
    # @option opts [String] :cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
    # @option opts [SecurityAdvisoryEcosystems] :ecosystem If specified, only advisories for these ecosystems will be returned.
    # @option opts [String] :severity If specified, only advisories with these severities will be returned.
    # @option opts [SecurityAdvisoriesListGlobalAdvisoriesCwesParameter] :cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60;
    # @option opts [Boolean] :is_withdrawn Whether to only return advisories that have been withdrawn.
    # @option opts [SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter] :affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60;
    # @option opts [String] :published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :sort The property to sort the results by. (default to 'published')
    # @return [Array<GlobalAdvisory>]
    def security_advisories_list_global_advisories(opts = {})
      data, _status_code, _headers = security_advisories_list_global_advisories_with_http_info(opts)
      data
    end

    # List global security advisories
    # Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.  By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the &#x60;type&#x60; parameter in your request, with the value &#x60;malware&#x60;. For more information about the different types of security advisories, see \&quot;[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ghsa_id If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
    # @option opts [String] :type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (default to 'reviewed')
    # @option opts [String] :cve_id If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
    # @option opts [SecurityAdvisoryEcosystems] :ecosystem If specified, only advisories for these ecosystems will be returned.
    # @option opts [String] :severity If specified, only advisories with these severities will be returned.
    # @option opts [SecurityAdvisoriesListGlobalAdvisoriesCwesParameter] :cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60;
    # @option opts [Boolean] :is_withdrawn Whether to only return advisories that have been withdrawn.
    # @option opts [SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter] :affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60;
    # @option opts [String] :published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :sort The property to sort the results by. (default to 'published')
    # @return [Array<(Array<GlobalAdvisory>, Integer, Hash)>] Array<GlobalAdvisory> data, response status code and response headers
    def security_advisories_list_global_advisories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_list_global_advisories ...'
      end
      allowable_values = ["reviewed", "malware", "unreviewed"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      allowable_values = ["unknown", "low", "medium", "high", "critical"]
      if @api_client.config.client_side_validation && opts[:'severity'] && !allowable_values.include?(opts[:'severity'])
        fail ArgumentError, "invalid value for \"severity\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_global_advisories, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_global_advisories, must be greater than or equal to 1.'
      end

      allowable_values = ["updated", "published"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/advisories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ghsa_id'] = opts[:'ghsa_id'] if !opts[:'ghsa_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cve_id'] = opts[:'cve_id'] if !opts[:'cve_id'].nil?
      query_params[:'ecosystem'] = opts[:'ecosystem'] if !opts[:'ecosystem'].nil?
      query_params[:'severity'] = opts[:'severity'] if !opts[:'severity'].nil?
      query_params[:'cwes'] = opts[:'cwes'] if !opts[:'cwes'].nil?
      query_params[:'is_withdrawn'] = opts[:'is_withdrawn'] if !opts[:'is_withdrawn'].nil?
      query_params[:'affects'] = opts[:'affects'] if !opts[:'affects'].nil?
      query_params[:'published'] = opts[:'published'] if !opts[:'published'].nil?
      query_params[:'updated'] = opts[:'updated'] if !opts[:'updated'].nil?
      query_params[:'modified'] = opts[:'modified'] if !opts[:'modified'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GlobalAdvisory>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_list_global_advisories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_list_global_advisories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository security advisories for an organization
    # Lists repository security advisories for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property to sort the results by. (default to 'created')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :per_page The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state Filter by the state of the repository advisories. Only advisories of this state will be returned.
    # @return [Array<RepositoryAdvisory>]
    def security_advisories_list_org_repository_advisories(org, opts = {})
      data, _status_code, _headers = security_advisories_list_org_repository_advisories_with_http_info(org, opts)
      data
    end

    # List repository security advisories for an organization
    # Lists repository security advisories for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property to sort the results by. (default to 'created')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :per_page The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state Filter by the state of the repository advisories. Only advisories of this state will be returned.
    # @return [Array<(Array<RepositoryAdvisory>, Integer, Hash)>] Array<RepositoryAdvisory> data, response status code and response headers
    def security_advisories_list_org_repository_advisories_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_list_org_repository_advisories ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling SecurityAdvisoriesApi.security_advisories_list_org_repository_advisories"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "published"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_org_repository_advisories, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_org_repository_advisories, must be greater than or equal to 1.'
      end

      allowable_values = ["triage", "draft", "published", "closed"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/security-advisories'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RepositoryAdvisory>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_list_org_repository_advisories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_list_org_repository_advisories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository security advisories
    # Lists security advisories in a repository.  The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property to sort the results by. (default to 'created')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :per_page The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state Filter by state of the repository advisories. Only advisories of this state will be returned.
    # @return [Array<RepositoryAdvisory>]
    def security_advisories_list_repository_advisories(owner, repo, opts = {})
      data, _status_code, _headers = security_advisories_list_repository_advisories_with_http_info(owner, repo, opts)
      data
    end

    # List repository security advisories
    # Lists security advisories in a repository.  The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @option opts [String] :sort The property to sort the results by. (default to 'created')
    # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
    # @option opts [Integer] :per_page The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state Filter by state of the repository advisories. Only advisories of this state will be returned.
    # @return [Array<(Array<RepositoryAdvisory>, Integer, Hash)>] Array<RepositoryAdvisory> data, response status code and response headers
    def security_advisories_list_repository_advisories_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_list_repository_advisories ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_list_repository_advisories"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_list_repository_advisories"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["created", "updated", "published"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_repository_advisories, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling SecurityAdvisoriesApi.security_advisories_list_repository_advisories, must be greater than or equal to 1.'
      end

      allowable_values = ["triage", "draft", "published", "closed"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RepositoryAdvisory>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_list_repository_advisories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_list_repository_advisories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a repository security advisory
    # Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param repository_advisory_update [RepositoryAdvisoryUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [RepositoryAdvisory]
    def security_advisories_update_repository_advisory(owner, repo, ghsa_id, repository_advisory_update, opts = {})
      data, _status_code, _headers = security_advisories_update_repository_advisory_with_http_info(owner, repo, ghsa_id, repository_advisory_update, opts)
      data
    end

    # Update a repository security advisory
    # Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param ghsa_id [String] The GHSA (GitHub Security Advisory) identifier of the advisory.
    # @param repository_advisory_update [RepositoryAdvisoryUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryAdvisory, Integer, Hash)>] RepositoryAdvisory data, response status code and response headers
    def security_advisories_update_repository_advisory_with_http_info(owner, repo, ghsa_id, repository_advisory_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityAdvisoriesApi.security_advisories_update_repository_advisory ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling SecurityAdvisoriesApi.security_advisories_update_repository_advisory"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling SecurityAdvisoriesApi.security_advisories_update_repository_advisory"
      end
      # verify the required parameter 'ghsa_id' is set
      if @api_client.config.client_side_validation && ghsa_id.nil?
        fail ArgumentError, "Missing the required parameter 'ghsa_id' when calling SecurityAdvisoriesApi.security_advisories_update_repository_advisory"
      end
      # verify the required parameter 'repository_advisory_update' is set
      if @api_client.config.client_side_validation && repository_advisory_update.nil?
        fail ArgumentError, "Missing the required parameter 'repository_advisory_update' when calling SecurityAdvisoriesApi.security_advisories_update_repository_advisory"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/security-advisories/{ghsa_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'ghsa_id' + '}', CGI.escape(ghsa_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(repository_advisory_update)

      # return_type
      return_type = opts[:debug_return_type] || 'RepositoryAdvisory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SecurityAdvisoriesApi.security_advisories_update_repository_advisory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityAdvisoriesApi#security_advisories_update_repository_advisory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
