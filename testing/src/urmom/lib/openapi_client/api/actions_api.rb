=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class ActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add custom labels to a self-hosted runner for an organization
    # Adds custom labels to a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_add_custom_labels_to_self_hosted_runner_for_org_request [ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_add_custom_labels_to_self_hosted_runner_for_org(org, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts = {})
      data, _status_code, _headers = actions_add_custom_labels_to_self_hosted_runner_for_org_with_http_info(org, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts)
      data
    end

    # Add custom labels to a self-hosted runner for an organization
    # Adds custom labels to a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_add_custom_labels_to_self_hosted_runner_for_org_request [ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_add_custom_labels_to_self_hosted_runner_for_org_with_http_info(org, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # verify the required parameter 'actions_add_custom_labels_to_self_hosted_runner_for_org_request' is set
      if @api_client.config.client_side_validation && actions_add_custom_labels_to_self_hosted_runner_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_add_custom_labels_to_self_hosted_runner_for_org_request' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_add_custom_labels_to_self_hosted_runner_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_custom_labels_to_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom labels to a self-hosted runner for a repository
    # Adds custom labels to a self-hosted runner configured in a repository.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_add_custom_labels_to_self_hosted_runner_for_org_request [ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_add_custom_labels_to_self_hosted_runner_for_repo(owner, repo, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts = {})
      data, _status_code, _headers = actions_add_custom_labels_to_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts)
      data
    end

    # Add custom labels to a self-hosted runner for a repository
    # Adds custom labels to a self-hosted runner configured in a repository.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_add_custom_labels_to_self_hosted_runner_for_org_request [ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_add_custom_labels_to_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, actions_add_custom_labels_to_self_hosted_runner_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'actions_add_custom_labels_to_self_hosted_runner_for_org_request' is set
      if @api_client.config.client_side_validation && actions_add_custom_labels_to_self_hosted_runner_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_add_custom_labels_to_self_hosted_runner_for_org_request' when calling ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_add_custom_labels_to_self_hosted_runner_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_custom_labels_to_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_custom_labels_to_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_add_selected_repo_to_org_secret(org, secret_name, repository_id, opts = {})
      actions_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Add selected repository to an organization secret
    # Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_add_selected_repo_to_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_selected_repo_to_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_add_selected_repo_to_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_selected_repo_to_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_selected_repo_to_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add selected repository to an organization variable
    # Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_add_selected_repo_to_org_variable(org, name, repository_id, opts = {})
      actions_add_selected_repo_to_org_variable_with_http_info(org, name, repository_id, opts)
      nil
    end

    # Add selected repository to an organization variable
    # Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_add_selected_repo_to_org_variable_with_http_info(org, name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_add_selected_repo_to_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_add_selected_repo_to_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_add_selected_repo_to_org_variable"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_add_selected_repo_to_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_add_selected_repo_to_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_add_selected_repo_to_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve a workflow run for a fork pull request
    # Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_approve_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_approve_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Approve a workflow run for a fork pull request
    # Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_approve_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_approve_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_approve_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_approve_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_approve_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/approve'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_approve_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_approve_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a workflow run
    # Cancels a workflow run using its `id`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_cancel_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_cancel_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Cancel a workflow run
    # Cancels a workflow run using its &#x60;id&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_cancel_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_cancel_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_cancel_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_cancel_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_cancel_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an environment variable
    # Create an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param actions_create_repo_variable_request [ActionsCreateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_environment_variable(owner, repo, environment_name, actions_create_repo_variable_request, opts = {})
      data, _status_code, _headers = actions_create_environment_variable_with_http_info(owner, repo, environment_name, actions_create_repo_variable_request, opts)
      data
    end

    # Create an environment variable
    # Create an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param actions_create_repo_variable_request [ActionsCreateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_environment_variable_with_http_info(owner, repo, environment_name, actions_create_repo_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_environment_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_environment_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_environment_variable"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_create_environment_variable"
      end
      # verify the required parameter 'actions_create_repo_variable_request' is set
      if @api_client.config.client_side_validation && actions_create_repo_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_repo_variable_request' when calling ActionsApi.actions_create_environment_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/variables'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_repo_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an environment secret
    # Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_environment_secret_request [ActionsCreateOrUpdateEnvironmentSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_environment_secret(owner, repo, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_environment_secret_with_http_info(owner, repo, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts)
      data
    end

    # Create or update an environment secret
    # Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_environment_secret_request [ActionsCreateOrUpdateEnvironmentSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_environment_secret_with_http_info(owner, repo, environment_name, secret_name, actions_create_or_update_environment_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_environment_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # verify the required parameter 'actions_create_or_update_environment_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_environment_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_environment_secret_request' when calling ActionsApi.actions_create_or_update_environment_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_environment_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_org_secret_request [ActionsCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_org_secret(org, secret_name, actions_create_or_update_org_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_org_secret_with_http_info(org, secret_name, actions_create_or_update_org_secret_request, opts)
      data
    end

    # Create or update an organization secret
    # Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_org_secret_request [ActionsCreateOrUpdateOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_org_secret_with_http_info(org, secret_name, actions_create_or_update_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # verify the required parameter 'actions_create_or_update_org_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_org_secret_request' when calling ActionsApi.actions_create_or_update_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_repo_secret_request [ActionsCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_or_update_repo_secret(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts = {})
      data, _status_code, _headers = actions_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts)
      data
    end

    # Create or update a repository secret
    # Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_create_or_update_repo_secret_request [ActionsCreateOrUpdateRepoSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_or_update_repo_secret_with_http_info(owner, repo, secret_name, actions_create_or_update_repo_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_or_update_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # verify the required parameter 'actions_create_or_update_repo_secret_request' is set
      if @api_client.config.client_side_validation && actions_create_or_update_repo_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_or_update_repo_secret_request' when calling ActionsApi.actions_create_or_update_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_or_update_repo_secret_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_or_update_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_or_update_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an organization variable
    # Creates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_create_org_variable_request [ActionsCreateOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_org_variable(org, actions_create_org_variable_request, opts = {})
      data, _status_code, _headers = actions_create_org_variable_with_http_info(org, actions_create_org_variable_request, opts)
      data
    end

    # Create an organization variable
    # Creates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_create_org_variable_request [ActionsCreateOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_org_variable_with_http_info(org, actions_create_org_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_org_variable"
      end
      # verify the required parameter 'actions_create_org_variable_request' is set
      if @api_client.config.client_side_validation && actions_create_org_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_org_variable_request' when calling ActionsApi.actions_create_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_org_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration token for an organization
    # Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_registration_token_for_org(org, opts = {})
      data, _status_code, _headers = actions_create_registration_token_for_org_with_http_info(org, opts)
      data
    end

    # Create a registration token for an organization
    # Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_registration_token_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_registration_token_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_registration_token_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/registration-token'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_registration_token_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_registration_token_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration token for a repository
    # Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_registration_token_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_create_registration_token_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Create a registration token for a repository
    # Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_registration_token_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_registration_token_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_registration_token_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_registration_token_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/registration-token'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_registration_token_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_registration_token_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remove token for an organization
    # Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_remove_token_for_org(org, opts = {})
      data, _status_code, _headers = actions_create_remove_token_for_org_with_http_info(org, opts)
      data
    end

    # Create a remove token for an organization
    # Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_remove_token_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_remove_token_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_create_remove_token_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/remove-token'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_remove_token_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_remove_token_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remove token for a repository
    # Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationToken]
    def actions_create_remove_token_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_create_remove_token_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Create a remove token for a repository
    # Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an repository. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationToken, Integer, Hash)>] AuthenticationToken data, response status code and response headers
    def actions_create_remove_token_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_remove_token_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_remove_token_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_remove_token_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/remove-token'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthenticationToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_remove_token_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_remove_token_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a repository variable
    # Creates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_create_repo_variable_request [ActionsCreateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_create_repo_variable(owner, repo, actions_create_repo_variable_request, opts = {})
      data, _status_code, _headers = actions_create_repo_variable_with_http_info(owner, repo, actions_create_repo_variable_request, opts)
      data
    end

    # Create a repository variable
    # Creates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_create_repo_variable_request [ActionsCreateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_create_repo_variable_with_http_info(owner, repo, actions_create_repo_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_repo_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_repo_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_repo_variable"
      end
      # verify the required parameter 'actions_create_repo_variable_request' is set
      if @api_client.config.client_side_validation && actions_create_repo_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_repo_variable_request' when calling ActionsApi.actions_create_repo_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/variables'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_repo_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_repo_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_repo_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a workflow dispatch event
    # You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param actions_create_workflow_dispatch_request [ActionsCreateWorkflowDispatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_create_workflow_dispatch(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts = {})
      actions_create_workflow_dispatch_with_http_info(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts)
      nil
    end

    # Create a workflow dispatch event
    # You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param actions_create_workflow_dispatch_request [ActionsCreateWorkflowDispatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_create_workflow_dispatch_with_http_info(owner, repo, workflow_id, actions_create_workflow_dispatch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_create_workflow_dispatch ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # verify the required parameter 'actions_create_workflow_dispatch_request' is set
      if @api_client.config.client_side_validation && actions_create_workflow_dispatch_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_workflow_dispatch_request' when calling ActionsApi.actions_create_workflow_dispatch"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_workflow_dispatch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_create_workflow_dispatch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_create_workflow_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a GitHub Actions cache for a repository (using a cache ID)
    # Deletes a GitHub Actions cache for a repository, using a cache ID.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param cache_id [Integer] The unique identifier of the GitHub Actions cache.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_actions_cache_by_id(owner, repo, cache_id, opts = {})
      actions_delete_actions_cache_by_id_with_http_info(owner, repo, cache_id, opts)
      nil
    end

    # Delete a GitHub Actions cache for a repository (using a cache ID)
    # Deletes a GitHub Actions cache for a repository, using a cache ID.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param cache_id [Integer] The unique identifier of the GitHub Actions cache.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_actions_cache_by_id_with_http_info(owner, repo, cache_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_actions_cache_by_id ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # verify the required parameter 'cache_id' is set
      if @api_client.config.client_side_validation && cache_id.nil?
        fail ArgumentError, "Missing the required parameter 'cache_id' when calling ActionsApi.actions_delete_actions_cache_by_id"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches/{cache_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'cache_id' + '}', CGI.escape(cache_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_actions_cache_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_actions_cache_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete GitHub Actions caches for a repository (using a cache key)
    # Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param key [String] A key for identifying the cache.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [ActionsCacheList]
    def actions_delete_actions_cache_by_key(owner, repo, key, opts = {})
      data, _status_code, _headers = actions_delete_actions_cache_by_key_with_http_info(owner, repo, key, opts)
      data
    end

    # Delete GitHub Actions caches for a repository (using a cache key)
    # Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param key [String] A key for identifying the cache.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @return [Array<(ActionsCacheList, Integer, Hash)>] ActionsCacheList data, response status code and response headers
    def actions_delete_actions_cache_by_key_with_http_info(owner, repo, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_actions_cache_by_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ActionsApi.actions_delete_actions_cache_by_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsCacheList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_actions_cache_by_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_actions_cache_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an artifact
    # Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_artifact(owner, repo, artifact_id, opts = {})
      actions_delete_artifact_with_http_info(owner, repo, artifact_id, opts)
      nil
    end

    # Delete an artifact
    # Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_artifact_with_http_info(owner, repo, artifact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_delete_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an environment secret
    # Deletes a secret in an environment using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_environment_secret(owner, repo, environment_name, secret_name, opts = {})
      actions_delete_environment_secret_with_http_info(owner, repo, environment_name, secret_name, opts)
      nil
    end

    # Delete an environment secret
    # Deletes a secret in an environment using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_environment_secret_with_http_info(owner, repo, environment_name, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_environment_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_environment_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_delete_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_environment_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an environment variable
    # Deletes an environment variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_environment_variable(owner, repo, name, environment_name, opts = {})
      actions_delete_environment_variable_with_http_info(owner, repo, name, environment_name, opts)
      nil
    end

    # Delete an environment variable
    # Deletes an environment variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_environment_variable_with_http_info(owner, repo, name, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_environment_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_environment_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_environment_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_delete_environment_variable"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_delete_environment_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_org_secret(org, secret_name, opts = {})
      actions_delete_org_secret_with_http_info(org, secret_name, opts)
      nil
    end

    # Delete an organization secret
    # Deletes a secret in an organization using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization variable
    # Deletes an organization variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_org_variable(org, name, opts = {})
      actions_delete_org_variable_with_http_info(org, name, opts)
      nil
    end

    # Delete an organization variable
    # Deletes an organization variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_org_variable_with_http_info(org, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_delete_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_repo_secret(owner, repo, secret_name, opts = {})
      actions_delete_repo_secret_with_http_info(owner, repo, secret_name, opts)
      nil
    end

    # Delete a repository secret
    # Deletes a secret in a repository using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_delete_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository variable
    # Deletes a repository variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_repo_variable(owner, repo, name, opts = {})
      actions_delete_repo_variable_with_http_info(owner, repo, name, opts)
      nil
    end

    # Delete a repository variable
    # Deletes a repository variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_repo_variable_with_http_info(owner, repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_repo_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_repo_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_repo_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_delete_repo_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_repo_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_repo_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner from an organization
    # Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_self_hosted_runner_from_org(org, runner_id, opts = {})
      actions_delete_self_hosted_runner_from_org_with_http_info(org, runner_id, opts)
      nil
    end

    # Delete a self-hosted runner from an organization
    # Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_self_hosted_runner_from_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_self_hosted_runner_from_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_delete_self_hosted_runner_from_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_delete_self_hosted_runner_from_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_self_hosted_runner_from_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_self_hosted_runner_from_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a self-hosted runner from a repository
    # Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_self_hosted_runner_from_repo(owner, repo, runner_id, opts = {})
      actions_delete_self_hosted_runner_from_repo_with_http_info(owner, repo, runner_id, opts)
      nil
    end

    # Delete a self-hosted runner from a repository
    # Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_self_hosted_runner_from_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_self_hosted_runner_from_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_delete_self_hosted_runner_from_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_self_hosted_runner_from_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_self_hosted_runner_from_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a workflow run
    # Deletes a specific workflow run.  Anyone with write access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_workflow_run(owner, repo, run_id, opts = {})
      actions_delete_workflow_run_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Delete a workflow run
    # Deletes a specific workflow run.  Anyone with write access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_delete_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete workflow run logs
    # Deletes all logs for a workflow run.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_delete_workflow_run_logs(owner, repo, run_id, opts = {})
      actions_delete_workflow_run_logs_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Delete workflow run logs
    # Deletes all logs for a workflow run.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_delete_workflow_run_logs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_delete_workflow_run_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_delete_workflow_run_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_delete_workflow_run_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_delete_workflow_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a selected repository for GitHub Actions in an organization
    # Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_disable_selected_repository_github_actions_organization(org, repository_id, opts = {})
      actions_disable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts)
      nil
    end

    # Disable a selected repository for GitHub Actions in an organization
    # Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_disable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_disable_selected_repository_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_disable_selected_repository_github_actions_organization"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_disable_selected_repository_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_disable_selected_repository_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_disable_selected_repository_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a workflow
    # Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_disable_workflow(owner, repo, workflow_id, opts = {})
      actions_disable_workflow_with_http_info(owner, repo, workflow_id, opts)
      nil
    end

    # Disable a workflow
    # Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_disable_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_disable_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_disable_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_disable_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_disable_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_disable_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_disable_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download an artifact
    # Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param archive_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_artifact(owner, repo, artifact_id, archive_format, opts = {})
      actions_download_artifact_with_http_info(owner, repo, artifact_id, archive_format, opts)
      nil
    end

    # Download an artifact
    # Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param archive_format [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_artifact_with_http_info(owner, repo, artifact_id, archive_format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_download_artifact"
      end
      # verify the required parameter 'archive_format' is set
      if @api_client.config.client_side_validation && archive_format.nil?
        fail ArgumentError, "Missing the required parameter 'archive_format' when calling ActionsApi.actions_download_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s)).sub('{' + 'archive_format' + '}', CGI.escape(archive_format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download job logs for a workflow run
    # Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_job_logs_for_workflow_run(owner, repo, job_id, opts = {})
      actions_download_job_logs_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      nil
    end

    # Download job logs for a workflow run
    # Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_job_logs_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_job_logs_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_download_job_logs_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_job_logs_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_job_logs_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download workflow run attempt logs
    # Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_workflow_run_attempt_logs(owner, repo, run_id, attempt_number, opts = {})
      actions_download_workflow_run_attempt_logs_with_http_info(owner, repo, run_id, attempt_number, opts)
      nil
    end

    # Download workflow run attempt logs
    # Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_workflow_run_attempt_logs_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_workflow_run_attempt_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_download_workflow_run_attempt_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_workflow_run_attempt_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_workflow_run_attempt_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download workflow run logs
    # Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_download_workflow_run_logs(owner, repo, run_id, opts = {})
      actions_download_workflow_run_logs_with_http_info(owner, repo, run_id, opts)
      nil
    end

    # Download workflow run logs
    # Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_download_workflow_run_logs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_download_workflow_run_logs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_download_workflow_run_logs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/logs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_download_workflow_run_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_download_workflow_run_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a selected repository for GitHub Actions in an organization
    # Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_enable_selected_repository_github_actions_organization(org, repository_id, opts = {})
      actions_enable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts)
      nil
    end

    # Enable a selected repository for GitHub Actions in an organization
    # Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param repository_id [Integer] The unique identifier of the repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_enable_selected_repository_github_actions_organization_with_http_info(org, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_enable_selected_repository_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_enable_selected_repository_github_actions_organization"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_enable_selected_repository_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_enable_selected_repository_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_enable_selected_repository_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a workflow
    # Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_enable_workflow(owner, repo, workflow_id, opts = {})
      actions_enable_workflow_with_http_info(owner, repo, workflow_id, opts)
      nil
    end

    # Enable a workflow
    # Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_enable_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_enable_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_enable_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_enable_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_enable_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_enable_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_enable_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Force cancel a workflow run
    # Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_force_cancel_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_force_cancel_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Force cancel a workflow run
    # Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an &#x60;always()&#x60; condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel&#x60;](/rest/actions/workflow-runs#cancel-a-workflow-run).  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_force_cancel_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_force_cancel_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_force_cancel_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_force_cancel_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_force_cancel_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_force_cancel_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_force_cancel_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create configuration for a just-in-time runner for an organization
    # Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the organization.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_generate_runner_jitconfig_for_org_request [ActionsGenerateRunnerJitconfigForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsGenerateRunnerJitconfigForOrg201Response]
    def actions_generate_runner_jitconfig_for_org(org, actions_generate_runner_jitconfig_for_org_request, opts = {})
      data, _status_code, _headers = actions_generate_runner_jitconfig_for_org_with_http_info(org, actions_generate_runner_jitconfig_for_org_request, opts)
      data
    end

    # Create configuration for a just-in-time runner for an organization
    # Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the organization.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_generate_runner_jitconfig_for_org_request [ActionsGenerateRunnerJitconfigForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGenerateRunnerJitconfigForOrg201Response, Integer, Hash)>] ActionsGenerateRunnerJitconfigForOrg201Response data, response status code and response headers
    def actions_generate_runner_jitconfig_for_org_with_http_info(org, actions_generate_runner_jitconfig_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_generate_runner_jitconfig_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_generate_runner_jitconfig_for_org"
      end
      # verify the required parameter 'actions_generate_runner_jitconfig_for_org_request' is set
      if @api_client.config.client_side_validation && actions_generate_runner_jitconfig_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_generate_runner_jitconfig_for_org_request' when calling ActionsApi.actions_generate_runner_jitconfig_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/generate-jitconfig'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_generate_runner_jitconfig_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGenerateRunnerJitconfigForOrg201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_generate_runner_jitconfig_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_generate_runner_jitconfig_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create configuration for a just-in-time runner for a repository
    # Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the repository.  OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_generate_runner_jitconfig_for_org_request [ActionsGenerateRunnerJitconfigForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsGenerateRunnerJitconfigForOrg201Response]
    def actions_generate_runner_jitconfig_for_repo(owner, repo, actions_generate_runner_jitconfig_for_org_request, opts = {})
      data, _status_code, _headers = actions_generate_runner_jitconfig_for_repo_with_http_info(owner, repo, actions_generate_runner_jitconfig_for_org_request, opts)
      data
    end

    # Create configuration for a just-in-time runner for a repository
    # Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the repository.  OAuth tokens and personal access tokens (classic) need the&#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_generate_runner_jitconfig_for_org_request [ActionsGenerateRunnerJitconfigForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGenerateRunnerJitconfigForOrg201Response, Integer, Hash)>] ActionsGenerateRunnerJitconfigForOrg201Response data, response status code and response headers
    def actions_generate_runner_jitconfig_for_repo_with_http_info(owner, repo, actions_generate_runner_jitconfig_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_generate_runner_jitconfig_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_generate_runner_jitconfig_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_generate_runner_jitconfig_for_repo"
      end
      # verify the required parameter 'actions_generate_runner_jitconfig_for_org_request' is set
      if @api_client.config.client_side_validation && actions_generate_runner_jitconfig_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_generate_runner_jitconfig_for_org_request' when calling ActionsApi.actions_generate_runner_jitconfig_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/generate-jitconfig'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_generate_runner_jitconfig_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGenerateRunnerJitconfigForOrg201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_generate_runner_jitconfig_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_generate_runner_jitconfig_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List GitHub Actions caches for a repository
    # Lists the GitHub Actions caches for a repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :key An explicit key or prefix for identifying the cache
    # @option opts [String] :sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (default to 'last_accessed_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @return [ActionsCacheList]
    def actions_get_actions_cache_list(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_list_with_http_info(owner, repo, opts)
      data
    end

    # List GitHub Actions caches for a repository
    # Lists the GitHub Actions caches for a repository.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;.
    # @option opts [String] :key An explicit key or prefix for identifying the cache
    # @option opts [String] :sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (default to 'last_accessed_at')
    # @option opts [String] :direction The direction to sort the results by. (default to 'desc')
    # @return [Array<(ActionsCacheList, Integer, Hash)>] ActionsCacheList data, response status code and response headers
    def actions_get_actions_cache_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_list ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_actions_cache_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_actions_cache_list"
      end
      allowable_values = ["created_at", "last_accessed_at", "size_in_bytes"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/caches'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'ref'] = opts[:'ref'] if !opts[:'ref'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsCacheList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions cache usage for a repository
    # Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsCacheUsageByRepository]
    def actions_get_actions_cache_usage(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_with_http_info(owner, repo, opts)
      data
    end

    # Get GitHub Actions cache usage for a repository
    # Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsCacheUsageByRepository, Integer, Hash)>] ActionsCacheUsageByRepository data, response status code and response headers
    def actions_get_actions_cache_usage_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_actions_cache_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_actions_cache_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/cache/usage'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsCacheUsageByRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repositories with GitHub Actions cache usage for an organization
    # Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsGetActionsCacheUsageByRepoForOrg200Response]
    def actions_get_actions_cache_usage_by_repo_for_org(org, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_by_repo_for_org_with_http_info(org, opts)
      data
    end

    # List repositories with GitHub Actions cache usage for an organization
    # Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsGetActionsCacheUsageByRepoForOrg200Response, Integer, Hash)>] ActionsGetActionsCacheUsageByRepoForOrg200Response data, response status code and response headers
    def actions_get_actions_cache_usage_by_repo_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage_by_repo_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_actions_cache_usage_by_repo_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/cache/usage-by-repository'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetActionsCacheUsageByRepoForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage_by_repo_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage_by_repo_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions cache usage for an organization
    # Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsCacheUsageOrgEnterprise]
    def actions_get_actions_cache_usage_for_org(org, opts = {})
      data, _status_code, _headers = actions_get_actions_cache_usage_for_org_with_http_info(org, opts)
      data
    end

    # Get GitHub Actions cache usage for an organization
    # Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsCacheUsageOrgEnterprise, Integer, Hash)>] ActionsCacheUsageOrgEnterprise data, response status code and response headers
    def actions_get_actions_cache_usage_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_actions_cache_usage_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_actions_cache_usage_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/cache/usage'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsCacheUsageOrgEnterprise'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_actions_cache_usage_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_actions_cache_usage_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get allowed actions and reusable workflows for an organization
    # Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [SelectedActions]
    def actions_get_allowed_actions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_allowed_actions_organization_with_http_info(org, opts)
      data
    end

    # Get allowed actions and reusable workflows for an organization
    # Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelectedActions, Integer, Hash)>] SelectedActions data, response status code and response headers
    def actions_get_allowed_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_allowed_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_allowed_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/selected-actions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SelectedActions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_allowed_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_allowed_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get allowed actions and reusable workflows for a repository
    # Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [SelectedActions]
    def actions_get_allowed_actions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_allowed_actions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get allowed actions and reusable workflows for a repository
    # Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelectedActions, Integer, Hash)>] SelectedActions data, response status code and response headers
    def actions_get_allowed_actions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_allowed_actions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_allowed_actions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_allowed_actions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/selected-actions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SelectedActions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_allowed_actions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_allowed_actions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an artifact
    # Gets a specific artifact for a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Artifact]
    def actions_get_artifact(owner, repo, artifact_id, opts = {})
      data, _status_code, _headers = actions_get_artifact_with_http_info(owner, repo, artifact_id, opts)
      data
    end

    # Get an artifact
    # Gets a specific artifact for a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param artifact_id [Integer] The unique identifier of the artifact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Artifact, Integer, Hash)>] Artifact data, response status code and response headers
    def actions_get_artifact_with_http_info(owner, repo, artifact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_artifact ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_artifact"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_artifact"
      end
      # verify the required parameter 'artifact_id' is set
      if @api_client.config.client_side_validation && artifact_id.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_id' when calling ActionsApi.actions_get_artifact"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'artifact_id' + '}', CGI.escape(artifact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Artifact'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_artifact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the customization template for an OIDC subject claim for a repository
    # Gets the customization template for an OpenID Connect (OIDC) subject claim.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [OidcCustomSubRepo]
    def actions_get_custom_oidc_sub_claim_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # Get the customization template for an OIDC subject claim for a repository
    # Gets the customization template for an OpenID Connect (OIDC) subject claim.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OidcCustomSubRepo, Integer, Hash)>] OidcCustomSubRepo data, response status code and response headers
    def actions_get_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_custom_oidc_sub_claim_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_custom_oidc_sub_claim_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/oidc/customization/sub'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OidcCustomSubRepo'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_custom_oidc_sub_claim_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_custom_oidc_sub_claim_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an environment public key
    # Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_environment_public_key(owner, repo, environment_name, opts = {})
      data, _status_code, _headers = actions_get_environment_public_key_with_http_info(owner, repo, environment_name, opts)
      data
    end

    # Get an environment public key
    # Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_environment_public_key_with_http_info(owner, repo, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_environment_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_environment_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_environment_public_key"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_get_environment_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_environment_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_environment_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an environment secret
    # Gets a single environment secret without revealing its encrypted value.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsSecret]
    def actions_get_environment_secret(owner, repo, environment_name, secret_name, opts = {})
      data, _status_code, _headers = actions_get_environment_secret_with_http_info(owner, repo, environment_name, secret_name, opts)
      data
    end

    # Get an environment secret
    # Gets a single environment secret without revealing its encrypted value.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsSecret, Integer, Hash)>] ActionsSecret data, response status code and response headers
    def actions_get_environment_secret_with_http_info(owner, repo, environment_name, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_environment_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_environment_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_environment_secret"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_get_environment_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_environment_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_environment_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_environment_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an environment variable
    # Gets a specific variable in an environment.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [ActionsVariable]
    def actions_get_environment_variable(owner, repo, environment_name, name, opts = {})
      data, _status_code, _headers = actions_get_environment_variable_with_http_info(owner, repo, environment_name, name, opts)
      data
    end

    # Get an environment variable
    # Gets a specific variable in an environment.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsVariable, Integer, Hash)>] ActionsVariable data, response status code and response headers
    def actions_get_environment_variable_with_http_info(owner, repo, environment_name, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_environment_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_environment_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_environment_variable"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_get_environment_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_get_environment_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default workflow permissions for an organization
    # Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetDefaultWorkflowPermissions]
    def actions_get_github_actions_default_workflow_permissions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_github_actions_default_workflow_permissions_organization_with_http_info(org, opts)
      data
    end

    # Get default workflow permissions for an organization
    # Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetDefaultWorkflowPermissions, Integer, Hash)>] ActionsGetDefaultWorkflowPermissions data, response status code and response headers
    def actions_get_github_actions_default_workflow_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_default_workflow_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/workflow'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetDefaultWorkflowPermissions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_default_workflow_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_default_workflow_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default workflow permissions for a repository
    # Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGetDefaultWorkflowPermissions]
    def actions_get_github_actions_default_workflow_permissions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get default workflow permissions for a repository
    # Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGetDefaultWorkflowPermissions, Integer, Hash)>] ActionsGetDefaultWorkflowPermissions data, response status code and response headers
    def actions_get_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_default_workflow_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_github_actions_default_workflow_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/workflow'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGetDefaultWorkflowPermissions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_default_workflow_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_default_workflow_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions permissions for an organization
    # Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsOrganizationPermissions]
    def actions_get_github_actions_permissions_organization(org, opts = {})
      data, _status_code, _headers = actions_get_github_actions_permissions_organization_with_http_info(org, opts)
      data
    end

    # Get GitHub Actions permissions for an organization
    # Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsOrganizationPermissions, Integer, Hash)>] ActionsOrganizationPermissions data, response status code and response headers
    def actions_get_github_actions_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_github_actions_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsOrganizationPermissions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GitHub Actions permissions for a repository
    # Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsRepositoryPermissions]
    def actions_get_github_actions_permissions_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_github_actions_permissions_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get GitHub Actions permissions for a repository
    # Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsRepositoryPermissions, Integer, Hash)>] ActionsRepositoryPermissions data, response status code and response headers
    def actions_get_github_actions_permissions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_github_actions_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_github_actions_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_github_actions_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsRepositoryPermissions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_github_actions_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_github_actions_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a job for a workflow run
    # Gets a specific job in a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def actions_get_job_for_workflow_run(owner, repo, job_id, opts = {})
      data, _status_code, _headers = actions_get_job_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      data
    end

    # Get a job for a workflow run
    # Gets a specific job in a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def actions_get_job_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_job_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_get_job_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_job_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_job_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_org_public_key(org, opts = {})
      data, _status_code, _headers = actions_get_org_public_key_with_http_info(org, opts)
      data
    end

    # Get an organization public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_org_public_key_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_org_public_key ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_org_public_key"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/public-key'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_org_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_org_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value.  The authenticated user must have collaborator access to a repository to create, update, or read secrets  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationActionsSecret]
    def actions_get_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = actions_get_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # Get an organization secret
    # Gets a single organization secret without revealing its encrypted value.  The authenticated user must have collaborator access to a repository to create, update, or read secrets  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationActionsSecret, Integer, Hash)>] OrganizationActionsSecret data, response status code and response headers
    def actions_get_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationActionsSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization variable
    # Gets a specific variable in an organization.  The authenticated user must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationActionsVariable]
    def actions_get_org_variable(org, name, opts = {})
      data, _status_code, _headers = actions_get_org_variable_with_http_info(org, name, opts)
      data
    end

    # Get an organization variable
    # Gets a specific variable in an organization.  The authenticated user must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationActionsVariable, Integer, Hash)>] OrganizationActionsVariable data, response status code and response headers
    def actions_get_org_variable_with_http_info(org, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_get_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationActionsVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pending deployments for a workflow run
    # Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<PendingDeployment>]
    def actions_get_pending_deployments_for_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_pending_deployments_for_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get pending deployments for a workflow run
    # Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PendingDeployment>, Integer, Hash)>] Array<PendingDeployment> data, response status code and response headers
    def actions_get_pending_deployments_for_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_pending_deployments_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_pending_deployments_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PendingDeployment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_pending_deployments_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_pending_deployments_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsPublicKey]
    def actions_get_repo_public_key(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_repo_public_key_with_http_info(owner, repo, opts)
      data
    end

    # Get a repository public key
    # Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsPublicKey, Integer, Hash)>] ActionsPublicKey data, response status code and response headers
    def actions_get_repo_public_key_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_repo_public_key ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_repo_public_key"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_repo_public_key"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/public-key'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsPublicKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_repo_public_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_repo_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [ActionsSecret]
    def actions_get_repo_secret(owner, repo, secret_name, opts = {})
      data, _status_code, _headers = actions_get_repo_secret_with_http_info(owner, repo, secret_name, opts)
      data
    end

    # Get a repository secret
    # Gets a single repository secret without revealing its encrypted value.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsSecret, Integer, Hash)>] ActionsSecret data, response status code and response headers
    def actions_get_repo_secret_with_http_info(owner, repo, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_repo_secret ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_repo_secret"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_repo_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_get_repo_secret"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets/{secret_name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_repo_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_repo_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a repository variable
    # Gets a specific variable in a repository.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [ActionsVariable]
    def actions_get_repo_variable(owner, repo, name, opts = {})
      data, _status_code, _headers = actions_get_repo_variable_with_http_info(owner, repo, name, opts)
      data
    end

    # Get a repository variable
    # Gets a specific variable in a repository.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsVariable, Integer, Hash)>] ActionsVariable data, response status code and response headers
    def actions_get_repo_variable_with_http_info(owner, repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_repo_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_repo_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_repo_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_get_repo_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_repo_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_repo_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the review history for a workflow run
    # Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<EnvironmentApprovals>]
    def actions_get_reviews_for_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_reviews_for_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get the review history for a workflow run
    # Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EnvironmentApprovals>, Integer, Hash)>] Array<EnvironmentApprovals> data, response status code and response headers
    def actions_get_reviews_for_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_reviews_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_reviews_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EnvironmentApprovals>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_reviews_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_reviews_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner for an organization
    # Gets a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Runner]
    def actions_get_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_get_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # Get a self-hosted runner for an organization
    # Gets a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Runner, Integer, Hash)>] Runner data, response status code and response headers
    def actions_get_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_get_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_get_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Runner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a self-hosted runner for a repository
    # Gets a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Runner]
    def actions_get_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_get_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # Get a self-hosted runner for a repository
    # Gets a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Runner, Integer, Hash)>] Runner data, response status code and response headers
    def actions_get_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_get_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Runner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow
    # Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Workflow]
    def actions_get_workflow(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # Get a workflow
    # Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workflow, Integer, Hash)>] Workflow data, response status code and response headers
    def actions_get_workflow_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_get_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Workflow'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the level of access for workflows outside of the repository
    # Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [ActionsWorkflowAccessToRepository]
    def actions_get_workflow_access_to_repository(owner, repo, opts = {})
      data, _status_code, _headers = actions_get_workflow_access_to_repository_with_http_info(owner, repo, opts)
      data
    end

    # Get the level of access for workflows outside of the repository
    # Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsWorkflowAccessToRepository, Integer, Hash)>] ActionsWorkflowAccessToRepository data, response status code and response headers
    def actions_get_workflow_access_to_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_access_to_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_access_to_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_access_to_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/access'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsWorkflowAccessToRepository'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_access_to_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_access_to_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow run
    # Gets a specific workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [WorkflowRun]
    def actions_get_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get a workflow run
    # Gets a specific workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [Array<(WorkflowRun, Integer, Hash)>] WorkflowRun data, response status code and response headers
    def actions_get_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a workflow run attempt
    # Gets a specific workflow run attempt.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [WorkflowRun]
    def actions_get_workflow_run_attempt(owner, repo, run_id, attempt_number, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts)
      data
    end

    # Get a workflow run attempt
    # Gets a specific workflow run attempt.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @return [Array<(WorkflowRun, Integer, Hash)>] WorkflowRun data, response status code and response headers
    def actions_get_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run_attempt ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_get_workflow_run_attempt"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run_attempt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run_attempt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workflow run usage
    # Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowRunUsage]
    def actions_get_workflow_run_usage(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_run_usage_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Get workflow run usage
    # Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowRunUsage, Integer, Hash)>] WorkflowRunUsage data, response status code and response headers
    def actions_get_workflow_run_usage_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_run_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_get_workflow_run_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/timing'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowRunUsage'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_run_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_run_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workflow usage
    # Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [WorkflowUsage]
    def actions_get_workflow_usage(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_get_workflow_usage_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # Get workflow usage
    # Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkflowUsage, Integer, Hash)>] WorkflowUsage data, response status code and response headers
    def actions_get_workflow_usage_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_get_workflow_usage ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_get_workflow_usage"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_get_workflow_usage"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_get_workflow_usage"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkflowUsage'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_get_workflow_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_get_workflow_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List artifacts for a repository
    # Lists all artifacts for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :name The name field of an artifact. When specified, only artifacts with this name will be returned.
    # @return [ActionsListArtifactsForRepo200Response]
    def actions_list_artifacts_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_artifacts_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List artifacts for a repository
    # Lists all artifacts for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :name The name field of an artifact. When specified, only artifacts with this name will be returned.
    # @return [Array<(ActionsListArtifactsForRepo200Response, Integer, Hash)>] ActionsListArtifactsForRepo200Response data, response status code and response headers
    def actions_list_artifacts_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_artifacts_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_artifacts_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_artifacts_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/artifacts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListArtifactsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_artifacts_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_artifacts_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List environment secrets
    # Lists all secrets available in an environment without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationSecrets200Response]
    def actions_list_environment_secrets(owner, repo, environment_name, opts = {})
      data, _status_code, _headers = actions_list_environment_secrets_with_http_info(owner, repo, environment_name, opts)
      data
    end

    # List environment secrets
    # Lists all secrets available in an environment without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationSecrets200Response, Integer, Hash)>] ActionsListRepoOrganizationSecrets200Response data, response status code and response headers
    def actions_list_environment_secrets_with_http_info(owner, repo, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_environment_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_environment_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_environment_secrets"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_list_environment_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_environment_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_environment_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List environment variables
    # Lists all environment variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationVariables200Response]
    def actions_list_environment_variables(owner, repo, environment_name, opts = {})
      data, _status_code, _headers = actions_list_environment_variables_with_http_info(owner, repo, environment_name, opts)
      data
    end

    # List environment variables
    # Lists all environment variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationVariables200Response, Integer, Hash)>] ActionsListRepoOrganizationVariables200Response data, response status code and response headers
    def actions_list_environment_variables_with_http_info(owner, repo, environment_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_environment_variables ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_environment_variables"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_environment_variables"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_list_environment_variables"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/variables'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationVariables200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_environment_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_environment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List jobs for a workflow run
    # Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListJobsForWorkflowRunAttempt200Response]
    def actions_list_jobs_for_workflow_run(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_list_jobs_for_workflow_run_with_http_info(owner, repo, run_id, opts)
      data
    end

    # List jobs for a workflow run
    # Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (default to 'latest')
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListJobsForWorkflowRunAttempt200Response, Integer, Hash)>] ActionsListJobsForWorkflowRunAttempt200Response data, response status code and response headers
    def actions_list_jobs_for_workflow_run_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_jobs_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_jobs_for_workflow_run"
      end
      allowable_values = ["latest", "all"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListJobsForWorkflowRunAttempt200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_jobs_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_jobs_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List jobs for a workflow run attempt
    # Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListJobsForWorkflowRunAttempt200Response]
    def actions_list_jobs_for_workflow_run_attempt(owner, repo, run_id, attempt_number, opts = {})
      data, _status_code, _headers = actions_list_jobs_for_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts)
      data
    end

    # List jobs for a workflow run attempt
    # Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint  with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param attempt_number [Integer] The attempt number of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListJobsForWorkflowRunAttempt200Response, Integer, Hash)>] ActionsListJobsForWorkflowRunAttempt200Response data, response status code and response headers
    def actions_list_jobs_for_workflow_run_attempt_with_http_info(owner, repo, run_id, attempt_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_jobs_for_workflow_run_attempt ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # verify the required parameter 'attempt_number' is set
      if @api_client.config.client_side_validation && attempt_number.nil?
        fail ArgumentError, "Missing the required parameter 'attempt_number' when calling ActionsApi.actions_list_jobs_for_workflow_run_attempt"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s)).sub('{' + 'attempt_number' + '}', CGI.escape(attempt_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListJobsForWorkflowRunAttempt200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_jobs_for_workflow_run_attempt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_jobs_for_workflow_run_attempt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a self-hosted runner for an organization
    # Lists all labels for a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_list_labels_for_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_list_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # List labels for a self-hosted runner for an organization
    # Lists all labels for a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_list_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_labels_for_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_labels_for_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_labels_for_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List labels for a self-hosted runner for a repository
    # Lists all labels for a self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_list_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_list_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # List labels for a self-hosted runner for a repository
    # Lists all labels for a self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_list_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_labels_for_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_labels_for_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListOrgSecrets200Response]
    def actions_list_org_secrets(org, opts = {})
      data, _status_code, _headers = actions_list_org_secrets_with_http_info(org, opts)
      data
    end

    # List organization secrets
    # Lists all secrets available in an organization without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListOrgSecrets200Response, Integer, Hash)>] ActionsListOrgSecrets200Response data, response status code and response headers
    def actions_list_org_secrets_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_org_secrets ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_org_secrets"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListOrgSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_org_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_org_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization variables
    # Lists all organization variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListOrgVariables200Response]
    def actions_list_org_variables(org, opts = {})
      data, _status_code, _headers = actions_list_org_variables_with_http_info(org, opts)
      data
    end

    # List organization variables
    # Lists all organization variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListOrgVariables200Response, Integer, Hash)>] ActionsListOrgVariables200Response data, response status code and response headers
    def actions_list_org_variables_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_org_variables ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_org_variables"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListOrgVariables200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_org_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_org_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository organization secrets
    # Lists all organization secrets shared with a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationSecrets200Response]
    def actions_list_repo_organization_secrets(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_organization_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository organization secrets
    # Lists all organization secrets shared with a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationSecrets200Response, Integer, Hash)>] ActionsListRepoOrganizationSecrets200Response data, response status code and response headers
    def actions_list_repo_organization_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_organization_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_organization_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_organization_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/organization-secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_organization_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_organization_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository organization variables
    # Lists all organization variables shared with a repository.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationVariables200Response]
    def actions_list_repo_organization_variables(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_organization_variables_with_http_info(owner, repo, opts)
      data
    end

    # List repository organization variables
    # Lists all organization variables shared with a repository.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationVariables200Response, Integer, Hash)>] ActionsListRepoOrganizationVariables200Response data, response status code and response headers
    def actions_list_repo_organization_variables_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_organization_variables ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_organization_variables"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_organization_variables"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/organization-variables'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationVariables200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_organization_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_organization_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationSecrets200Response]
    def actions_list_repo_secrets(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_secrets_with_http_info(owner, repo, opts)
      data
    end

    # List repository secrets
    # Lists all secrets available in a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationSecrets200Response, Integer, Hash)>] ActionsListRepoOrganizationSecrets200Response data, response status code and response headers
    def actions_list_repo_secrets_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_secrets ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_secrets"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_secrets"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/secrets'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationSecrets200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository variables
    # Lists all repository variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoOrganizationVariables200Response]
    def actions_list_repo_variables(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_variables_with_http_info(owner, repo, opts)
      data
    end

    # List repository variables
    # Lists all repository variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 10)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoOrganizationVariables200Response, Integer, Hash)>] ActionsListRepoOrganizationVariables200Response data, response status code and response headers
    def actions_list_repo_variables_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_variables ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_variables"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_variables"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/variables'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoOrganizationVariables200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List repository workflows
    # Lists the workflows in a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListRepoWorkflows200Response]
    def actions_list_repo_workflows(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_repo_workflows_with_http_info(owner, repo, opts)
      data
    end

    # List repository workflows
    # Lists the workflows in a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListRepoWorkflows200Response, Integer, Hash)>] ActionsListRepoWorkflows200Response data, response status code and response headers
    def actions_list_repo_workflows_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_repo_workflows ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_repo_workflows"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_repo_workflows"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListRepoWorkflows200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_repo_workflows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_repo_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List runner applications for an organization
    # Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<RunnerApplication>]
    def actions_list_runner_applications_for_org(org, opts = {})
      data, _status_code, _headers = actions_list_runner_applications_for_org_with_http_info(org, opts)
      data
    end

    # List runner applications for an organization
    # Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.  If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RunnerApplication>, Integer, Hash)>] Array<RunnerApplication> data, response status code and response headers
    def actions_list_runner_applications_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_runner_applications_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_runner_applications_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/downloads'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RunnerApplication>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_runner_applications_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_runner_applications_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List runner applications for a repository
    # Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<RunnerApplication>]
    def actions_list_runner_applications_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_runner_applications_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List runner applications for a repository
    # Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RunnerApplication>, Integer, Hash)>] Array<RunnerApplication> data, response status code and response headers
    def actions_list_runner_applications_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_runner_applications_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_runner_applications_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_runner_applications_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/downloads'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RunnerApplication>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_runner_applications_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_runner_applications_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def actions_list_selected_repos_for_org_secret(org, secret_name, opts = {})
      data, _status_code, _headers = actions_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts)
      data
    end

    # List selected repositories for an organization secret
    # Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def actions_list_selected_repos_for_org_secret_with_http_info(org, secret_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_list_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories for an organization variable
    # Lists all repositories that can access an organization variable that is available to selected repositories.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [ActionsListSelectedReposForOrgSecret200Response]
    def actions_list_selected_repos_for_org_variable(org, name, opts = {})
      data, _status_code, _headers = actions_list_selected_repos_for_org_variable_with_http_info(org, name, opts)
      data
    end

    # List selected repositories for an organization variable
    # Lists all repositories that can access an organization variable that is available to selected repositories.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(ActionsListSelectedReposForOrgSecret200Response, Integer, Hash)>] ActionsListSelectedReposForOrgSecret200Response data, response status code and response headers
    def actions_list_selected_repos_for_org_variable_with_http_info(org, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_selected_repos_for_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_selected_repos_for_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_list_selected_repos_for_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedReposForOrgSecret200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_selected_repos_for_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_selected_repos_for_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List selected repositories enabled for GitHub Actions in an organization
    # Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response]
    def actions_list_selected_repositories_enabled_github_actions_organization(org, opts = {})
      data, _status_code, _headers = actions_list_selected_repositories_enabled_github_actions_organization_with_http_info(org, opts)
      data
    end

    # List selected repositories enabled for GitHub Actions in an organization
    # Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response, Integer, Hash)>] ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response data, response status code and response headers
    def actions_list_selected_repositories_enabled_github_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_selected_repositories_enabled_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_selected_repositories_enabled_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners for an organization
    # Lists all self-hosted runners configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of a self-hosted runner.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListSelfHostedRunnersForOrg200Response]
    def actions_list_self_hosted_runners_for_org(org, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runners_for_org_with_http_info(org, opts)
      data
    end

    # List self-hosted runners for an organization
    # Lists all self-hosted runners configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of a self-hosted runner.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListSelfHostedRunnersForOrg200Response, Integer, Hash)>] ActionsListSelfHostedRunnersForOrg200Response data, response status code and response headers
    def actions_list_self_hosted_runners_for_org_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runners_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_list_self_hosted_runners_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnersForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runners_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runners_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List self-hosted runners for a repository
    # Lists all self-hosted runners configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of a self-hosted runner.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [ActionsListSelfHostedRunnersForOrg200Response]
    def actions_list_self_hosted_runners_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_self_hosted_runners_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List self-hosted runners for a repository
    # Lists all self-hosted runners configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of a self-hosted runner.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @return [Array<(ActionsListSelfHostedRunnersForOrg200Response, Integer, Hash)>] ActionsListSelfHostedRunnersForOrg200Response data, response status code and response headers
    def actions_list_self_hosted_runners_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_self_hosted_runners_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_self_hosted_runners_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_self_hosted_runners_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListSelfHostedRunnersForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_self_hosted_runners_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_self_hosted_runners_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow run artifacts
    # Lists artifacts for a workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :name The name field of an artifact. When specified, only artifacts with this name will be returned.
    # @return [ActionsListArtifactsForRepo200Response]
    def actions_list_workflow_run_artifacts(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_list_workflow_run_artifacts_with_http_info(owner, repo, run_id, opts)
      data
    end

    # List workflow run artifacts
    # Lists artifacts for a workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [String] :name The name field of an artifact. When specified, only artifacts with this name will be returned.
    # @return [Array<(ActionsListArtifactsForRepo200Response, Integer, Hash)>] ActionsListArtifactsForRepo200Response data, response status code and response headers
    def actions_list_workflow_run_artifacts_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_run_artifacts ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_list_workflow_run_artifacts"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListArtifactsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_run_artifacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_run_artifacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow runs for a workflow
    # List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @option opts [String] :head_sha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;.
    # @return [ActionsListWorkflowRunsForRepo200Response]
    def actions_list_workflow_runs(owner, repo, workflow_id, opts = {})
      data, _status_code, _headers = actions_list_workflow_runs_with_http_info(owner, repo, workflow_id, opts)
      data
    end

    # List workflow runs for a workflow
    # List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param workflow_id [ActionsGetWorkflowWorkflowIdParameter] The ID of the workflow. You can also pass the workflow file name as a string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @option opts [String] :head_sha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;.
    # @return [Array<(ActionsListWorkflowRunsForRepo200Response, Integer, Hash)>] ActionsListWorkflowRunsForRepo200Response data, response status code and response headers
    def actions_list_workflow_runs_with_http_info(owner, repo, workflow_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_runs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_runs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_runs"
      end
      # verify the required parameter 'workflow_id' is set
      if @api_client.config.client_side_validation && workflow_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_id' when calling ActionsApi.actions_list_workflow_runs"
      end
      allowable_values = ["completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting", "pending"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'workflow_id' + '}', CGI.escape(workflow_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actor'] = opts[:'actor'] if !opts[:'actor'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'created'] = opts[:'created'] if !opts[:'created'].nil?
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?
      query_params[:'check_suite_id'] = opts[:'check_suite_id'] if !opts[:'check_suite_id'].nil?
      query_params[:'head_sha'] = opts[:'head_sha'] if !opts[:'head_sha'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListWorkflowRunsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List workflow runs for a repository
    # Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.  This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @option opts [String] :head_sha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;.
    # @return [ActionsListWorkflowRunsForRepo200Response]
    def actions_list_workflow_runs_for_repo(owner, repo, opts = {})
      data, _status_code, _headers = actions_list_workflow_runs_for_repo_with_http_info(owner, repo, opts)
      data
    end

    # List workflow runs for a repository
    # Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.  This API will return up to 1,000 results for each search when using the following parameters: &#x60;actor&#x60;, &#x60;branch&#x60;, &#x60;check_suite_id&#x60;, &#x60;created&#x60;, &#x60;event&#x60;, &#x60;head_sha&#x60;, &#x60;status&#x60;.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run.
    # @option opts [String] :branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;.
    # @option opts [String] :event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot;
    # @option opts [String] :status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;.
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Time] :created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot;
    # @option opts [Boolean] :exclude_pull_requests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (default to false)
    # @option opts [Integer] :check_suite_id Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify.
    # @option opts [String] :head_sha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;.
    # @return [Array<(ActionsListWorkflowRunsForRepo200Response, Integer, Hash)>] ActionsListWorkflowRunsForRepo200Response data, response status code and response headers
    def actions_list_workflow_runs_for_repo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_list_workflow_runs_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_list_workflow_runs_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_list_workflow_runs_for_repo"
      end
      allowable_values = ["completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting", "pending"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'actor'] = opts[:'actor'] if !opts[:'actor'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'event'] = opts[:'event'] if !opts[:'event'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'created'] = opts[:'created'] if !opts[:'created'].nil?
      query_params[:'exclude_pull_requests'] = opts[:'exclude_pull_requests'] if !opts[:'exclude_pull_requests'].nil?
      query_params[:'check_suite_id'] = opts[:'check_suite_id'] if !opts[:'check_suite_id'].nil?
      query_params[:'head_sha'] = opts[:'head_sha'] if !opts[:'head_sha'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListWorkflowRunsForRepo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_list_workflow_runs_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_list_workflow_runs_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run a job from a workflow run
    # Re-run a job and its dependent jobs in a workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_job_for_workflow_run(owner, repo, job_id, opts = {})
      data, _status_code, _headers = actions_re_run_job_for_workflow_run_with_http_info(owner, repo, job_id, opts)
      data
    end

    # Re-run a job from a workflow run
    # Re-run a job and its dependent jobs in a workflow run.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param job_id [Integer] The unique identifier of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_job_for_workflow_run_with_http_info(owner, repo, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_job_for_workflow_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ActionsApi.actions_re_run_job_for_workflow_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_job_for_workflow_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_job_for_workflow_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run a workflow
    # Re-runs your workflow run using its `id`.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_workflow(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_re_run_workflow_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Re-run a workflow
    # Re-runs your workflow run using its &#x60;id&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_workflow_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_workflow ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_workflow"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_workflow"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_re_run_workflow"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-run failed jobs from a workflow run
    # Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Object]
    def actions_re_run_workflow_failed_jobs(owner, repo, run_id, opts = {})
      data, _status_code, _headers = actions_re_run_workflow_failed_jobs_with_http_info(owner, repo, run_id, opts)
      data
    end

    # Re-run failed jobs from a workflow run
    # Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsReRunJobForWorkflowRunRequest] :actions_re_run_job_for_workflow_run_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_re_run_workflow_failed_jobs_with_http_info(owner, repo, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_re_run_workflow_failed_jobs ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_re_run_workflow_failed_jobs"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_re_run_job_for_workflow_run_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_re_run_workflow_failed_jobs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_re_run_workflow_failed_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all custom labels from a self-hosted runner for an organization
    # Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_org(org, runner_id, opts = {})
      data, _status_code, _headers = actions_remove_all_custom_labels_from_self_hosted_runner_for_org_with_http_info(org, runner_id, opts)
      data
    end

    # Remove all custom labels from a self-hosted runner for an organization
    # Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_org_with_http_info(org, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_all_custom_labels_from_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all custom labels from a self-hosted runner for a repository
    # Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_repo(owner, repo, runner_id, opts = {})
      data, _status_code, _headers = actions_remove_all_custom_labels_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts)
      data
    end

    # Remove all custom labels from a self-hosted runner for a repository
    # Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_remove_all_custom_labels_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_all_custom_labels_from_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_all_custom_labels_from_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom label from a self-hosted runner for an organization
    # Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_remove_custom_label_from_self_hosted_runner_for_org(org, runner_id, name, opts = {})
      data, _status_code, _headers = actions_remove_custom_label_from_self_hosted_runner_for_org_with_http_info(org, runner_id, name, opts)
      data
    end

    # Remove a custom label from a self-hosted runner for an organization
    # Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_remove_custom_label_from_self_hosted_runner_for_org_with_http_info(org, runner_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels/{name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_custom_label_from_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a custom label from a self-hosted runner for a repository
    # Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_remove_custom_label_from_self_hosted_runner_for_repo(owner, repo, runner_id, name, opts = {})
      data, _status_code, _headers = actions_remove_custom_label_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, name, opts)
      data
    end

    # Remove a custom label from a self-hosted runner for a repository
    # Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param name [String] The name of a self-hosted runner&#39;s custom label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_remove_custom_label_from_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_custom_label_from_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_custom_label_from_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_remove_selected_repo_from_org_secret(org, secret_name, repository_id, opts = {})
      actions_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts)
      nil
    end

    # Remove selected repository from an organization secret
    # Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_remove_selected_repo_from_org_secret_with_http_info(org, secret_name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_selected_repo_from_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_remove_selected_repo_from_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_selected_repo_from_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_selected_repo_from_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove selected repository from an organization variable
    # Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_remove_selected_repo_from_org_variable(org, name, repository_id, opts = {})
      actions_remove_selected_repo_from_org_variable_with_http_info(org, name, repository_id, opts)
      nil
    end

    # Remove selected repository from an organization variable
    # Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param repository_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_remove_selected_repo_from_org_variable_with_http_info(org, name, repository_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_remove_selected_repo_from_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_remove_selected_repo_from_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_remove_selected_repo_from_org_variable"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling ActionsApi.actions_remove_selected_repo_from_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'repository_id' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_remove_selected_repo_from_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_remove_selected_repo_from_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review custom deployment protection rules for a workflow run
    # Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_custom_gates_for_run_request [ActionsReviewCustomGatesForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_review_custom_gates_for_run(owner, repo, run_id, actions_review_custom_gates_for_run_request, opts = {})
      actions_review_custom_gates_for_run_with_http_info(owner, repo, run_id, actions_review_custom_gates_for_run_request, opts)
      nil
    end

    # Review custom deployment protection rules for a workflow run
    # Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_custom_gates_for_run_request [ActionsReviewCustomGatesForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_review_custom_gates_for_run_with_http_info(owner, repo, run_id, actions_review_custom_gates_for_run_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_review_custom_gates_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_review_custom_gates_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_review_custom_gates_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_review_custom_gates_for_run"
      end
      # verify the required parameter 'actions_review_custom_gates_for_run_request' is set
      if @api_client.config.client_side_validation && actions_review_custom_gates_for_run_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_review_custom_gates_for_run_request' when calling ActionsApi.actions_review_custom_gates_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_review_custom_gates_for_run_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_review_custom_gates_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_review_custom_gates_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review pending deployments for a workflow run
    # Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_pending_deployments_for_run_request [ActionsReviewPendingDeploymentsForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Deployment>]
    def actions_review_pending_deployments_for_run(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts = {})
      data, _status_code, _headers = actions_review_pending_deployments_for_run_with_http_info(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts)
      data
    end

    # Review pending deployments for a workflow run
    # Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param run_id [Integer] The unique identifier of the workflow run.
    # @param actions_review_pending_deployments_for_run_request [ActionsReviewPendingDeploymentsForRunRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Deployment>, Integer, Hash)>] Array<Deployment> data, response status code and response headers
    def actions_review_pending_deployments_for_run_with_http_info(owner, repo, run_id, actions_review_pending_deployments_for_run_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_review_pending_deployments_for_run ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # verify the required parameter 'actions_review_pending_deployments_for_run_request' is set
      if @api_client.config.client_side_validation && actions_review_pending_deployments_for_run_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_review_pending_deployments_for_run_request' when calling ActionsApi.actions_review_pending_deployments_for_run"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'run_id' + '}', CGI.escape(run_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_review_pending_deployments_for_run_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Deployment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_review_pending_deployments_for_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_review_pending_deployments_for_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set allowed actions and reusable workflows for an organization
    # Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [SelectedActions] :selected_actions 
    # @return [nil]
    def actions_set_allowed_actions_organization(org, opts = {})
      actions_set_allowed_actions_organization_with_http_info(org, opts)
      nil
    end

    # Set allowed actions and reusable workflows for an organization
    # Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [SelectedActions] :selected_actions 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_allowed_actions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_allowed_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_allowed_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/selected-actions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'selected_actions'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_allowed_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_allowed_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set allowed actions and reusable workflows for a repository
    # Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [SelectedActions] :selected_actions 
    # @return [nil]
    def actions_set_allowed_actions_repository(owner, repo, opts = {})
      actions_set_allowed_actions_repository_with_http_info(owner, repo, opts)
      nil
    end

    # Set allowed actions and reusable workflows for a repository
    # Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [SelectedActions] :selected_actions 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_allowed_actions_repository_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_allowed_actions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_allowed_actions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_allowed_actions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/selected-actions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'selected_actions'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_allowed_actions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_allowed_actions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set custom labels for a self-hosted runner for an organization
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_set_custom_labels_for_self_hosted_runner_for_org_request [ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_set_custom_labels_for_self_hosted_runner_for_org(org, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts = {})
      data, _status_code, _headers = actions_set_custom_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts)
      data
    end

    # Set custom labels for a self-hosted runner for an organization
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_set_custom_labels_for_self_hosted_runner_for_org_request [ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_set_custom_labels_for_self_hosted_runner_for_org_with_http_info(org, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # verify the required parameter 'actions_set_custom_labels_for_self_hosted_runner_for_org_request' is set
      if @api_client.config.client_side_validation && actions_set_custom_labels_for_self_hosted_runner_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_custom_labels_for_self_hosted_runner_for_org_request' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/runners/{runner_id}/labels'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_custom_labels_for_self_hosted_runner_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_labels_for_self_hosted_runner_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set custom labels for a self-hosted runner for a repository
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_set_custom_labels_for_self_hosted_runner_for_org_request [ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsListLabelsForSelfHostedRunnerForOrg200Response]
    def actions_set_custom_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts = {})
      data, _status_code, _headers = actions_set_custom_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts)
      data
    end

    # Set custom labels for a self-hosted runner for a repository
    # Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param runner_id [Integer] Unique identifier of the self-hosted runner.
    # @param actions_set_custom_labels_for_self_hosted_runner_for_org_request [ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsListLabelsForSelfHostedRunnerForOrg200Response, Integer, Hash)>] ActionsListLabelsForSelfHostedRunnerForOrg200Response data, response status code and response headers
    def actions_set_custom_labels_for_self_hosted_runner_for_repo_with_http_info(owner, repo, runner_id, actions_set_custom_labels_for_self_hosted_runner_for_org_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'runner_id' is set
      if @api_client.config.client_side_validation && runner_id.nil?
        fail ArgumentError, "Missing the required parameter 'runner_id' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # verify the required parameter 'actions_set_custom_labels_for_self_hosted_runner_for_org_request' is set
      if @api_client.config.client_side_validation && actions_set_custom_labels_for_self_hosted_runner_for_org_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_custom_labels_for_self_hosted_runner_for_org_request' when calling ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'runner_id' + '}', CGI.escape(runner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_custom_labels_for_self_hosted_runner_for_org_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsListLabelsForSelfHostedRunnerForOrg200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_labels_for_self_hosted_runner_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_labels_for_self_hosted_runner_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the customization template for an OIDC subject claim for a repository
    # Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_oidc_subject_customization_for_a_repository [ActionsOIDCSubjectCustomizationForARepository] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def actions_set_custom_oidc_sub_claim_for_repo(owner, repo, actions_oidc_subject_customization_for_a_repository, opts = {})
      data, _status_code, _headers = actions_set_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, actions_oidc_subject_customization_for_a_repository, opts)
      data
    end

    # Set the customization template for an OIDC subject claim for a repository
    # Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_oidc_subject_customization_for_a_repository [ActionsOIDCSubjectCustomizationForARepository] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def actions_set_custom_oidc_sub_claim_for_repo_with_http_info(owner, repo, actions_oidc_subject_customization_for_a_repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_custom_oidc_sub_claim_for_repo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # verify the required parameter 'actions_oidc_subject_customization_for_a_repository' is set
      if @api_client.config.client_side_validation && actions_oidc_subject_customization_for_a_repository.nil?
        fail ArgumentError, "Missing the required parameter 'actions_oidc_subject_customization_for_a_repository' when calling ActionsApi.actions_set_custom_oidc_sub_claim_for_repo"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/oidc/customization/sub'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/scim+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_oidc_subject_customization_for_a_repository)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_custom_oidc_sub_claim_for_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_custom_oidc_sub_claim_for_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default workflow permissions for an organization
    # Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsSetDefaultWorkflowPermissions] :actions_set_default_workflow_permissions 
    # @return [nil]
    def actions_set_github_actions_default_workflow_permissions_organization(org, opts = {})
      actions_set_github_actions_default_workflow_permissions_organization_with_http_info(org, opts)
      nil
    end

    # Set default workflow permissions for an organization
    # Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [ActionsSetDefaultWorkflowPermissions] :actions_set_default_workflow_permissions 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_default_workflow_permissions_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_default_workflow_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/workflow'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'actions_set_default_workflow_permissions'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_default_workflow_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_default_workflow_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default workflow permissions for a repository
    # Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_set_default_workflow_permissions [ActionsSetDefaultWorkflowPermissions] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_default_workflow_permissions_repository(owner, repo, actions_set_default_workflow_permissions, opts = {})
      actions_set_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, actions_set_default_workflow_permissions, opts)
      nil
    end

    # Set default workflow permissions for a repository
    # Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_set_default_workflow_permissions [ActionsSetDefaultWorkflowPermissions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_default_workflow_permissions_repository_with_http_info(owner, repo, actions_set_default_workflow_permissions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_default_workflow_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # verify the required parameter 'actions_set_default_workflow_permissions' is set
      if @api_client.config.client_side_validation && actions_set_default_workflow_permissions.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_default_workflow_permissions' when calling ActionsApi.actions_set_github_actions_default_workflow_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/workflow'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_default_workflow_permissions)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_default_workflow_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_default_workflow_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GitHub Actions permissions for an organization
    # Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_organization_request [ActionsSetGithubActionsPermissionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_permissions_organization(org, actions_set_github_actions_permissions_organization_request, opts = {})
      actions_set_github_actions_permissions_organization_with_http_info(org, actions_set_github_actions_permissions_organization_request, opts)
      nil
    end

    # Set GitHub Actions permissions for an organization
    # Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_organization_request [ActionsSetGithubActionsPermissionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_permissions_organization_with_http_info(org, actions_set_github_actions_permissions_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_permissions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_github_actions_permissions_organization"
      end
      # verify the required parameter 'actions_set_github_actions_permissions_organization_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_permissions_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_permissions_organization_request' when calling ActionsApi.actions_set_github_actions_permissions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_permissions_organization_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_permissions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_permissions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GitHub Actions permissions for a repository
    # Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_repository_request [ActionsSetGithubActionsPermissionsRepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_github_actions_permissions_repository(owner, repo, actions_set_github_actions_permissions_repository_request, opts = {})
      actions_set_github_actions_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_permissions_repository_request, opts)
      nil
    end

    # Set GitHub Actions permissions for a repository
    # Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_set_github_actions_permissions_repository_request [ActionsSetGithubActionsPermissionsRepositoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_github_actions_permissions_repository_with_http_info(owner, repo, actions_set_github_actions_permissions_repository_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_github_actions_permissions_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # verify the required parameter 'actions_set_github_actions_permissions_repository_request' is set
      if @api_client.config.client_side_validation && actions_set_github_actions_permissions_repository_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_github_actions_permissions_repository_request' when calling ActionsApi.actions_set_github_actions_permissions_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_github_actions_permissions_repository_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_github_actions_permissions_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_github_actions_permissions_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_set_selected_repos_for_org_secret_request [ActionsSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_selected_repos_for_org_secret(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts = {})
      actions_set_selected_repos_for_org_secret_with_http_info(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts)
      nil
    end

    # Set selected repositories for an organization secret
    # Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param secret_name [String] The name of the secret.
    # @param actions_set_selected_repos_for_org_secret_request [ActionsSetSelectedReposForOrgSecretRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_selected_repos_for_org_secret_with_http_info(org, secret_name, actions_set_selected_repos_for_org_secret_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_selected_repos_for_org_secret ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # verify the required parameter 'actions_set_selected_repos_for_org_secret_request' is set
      if @api_client.config.client_side_validation && actions_set_selected_repos_for_org_secret_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_selected_repos_for_org_secret_request' when calling ActionsApi.actions_set_selected_repos_for_org_secret"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/secrets/{secret_name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'secret_name' + '}', CGI.escape(secret_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_selected_repos_for_org_secret_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_selected_repos_for_org_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_selected_repos_for_org_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories for an organization variable
    # Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_set_selected_repos_for_org_variable_request [ActionsSetSelectedReposForOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_selected_repos_for_org_variable(org, name, actions_set_selected_repos_for_org_variable_request, opts = {})
      actions_set_selected_repos_for_org_variable_with_http_info(org, name, actions_set_selected_repos_for_org_variable_request, opts)
      nil
    end

    # Set selected repositories for an organization variable
    # Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_set_selected_repos_for_org_variable_request [ActionsSetSelectedReposForOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_selected_repos_for_org_variable_with_http_info(org, name, actions_set_selected_repos_for_org_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_selected_repos_for_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_selected_repos_for_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_set_selected_repos_for_org_variable"
      end
      # verify the required parameter 'actions_set_selected_repos_for_org_variable_request' is set
      if @api_client.config.client_side_validation && actions_set_selected_repos_for_org_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_selected_repos_for_org_variable_request' when calling ActionsApi.actions_set_selected_repos_for_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_selected_repos_for_org_variable_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_selected_repos_for_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_selected_repos_for_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set selected repositories enabled for GitHub Actions in an organization
    # Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"   OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_selected_repositories_enabled_github_actions_organization_request [ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_selected_repositories_enabled_github_actions_organization(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts = {})
      actions_set_selected_repositories_enabled_github_actions_organization_with_http_info(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts)
      nil
    end

    # Set selected repositories enabled for GitHub Actions in an organization
    # Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;   OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param actions_set_selected_repositories_enabled_github_actions_organization_request [ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_selected_repositories_enabled_github_actions_organization_with_http_info(org, actions_set_selected_repositories_enabled_github_actions_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization"
      end
      # verify the required parameter 'actions_set_selected_repositories_enabled_github_actions_organization_request' is set
      if @api_client.config.client_side_validation && actions_set_selected_repositories_enabled_github_actions_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_set_selected_repositories_enabled_github_actions_organization_request' when calling ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/permissions/repositories'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_set_selected_repositories_enabled_github_actions_organization_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_selected_repositories_enabled_github_actions_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_selected_repositories_enabled_github_actions_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the level of access for workflows outside of the repository
    # Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_workflow_access_to_repository [ActionsWorkflowAccessToRepository] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_set_workflow_access_to_repository(owner, repo, actions_workflow_access_to_repository, opts = {})
      actions_set_workflow_access_to_repository_with_http_info(owner, repo, actions_workflow_access_to_repository, opts)
      nil
    end

    # Set the level of access for workflows outside of the repository
    # Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param actions_workflow_access_to_repository [ActionsWorkflowAccessToRepository] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_set_workflow_access_to_repository_with_http_info(owner, repo, actions_workflow_access_to_repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_set_workflow_access_to_repository ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # verify the required parameter 'actions_workflow_access_to_repository' is set
      if @api_client.config.client_side_validation && actions_workflow_access_to_repository.nil?
        fail ArgumentError, "Missing the required parameter 'actions_workflow_access_to_repository' when calling ActionsApi.actions_set_workflow_access_to_repository"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/permissions/access'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_workflow_access_to_repository)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_set_workflow_access_to_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_set_workflow_access_to_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an environment variable
    # Updates an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param actions_update_repo_variable_request [ActionsUpdateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_update_environment_variable(owner, repo, name, environment_name, actions_update_repo_variable_request, opts = {})
      actions_update_environment_variable_with_http_info(owner, repo, name, environment_name, actions_update_repo_variable_request, opts)
      nil
    end

    # Update an environment variable
    # Updates an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param environment_name [String] The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;.
    # @param actions_update_repo_variable_request [ActionsUpdateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_update_environment_variable_with_http_info(owner, repo, name, environment_name, actions_update_repo_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_update_environment_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_update_environment_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_update_environment_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_update_environment_variable"
      end
      # verify the required parameter 'environment_name' is set
      if @api_client.config.client_side_validation && environment_name.nil?
        fail ArgumentError, "Missing the required parameter 'environment_name' when calling ActionsApi.actions_update_environment_variable"
      end
      # verify the required parameter 'actions_update_repo_variable_request' is set
      if @api_client.config.client_side_validation && actions_update_repo_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_update_repo_variable_request' when calling ActionsApi.actions_update_environment_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'environment_name' + '}', CGI.escape(environment_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_update_repo_variable_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_update_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_update_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization variable
    # Updates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_update_org_variable_request [ActionsUpdateOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_update_org_variable(org, name, actions_update_org_variable_request, opts = {})
      actions_update_org_variable_with_http_info(org, name, actions_update_org_variable_request, opts)
      nil
    end

    # Update an organization variable
    # Updates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_update_org_variable_request [ActionsUpdateOrgVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_update_org_variable_with_http_info(org, name, actions_update_org_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_update_org_variable ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling ActionsApi.actions_update_org_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_update_org_variable"
      end
      # verify the required parameter 'actions_update_org_variable_request' is set
      if @api_client.config.client_side_validation && actions_update_org_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_update_org_variable_request' when calling ActionsApi.actions_update_org_variable"
      end
      # resource path
      local_var_path = '/orgs/{org}/actions/variables/{name}'.sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_update_org_variable_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_update_org_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_update_org_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a repository variable
    # Updates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_update_repo_variable_request [ActionsUpdateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def actions_update_repo_variable(owner, repo, name, actions_update_repo_variable_request, opts = {})
      actions_update_repo_variable_with_http_info(owner, repo, name, actions_update_repo_variable_request, opts)
      nil
    end

    # Update a repository variable
    # Updates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
    # @param owner [String] The account owner of the repository. The name is not case sensitive.
    # @param repo [String] The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
    # @param name [String] The name of the variable.
    # @param actions_update_repo_variable_request [ActionsUpdateRepoVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def actions_update_repo_variable_with_http_info(owner, repo, name, actions_update_repo_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsApi.actions_update_repo_variable ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ActionsApi.actions_update_repo_variable"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ActionsApi.actions_update_repo_variable"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ActionsApi.actions_update_repo_variable"
      end
      # verify the required parameter 'actions_update_repo_variable_request' is set
      if @api_client.config.client_side_validation && actions_update_repo_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_update_repo_variable_request' when calling ActionsApi.actions_update_repo_variable"
      end
      # resource path
      local_var_path = '/repos/{owner}/{repo}/actions/variables/{name}'.sub('{' + 'owner' + '}', CGI.escape(owner.to_s)).sub('{' + 'repo' + '}', CGI.escape(repo.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_update_repo_variable_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ActionsApi.actions_update_repo_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsApi#actions_update_repo_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
