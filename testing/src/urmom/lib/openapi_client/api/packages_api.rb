=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class PackagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a package for the authenticated user
    # Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is also required. For the list these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_for_authenticated_user(package_type, package_name, opts = {})
      packages_delete_package_for_authenticated_user_with_http_info(package_type, package_name, opts)
      nil
    end

    # Delete a package for the authenticated user
    # Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, &#x60;repo&#x60; scope is also required. For the list these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_for_authenticated_user_with_http_info(package_type, package_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a package for an organization
    # Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_for_org(package_type, package_name, org, opts = {})
      packages_delete_package_for_org_with_http_info(package_type, package_name, org, opts)
      nil
    end

    # Delete a package for an organization
    # Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_for_org_with_http_info(package_type, package_name, org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_for_org ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_for_org"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_for_org"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_delete_package_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a package for a user
    # Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_for_user(package_type, package_name, username, opts = {})
      packages_delete_package_for_user_with_http_info(package_type, package_name, username, opts)
      nil
    end

    # Delete a package for a user
    # Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_for_user_with_http_info(package_type, package_name, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_delete_package_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a package version for the authenticated user
    # Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_version_for_authenticated_user(package_type, package_name, package_version_id, opts = {})
      packages_delete_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts)
      nil
    end

    # Delete a package version for the authenticated user
    # Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_version_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_version_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_version_for_authenticated_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_delete_package_version_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_version_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_version_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete package version for an organization
    # Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_version_for_org(package_type, package_name, org, package_version_id, opts = {})
      packages_delete_package_version_for_org_with_http_info(package_type, package_name, org, package_version_id, opts)
      nil
    end

    # Delete package version for an organization
    # Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_version_for_org_with_http_info(package_type, package_name, org, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_version_for_org ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_version_for_org"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_version_for_org"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_delete_package_version_for_org"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_delete_package_version_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_version_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_version_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete package version for a user
    # Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete_package_version_for_user(package_type, package_name, username, package_version_id, opts = {})
      packages_delete_package_version_for_user_with_http_info(package_type, package_name, username, package_version_id, opts)
      nil
    end

    # Delete package version for a user
    # Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_delete_package_version_for_user_with_http_info(package_type, package_name, username, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete_package_version_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_delete_package_version_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_delete_package_version_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_delete_package_version_for_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_delete_package_version_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_delete_package_version_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete_package_version_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List package versions for a package owned by the authenticated user
    # Lists package versions for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state The state of the package, either active or deleted. (default to 'active')
    # @return [Array<PackageVersion>]
    def packages_get_all_package_versions_for_package_owned_by_authenticated_user(package_type, package_name, opts = {})
      data, _status_code, _headers = packages_get_all_package_versions_for_package_owned_by_authenticated_user_with_http_info(package_type, package_name, opts)
      data
    end

    # List package versions for a package owned by the authenticated user
    # Lists package versions for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state The state of the package, either active or deleted. (default to 'active')
    # @return [Array<(Array<PackageVersion>, Integer, Hash)>] Array<PackageVersion> data, response status code and response headers
    def packages_get_all_package_versions_for_package_owned_by_authenticated_user_with_http_info(package_type, package_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_all_package_versions_for_package_owned_by_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_authenticated_user"
      end
      allowable_values = ["active", "deleted"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}/versions'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PackageVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_all_package_versions_for_package_owned_by_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_all_package_versions_for_package_owned_by_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List package versions for a package owned by an organization
    # Lists package versions for a package owned by an organization.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state The state of the package, either active or deleted. (default to 'active')
    # @return [Array<PackageVersion>]
    def packages_get_all_package_versions_for_package_owned_by_org(package_type, package_name, org, opts = {})
      data, _status_code, _headers = packages_get_all_package_versions_for_package_owned_by_org_with_http_info(package_type, package_name, org, opts)
      data
    end

    # List package versions for a package owned by an organization
    # Lists package versions for a package owned by an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @option opts [String] :state The state of the package, either active or deleted. (default to 'active')
    # @return [Array<(Array<PackageVersion>, Integer, Hash)>] Array<PackageVersion> data, response status code and response headers
    def packages_get_all_package_versions_for_package_owned_by_org_with_http_info(package_type, package_name, org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_all_package_versions_for_package_owned_by_org ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_org"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_org"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_org"
      end
      allowable_values = ["active", "deleted"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}/versions'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PackageVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_all_package_versions_for_package_owned_by_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_all_package_versions_for_package_owned_by_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List package versions for a package owned by a user
    # Lists package versions for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<PackageVersion>]
    def packages_get_all_package_versions_for_package_owned_by_user(package_type, package_name, username, opts = {})
      data, _status_code, _headers = packages_get_all_package_versions_for_package_owned_by_user_with_http_info(package_type, package_name, username, opts)
      data
    end

    # List package versions for a package owned by a user
    # Lists package versions for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PackageVersion>, Integer, Hash)>] Array<PackageVersion> data, response status code and response headers
    def packages_get_all_package_versions_for_package_owned_by_user_with_http_info(package_type, package_name, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_all_package_versions_for_package_owned_by_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_get_all_package_versions_for_package_owned_by_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}/versions'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PackageVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_all_package_versions_for_package_owned_by_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_all_package_versions_for_package_owned_by_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package for the authenticated user
    # Gets a specific package for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_get_package_for_authenticated_user(package_type, package_name, opts = {})
      data, _status_code, _headers = packages_get_package_for_authenticated_user_with_http_info(package_type, package_name, opts)
      data
    end

    # Get a package for the authenticated user
    # Gets a specific package for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Integer, Hash)>] Package data, response status code and response headers
    def packages_get_package_for_authenticated_user_with_http_info(package_type, package_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Package'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package for an organization
    # Gets a specific package in an organization.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_get_package_for_organization(package_type, package_name, org, opts = {})
      data, _status_code, _headers = packages_get_package_for_organization_with_http_info(package_type, package_name, org, opts)
      data
    end

    # Get a package for an organization
    # Gets a specific package in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Integer, Hash)>] Package data, response status code and response headers
    def packages_get_package_for_organization_with_http_info(package_type, package_name, org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_for_organization ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_for_organization"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_for_organization"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_get_package_for_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Package'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_for_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_for_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package for a user
    # Gets a specific package metadata for a public package owned by a user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_get_package_for_user(package_type, package_name, username, opts = {})
      data, _status_code, _headers = packages_get_package_for_user_with_http_info(package_type, package_name, username, opts)
      data
    end

    # Get a package for a user
    # Gets a specific package metadata for a public package owned by a user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Integer, Hash)>] Package data, response status code and response headers
    def packages_get_package_for_user_with_http_info(package_type, package_name, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_get_package_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Package'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package version for the authenticated user
    # Gets a specific package version for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [PackageVersion]
    def packages_get_package_version_for_authenticated_user(package_type, package_name, package_version_id, opts = {})
      data, _status_code, _headers = packages_get_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts)
      data
    end

    # Get a package version for the authenticated user
    # Gets a specific package version for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageVersion, Integer, Hash)>] PackageVersion data, response status code and response headers
    def packages_get_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_version_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_version_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_version_for_authenticated_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_get_package_version_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PackageVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_version_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_version_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package version for an organization
    # Gets a specific package version in an organization.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [PackageVersion]
    def packages_get_package_version_for_organization(package_type, package_name, org, package_version_id, opts = {})
      data, _status_code, _headers = packages_get_package_version_for_organization_with_http_info(package_type, package_name, org, package_version_id, opts)
      data
    end

    # Get a package version for an organization
    # Gets a specific package version in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageVersion, Integer, Hash)>] PackageVersion data, response status code and response headers
    def packages_get_package_version_for_organization_with_http_info(package_type, package_name, org, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_version_for_organization ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_version_for_organization"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_version_for_organization"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_get_package_version_for_organization"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_get_package_version_for_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PackageVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_version_for_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_version_for_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a package version for a user
    # Gets a specific package version for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [PackageVersion]
    def packages_get_package_version_for_user(package_type, package_name, package_version_id, username, opts = {})
      data, _status_code, _headers = packages_get_package_version_for_user_with_http_info(package_type, package_name, package_version_id, username, opts)
      data
    end

    # Get a package version for a user
    # Gets a specific package version for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageVersion, Integer, Hash)>] PackageVersion data, response status code and response headers
    def packages_get_package_version_for_user_with_http_info(package_type, package_name, package_version_id, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get_package_version_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_get_package_version_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_get_package_version_for_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_get_package_version_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_get_package_version_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PackageVersion'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_get_package_version_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get_package_version_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of conflicting packages during Docker migration for authenticated-user
    # Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<Package>]
    def packages_list_docker_migration_conflicting_packages_for_authenticated_user(opts = {})
      data, _status_code, _headers = packages_list_docker_migration_conflicting_packages_for_authenticated_user_with_http_info(opts)
      data
    end

    # Get list of conflicting packages during Docker migration for authenticated-user
    # Lists all packages that are owned by the authenticated user within the user&#39;s namespace, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_docker_migration_conflicting_packages_for_authenticated_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_docker_migration_conflicting_packages_for_authenticated_user ...'
      end
      # resource path
      local_var_path = '/user/docker/conflicts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_docker_migration_conflicting_packages_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_docker_migration_conflicting_packages_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of conflicting packages during Docker migration for organization
    # Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<Package>]
    def packages_list_docker_migration_conflicting_packages_for_organization(org, opts = {})
      data, _status_code, _headers = packages_list_docker_migration_conflicting_packages_for_organization_with_http_info(org, opts)
      data
    end

    # Get list of conflicting packages during Docker migration for organization
    # Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_docker_migration_conflicting_packages_for_organization_with_http_info(org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_docker_migration_conflicting_packages_for_organization ...'
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_list_docker_migration_conflicting_packages_for_organization"
      end
      # resource path
      local_var_path = '/orgs/{org}/docker/conflicts'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_docker_migration_conflicting_packages_for_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_docker_migration_conflicting_packages_for_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of conflicting packages during Docker migration for user
    # Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<Package>]
    def packages_list_docker_migration_conflicting_packages_for_user(username, opts = {})
      data, _status_code, _headers = packages_list_docker_migration_conflicting_packages_for_user_with_http_info(username, opts)
      data
    end

    # Get list of conflicting packages during Docker migration for user
    # Lists all packages that are in a specific user&#39;s namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_docker_migration_conflicting_packages_for_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_docker_migration_conflicting_packages_for_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_list_docker_migration_conflicting_packages_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/docker/conflicts'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_docker_migration_conflicting_packages_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_docker_migration_conflicting_packages_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List packages for the authenticated user's namespace
    # Lists packages owned by the authenticated user within the user's namespace.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<Package>]
    def packages_list_packages_for_authenticated_user(package_type, opts = {})
      data, _status_code, _headers = packages_list_packages_for_authenticated_user_with_http_info(package_type, opts)
      data
    end

    # List packages for the authenticated user&#39;s namespace
    # Lists packages owned by the authenticated user within the user&#39;s namespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_packages_for_authenticated_user_with_http_info(package_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_packages_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_list_packages_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["public", "private", "internal"]
      if @api_client.config.client_side_validation && opts[:'visibility'] && !allowable_values.include?(opts[:'visibility'])
        fail ArgumentError, "invalid value for \"visibility\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/packages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'package_type'] = package_type
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_packages_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_packages_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List packages for an organization
    # Lists packages in an organization readable by the user.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<Package>]
    def packages_list_packages_for_organization(package_type, org, opts = {})
      data, _status_code, _headers = packages_list_packages_for_organization_with_http_info(package_type, org, opts)
      data
    end

    # List packages for an organization
    # Lists packages in an organization readable by the user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_packages_for_organization_with_http_info(package_type, org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_packages_for_organization ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_list_packages_for_organization"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_list_packages_for_organization"
      end
      allowable_values = ["public", "private", "internal"]
      if @api_client.config.client_side_validation && opts[:'visibility'] && !allowable_values.include?(opts[:'visibility'])
        fail ArgumentError, "invalid value for \"visibility\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages'.sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'package_type'] = package_type
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_packages_for_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_packages_for_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List packages for a user
    # Lists all packages in a user's namespace for which the requesting user has access.  OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<Package>]
    def packages_list_packages_for_user(package_type, username, opts = {})
      data, _status_code, _headers = packages_list_packages_for_user_with_http_info(package_type, username, opts)
      data
    end

    # List packages for a user
    # Lists all packages in a user&#39;s namespace for which the requesting user has access.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
    # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (default to 30)
    # @return [Array<(Array<Package>, Integer, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_packages_for_user_with_http_info(package_type, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list_packages_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_list_packages_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_list_packages_for_user"
      end
      allowable_values = ["public", "private", "internal"]
      if @api_client.config.client_side_validation && opts[:'visibility'] && !allowable_values.include?(opts[:'visibility'])
        fail ArgumentError, "invalid value for \"visibility\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/{username}/packages'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'package_type'] = package_type
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Package>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_list_packages_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list_packages_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore a package for the authenticated user
    # Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [nil]
    def packages_restore_package_for_authenticated_user(package_type, package_name, opts = {})
      packages_restore_package_for_authenticated_user_with_http_info(package_type, package_name, opts)
      nil
    end

    # Restore a package for the authenticated user
    # Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_for_authenticated_user_with_http_info(package_type, package_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore a package for an organization
    # Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [nil]
    def packages_restore_package_for_org(package_type, package_name, org, opts = {})
      packages_restore_package_for_org_with_http_info(package_type, package_name, org, opts)
      nil
    end

    # Restore a package for an organization
    # Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_for_org_with_http_info(package_type, package_name, org, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_for_org ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_for_org"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_for_org"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_restore_package_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore a package for a user
    # Restores an entire package for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [nil]
    def packages_restore_package_for_user(package_type, package_name, username, opts = {})
      packages_restore_package_for_user_with_http_info(package_type, package_name, username, opts)
      nil
    end

    # Restore a package for a user
    # Restores an entire package for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token package token
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_for_user_with_http_info(package_type, package_name, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_restore_package_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore a package version for the authenticated user
    # Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_restore_package_version_for_authenticated_user(package_type, package_name, package_version_id, opts = {})
      packages_restore_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts)
      nil
    end

    # Restore a package version for the authenticated user
    # Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_version_for_authenticated_user_with_http_info(package_type, package_name, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_version_for_authenticated_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_version_for_authenticated_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_version_for_authenticated_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_restore_package_version_for_authenticated_user"
      end
      # resource path
      local_var_path = '/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_version_for_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_version_for_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore package version for an organization
    # Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_restore_package_version_for_org(package_type, package_name, org, package_version_id, opts = {})
      packages_restore_package_version_for_org_with_http_info(package_type, package_name, org, package_version_id, opts)
      nil
    end

    # Restore package version for an organization
    # Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param org [String] The organization name. The name is not case sensitive.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_version_for_org_with_http_info(package_type, package_name, org, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_version_for_org ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_version_for_org"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_version_for_org"
      end
      # verify the required parameter 'org' is set
      if @api_client.config.client_side_validation && org.nil?
        fail ArgumentError, "Missing the required parameter 'org' when calling PackagesApi.packages_restore_package_version_for_org"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_restore_package_version_for_org"
      end
      # resource path
      local_var_path = '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'org' + '}', CGI.escape(org.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_version_for_org",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_version_for_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restore package version for a user
    # Restores a specific package version for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"  OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_restore_package_version_for_user(package_type, package_name, username, package_version_id, opts = {})
      packages_restore_package_version_for_user_with_http_info(package_type, package_name, username, package_version_id, opts)
      nil
    end

    # Restore package version for a user
    # Restores a specific package version for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
    # @param package_type [String] The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry.
    # @param package_name [String] The name of the package.
    # @param username [String] The handle for the GitHub user account.
    # @param package_version_id [Integer] Unique identifier of the package version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def packages_restore_package_version_for_user_with_http_info(package_type, package_name, username, package_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_restore_package_version_for_user ...'
      end
      # verify the required parameter 'package_type' is set
      if @api_client.config.client_side_validation && package_type.nil?
        fail ArgumentError, "Missing the required parameter 'package_type' when calling PackagesApi.packages_restore_package_version_for_user"
      end
      # verify enum value
      allowable_values = ["npm", "maven", "rubygems", "docker", "nuget", "container"]
      if @api_client.config.client_side_validation && !allowable_values.include?(package_type)
        fail ArgumentError, "invalid value for \"package_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'package_name' is set
      if @api_client.config.client_side_validation && package_name.nil?
        fail ArgumentError, "Missing the required parameter 'package_name' when calling PackagesApi.packages_restore_package_version_for_user"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PackagesApi.packages_restore_package_version_for_user"
      end
      # verify the required parameter 'package_version_id' is set
      if @api_client.config.client_side_validation && package_version_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_version_id' when calling PackagesApi.packages_restore_package_version_for_user"
      end
      # resource path
      local_var_path = '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'.sub('{' + 'package_type' + '}', CGI.escape(package_type.to_s)).sub('{' + 'package_name' + '}', CGI.escape(package_name.to_s)).sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'package_version_id' + '}', CGI.escape(package_version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackagesApi.packages_restore_package_version_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_restore_package_version_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
