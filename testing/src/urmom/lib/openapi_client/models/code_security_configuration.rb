=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # A code security configuration
  class CodeSecurityConfiguration
    # The ID of the code security configuration
    attr_accessor :id

    # The name of the code security configuration. Must be unique within the organization.
    attr_accessor :name

    # The type of the code security configuration.
    attr_accessor :target_type

    # A description of the code security configuration
    attr_accessor :description

    # The enablement status of GitHub Advanced Security
    attr_accessor :advanced_security

    # The enablement status of Dependency Graph
    attr_accessor :dependency_graph

    # The enablement status of Dependabot alerts
    attr_accessor :dependabot_alerts

    # The enablement status of Dependabot security updates
    attr_accessor :dependabot_security_updates

    # The enablement status of code scanning default setup
    attr_accessor :code_scanning_default_setup

    # The enablement status of secret scanning
    attr_accessor :secret_scanning

    # The enablement status of secret scanning push protection
    attr_accessor :secret_scanning_push_protection

    # The enablement status of private vulnerability reporting
    attr_accessor :private_vulnerability_reporting

    # The URL of the configuration
    attr_accessor :url

    # The URL of the configuration
    attr_accessor :html_url

    attr_accessor :created_at

    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'target_type' => :'target_type',
        :'description' => :'description',
        :'advanced_security' => :'advanced_security',
        :'dependency_graph' => :'dependency_graph',
        :'dependabot_alerts' => :'dependabot_alerts',
        :'dependabot_security_updates' => :'dependabot_security_updates',
        :'code_scanning_default_setup' => :'code_scanning_default_setup',
        :'secret_scanning' => :'secret_scanning',
        :'secret_scanning_push_protection' => :'secret_scanning_push_protection',
        :'private_vulnerability_reporting' => :'private_vulnerability_reporting',
        :'url' => :'url',
        :'html_url' => :'html_url',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'target_type' => :'String',
        :'description' => :'String',
        :'advanced_security' => :'String',
        :'dependency_graph' => :'String',
        :'dependabot_alerts' => :'String',
        :'dependabot_security_updates' => :'String',
        :'code_scanning_default_setup' => :'String',
        :'secret_scanning' => :'String',
        :'secret_scanning_push_protection' => :'String',
        :'private_vulnerability_reporting' => :'String',
        :'url' => :'String',
        :'html_url' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CodeSecurityConfiguration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CodeSecurityConfiguration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'target_type')
        self.target_type = attributes[:'target_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'advanced_security')
        self.advanced_security = attributes[:'advanced_security']
      end

      if attributes.key?(:'dependency_graph')
        self.dependency_graph = attributes[:'dependency_graph']
      end

      if attributes.key?(:'dependabot_alerts')
        self.dependabot_alerts = attributes[:'dependabot_alerts']
      end

      if attributes.key?(:'dependabot_security_updates')
        self.dependabot_security_updates = attributes[:'dependabot_security_updates']
      end

      if attributes.key?(:'code_scanning_default_setup')
        self.code_scanning_default_setup = attributes[:'code_scanning_default_setup']
      end

      if attributes.key?(:'secret_scanning')
        self.secret_scanning = attributes[:'secret_scanning']
      end

      if attributes.key?(:'secret_scanning_push_protection')
        self.secret_scanning_push_protection = attributes[:'secret_scanning_push_protection']
      end

      if attributes.key?(:'private_vulnerability_reporting')
        self.private_vulnerability_reporting = attributes[:'private_vulnerability_reporting']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      target_type_validator = EnumAttributeValidator.new('String', ["global", "organization"])
      return false unless target_type_validator.valid?(@target_type)
      advanced_security_validator = EnumAttributeValidator.new('String', ["enabled", "disabled"])
      return false unless advanced_security_validator.valid?(@advanced_security)
      dependency_graph_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless dependency_graph_validator.valid?(@dependency_graph)
      dependabot_alerts_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless dependabot_alerts_validator.valid?(@dependabot_alerts)
      dependabot_security_updates_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless dependabot_security_updates_validator.valid?(@dependabot_security_updates)
      code_scanning_default_setup_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless code_scanning_default_setup_validator.valid?(@code_scanning_default_setup)
      secret_scanning_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless secret_scanning_validator.valid?(@secret_scanning)
      secret_scanning_push_protection_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless secret_scanning_push_protection_validator.valid?(@secret_scanning_push_protection)
      private_vulnerability_reporting_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      return false unless private_vulnerability_reporting_validator.valid?(@private_vulnerability_reporting)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_type Object to be assigned
    def target_type=(target_type)
      validator = EnumAttributeValidator.new('String', ["global", "organization"])
      unless validator.valid?(target_type)
        fail ArgumentError, "invalid value for \"target_type\", must be one of #{validator.allowable_values}."
      end
      @target_type = target_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] advanced_security Object to be assigned
    def advanced_security=(advanced_security)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled"])
      unless validator.valid?(advanced_security)
        fail ArgumentError, "invalid value for \"advanced_security\", must be one of #{validator.allowable_values}."
      end
      @advanced_security = advanced_security
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dependency_graph Object to be assigned
    def dependency_graph=(dependency_graph)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(dependency_graph)
        fail ArgumentError, "invalid value for \"dependency_graph\", must be one of #{validator.allowable_values}."
      end
      @dependency_graph = dependency_graph
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dependabot_alerts Object to be assigned
    def dependabot_alerts=(dependabot_alerts)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(dependabot_alerts)
        fail ArgumentError, "invalid value for \"dependabot_alerts\", must be one of #{validator.allowable_values}."
      end
      @dependabot_alerts = dependabot_alerts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dependabot_security_updates Object to be assigned
    def dependabot_security_updates=(dependabot_security_updates)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(dependabot_security_updates)
        fail ArgumentError, "invalid value for \"dependabot_security_updates\", must be one of #{validator.allowable_values}."
      end
      @dependabot_security_updates = dependabot_security_updates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code_scanning_default_setup Object to be assigned
    def code_scanning_default_setup=(code_scanning_default_setup)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(code_scanning_default_setup)
        fail ArgumentError, "invalid value for \"code_scanning_default_setup\", must be one of #{validator.allowable_values}."
      end
      @code_scanning_default_setup = code_scanning_default_setup
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret_scanning Object to be assigned
    def secret_scanning=(secret_scanning)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(secret_scanning)
        fail ArgumentError, "invalid value for \"secret_scanning\", must be one of #{validator.allowable_values}."
      end
      @secret_scanning = secret_scanning
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret_scanning_push_protection Object to be assigned
    def secret_scanning_push_protection=(secret_scanning_push_protection)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(secret_scanning_push_protection)
        fail ArgumentError, "invalid value for \"secret_scanning_push_protection\", must be one of #{validator.allowable_values}."
      end
      @secret_scanning_push_protection = secret_scanning_push_protection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] private_vulnerability_reporting Object to be assigned
    def private_vulnerability_reporting=(private_vulnerability_reporting)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "not_set"])
      unless validator.valid?(private_vulnerability_reporting)
        fail ArgumentError, "invalid value for \"private_vulnerability_reporting\", must be one of #{validator.allowable_values}."
      end
      @private_vulnerability_reporting = private_vulnerability_reporting
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          target_type == o.target_type &&
          description == o.description &&
          advanced_security == o.advanced_security &&
          dependency_graph == o.dependency_graph &&
          dependabot_alerts == o.dependabot_alerts &&
          dependabot_security_updates == o.dependabot_security_updates &&
          code_scanning_default_setup == o.code_scanning_default_setup &&
          secret_scanning == o.secret_scanning &&
          secret_scanning_push_protection == o.secret_scanning_push_protection &&
          private_vulnerability_reporting == o.private_vulnerability_reporting &&
          url == o.url &&
          html_url == o.html_url &&
          created_at == o.created_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, target_type, description, advanced_security, dependency_graph, dependabot_alerts, dependabot_security_updates, code_scanning_default_setup, secret_scanning, secret_scanning_push_protection, private_vulnerability_reporting, url, html_url, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
