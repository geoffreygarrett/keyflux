=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # A run of a CodeQL query against one or more repositories.
  class CodeScanningVariantAnalysis
    # The ID of the variant analysis.
    attr_accessor :id

    attr_accessor :controller_repo

    attr_accessor :actor

    attr_accessor :query_language

    # The download url for the query pack.
    attr_accessor :query_pack_url

    # The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    attr_accessor :created_at

    # The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    attr_accessor :updated_at

    # The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
    attr_accessor :completed_at

    attr_accessor :status

    # The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
    attr_accessor :actions_workflow_run_id

    # The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
    attr_accessor :failure_reason

    attr_accessor :scanned_repositories

    attr_accessor :skipped_repositories

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'controller_repo' => :'controller_repo',
        :'actor' => :'actor',
        :'query_language' => :'query_language',
        :'query_pack_url' => :'query_pack_url',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'completed_at' => :'completed_at',
        :'status' => :'status',
        :'actions_workflow_run_id' => :'actions_workflow_run_id',
        :'failure_reason' => :'failure_reason',
        :'scanned_repositories' => :'scanned_repositories',
        :'skipped_repositories' => :'skipped_repositories'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'controller_repo' => :'SimpleRepository',
        :'actor' => :'SimpleUser',
        :'query_language' => :'CodeScanningVariantAnalysisLanguage',
        :'query_pack_url' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'completed_at' => :'Time',
        :'status' => :'String',
        :'actions_workflow_run_id' => :'Integer',
        :'failure_reason' => :'String',
        :'scanned_repositories' => :'Array<CodeScanningVariantAnalysisScannedRepositoriesInner>',
        :'skipped_repositories' => :'CodeScanningVariantAnalysisSkippedRepositories'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completed_at',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CodeScanningVariantAnalysis` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CodeScanningVariantAnalysis`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'controller_repo')
        self.controller_repo = attributes[:'controller_repo']
      end

      if attributes.key?(:'actor')
        self.actor = attributes[:'actor']
      end

      if attributes.key?(:'query_language')
        self.query_language = attributes[:'query_language']
      end

      if attributes.key?(:'query_pack_url')
        self.query_pack_url = attributes[:'query_pack_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'actions_workflow_run_id')
        self.actions_workflow_run_id = attributes[:'actions_workflow_run_id']
      end

      if attributes.key?(:'failure_reason')
        self.failure_reason = attributes[:'failure_reason']
      end

      if attributes.key?(:'scanned_repositories')
        if (value = attributes[:'scanned_repositories']).is_a?(Array)
          self.scanned_repositories = value
        end
      end

      if attributes.key?(:'skipped_repositories')
        self.skipped_repositories = attributes[:'skipped_repositories']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @controller_repo.nil?
        invalid_properties.push('invalid value for "controller_repo", controller_repo cannot be nil.')
      end

      if @actor.nil?
        invalid_properties.push('invalid value for "actor", actor cannot be nil.')
      end

      if @query_language.nil?
        invalid_properties.push('invalid value for "query_language", query_language cannot be nil.')
      end

      if @query_pack_url.nil?
        invalid_properties.push('invalid value for "query_pack_url", query_pack_url cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @controller_repo.nil?
      return false if @actor.nil?
      return false if @query_language.nil?
      return false if @query_pack_url.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["in_progress", "succeeded", "failed", "cancelled"])
      return false unless status_validator.valid?(@status)
      failure_reason_validator = EnumAttributeValidator.new('String', ["no_repos_queried", "actions_workflow_run_failed", "internal_error"])
      return false unless failure_reason_validator.valid?(@failure_reason)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["in_progress", "succeeded", "failed", "cancelled"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(failure_reason)
      validator = EnumAttributeValidator.new('String', ["no_repos_queried", "actions_workflow_run_failed", "internal_error"])
      unless validator.valid?(failure_reason)
        fail ArgumentError, "invalid value for \"failure_reason\", must be one of #{validator.allowable_values}."
      end
      @failure_reason = failure_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          controller_repo == o.controller_repo &&
          actor == o.actor &&
          query_language == o.query_language &&
          query_pack_url == o.query_pack_url &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          completed_at == o.completed_at &&
          status == o.status &&
          actions_workflow_run_id == o.actions_workflow_run_id &&
          failure_reason == o.failure_reason &&
          scanned_repositories == o.scanned_repositories &&
          skipped_repositories == o.skipped_repositories
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, controller_repo, actor, query_language, query_pack_url, created_at, updated_at, completed_at, status, actions_workflow_run_id, failure_reason, scanned_repositories, skipped_repositories].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
