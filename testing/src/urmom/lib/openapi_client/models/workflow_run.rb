=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WorkflowRun
    attr_accessor :actor

    attr_accessor :artifacts_url

    attr_accessor :cancel_url

    attr_accessor :check_suite_id

    attr_accessor :check_suite_node_id

    attr_accessor :check_suite_url

    attr_accessor :conclusion

    attr_accessor :created_at

    attr_accessor :event

    attr_accessor :head_branch

    attr_accessor :head_commit

    attr_accessor :head_repository

    attr_accessor :head_sha

    attr_accessor :html_url

    attr_accessor :id

    attr_accessor :jobs_url

    attr_accessor :logs_url

    attr_accessor :name

    attr_accessor :node_id

    attr_accessor :path

    attr_accessor :previous_attempt_url

    attr_accessor :pull_requests

    attr_accessor :referenced_workflows

    attr_accessor :repository

    attr_accessor :rerun_url

    attr_accessor :run_attempt

    attr_accessor :run_number

    attr_accessor :run_started_at

    attr_accessor :status

    attr_accessor :triggering_actor

    attr_accessor :updated_at

    attr_accessor :url

    attr_accessor :workflow_id

    attr_accessor :workflow_url

    # The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
    attr_accessor :display_title

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actor' => :'actor',
        :'artifacts_url' => :'artifacts_url',
        :'cancel_url' => :'cancel_url',
        :'check_suite_id' => :'check_suite_id',
        :'check_suite_node_id' => :'check_suite_node_id',
        :'check_suite_url' => :'check_suite_url',
        :'conclusion' => :'conclusion',
        :'created_at' => :'created_at',
        :'event' => :'event',
        :'head_branch' => :'head_branch',
        :'head_commit' => :'head_commit',
        :'head_repository' => :'head_repository',
        :'head_sha' => :'head_sha',
        :'html_url' => :'html_url',
        :'id' => :'id',
        :'jobs_url' => :'jobs_url',
        :'logs_url' => :'logs_url',
        :'name' => :'name',
        :'node_id' => :'node_id',
        :'path' => :'path',
        :'previous_attempt_url' => :'previous_attempt_url',
        :'pull_requests' => :'pull_requests',
        :'referenced_workflows' => :'referenced_workflows',
        :'repository' => :'repository',
        :'rerun_url' => :'rerun_url',
        :'run_attempt' => :'run_attempt',
        :'run_number' => :'run_number',
        :'run_started_at' => :'run_started_at',
        :'status' => :'status',
        :'triggering_actor' => :'triggering_actor',
        :'updated_at' => :'updated_at',
        :'url' => :'url',
        :'workflow_id' => :'workflow_id',
        :'workflow_url' => :'workflow_url',
        :'display_title' => :'display_title'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'actor' => :'User',
        :'artifacts_url' => :'String',
        :'cancel_url' => :'String',
        :'check_suite_id' => :'Integer',
        :'check_suite_node_id' => :'String',
        :'check_suite_url' => :'String',
        :'conclusion' => :'String',
        :'created_at' => :'Time',
        :'event' => :'String',
        :'head_branch' => :'String',
        :'head_commit' => :'SimpleCommit',
        :'head_repository' => :'RepositoryLite',
        :'head_sha' => :'String',
        :'html_url' => :'String',
        :'id' => :'Integer',
        :'jobs_url' => :'String',
        :'logs_url' => :'String',
        :'name' => :'String',
        :'node_id' => :'String',
        :'path' => :'String',
        :'previous_attempt_url' => :'String',
        :'pull_requests' => :'Array<WorkflowRunPullRequestsInner>',
        :'referenced_workflows' => :'Array<DeploymentWorkflowRunReferencedWorkflowsInner>',
        :'repository' => :'RepositoryLite',
        :'rerun_url' => :'String',
        :'run_attempt' => :'Integer',
        :'run_number' => :'Integer',
        :'run_started_at' => :'Time',
        :'status' => :'String',
        :'triggering_actor' => :'User',
        :'updated_at' => :'Time',
        :'url' => :'String',
        :'workflow_id' => :'Integer',
        :'workflow_url' => :'String',
        :'display_title' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'actor',
        :'conclusion',
        :'head_branch',
        :'name',
        :'previous_attempt_url',
        :'referenced_workflows',
        :'triggering_actor',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WorkflowRun` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WorkflowRun`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'actor')
        self.actor = attributes[:'actor']
      end

      if attributes.key?(:'artifacts_url')
        self.artifacts_url = attributes[:'artifacts_url']
      end

      if attributes.key?(:'cancel_url')
        self.cancel_url = attributes[:'cancel_url']
      end

      if attributes.key?(:'check_suite_id')
        self.check_suite_id = attributes[:'check_suite_id']
      end

      if attributes.key?(:'check_suite_node_id')
        self.check_suite_node_id = attributes[:'check_suite_node_id']
      end

      if attributes.key?(:'check_suite_url')
        self.check_suite_url = attributes[:'check_suite_url']
      end

      if attributes.key?(:'conclusion')
        self.conclusion = attributes[:'conclusion']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'event')
        self.event = attributes[:'event']
      end

      if attributes.key?(:'head_branch')
        self.head_branch = attributes[:'head_branch']
      end

      if attributes.key?(:'head_commit')
        self.head_commit = attributes[:'head_commit']
      end

      if attributes.key?(:'head_repository')
        self.head_repository = attributes[:'head_repository']
      end

      if attributes.key?(:'head_sha')
        self.head_sha = attributes[:'head_sha']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'jobs_url')
        self.jobs_url = attributes[:'jobs_url']
      end

      if attributes.key?(:'logs_url')
        self.logs_url = attributes[:'logs_url']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'previous_attempt_url')
        self.previous_attempt_url = attributes[:'previous_attempt_url']
      end

      if attributes.key?(:'pull_requests')
        if (value = attributes[:'pull_requests']).is_a?(Array)
          self.pull_requests = value
        end
      end

      if attributes.key?(:'referenced_workflows')
        if (value = attributes[:'referenced_workflows']).is_a?(Array)
          self.referenced_workflows = value
        end
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'rerun_url')
        self.rerun_url = attributes[:'rerun_url']
      end

      if attributes.key?(:'run_attempt')
        self.run_attempt = attributes[:'run_attempt']
      end

      if attributes.key?(:'run_number')
        self.run_number = attributes[:'run_number']
      end

      if attributes.key?(:'run_started_at')
        self.run_started_at = attributes[:'run_started_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'triggering_actor')
        self.triggering_actor = attributes[:'triggering_actor']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'workflow_id')
        self.workflow_id = attributes[:'workflow_id']
      end

      if attributes.key?(:'workflow_url')
        self.workflow_url = attributes[:'workflow_url']
      end

      if attributes.key?(:'display_title')
        self.display_title = attributes[:'display_title']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @artifacts_url.nil?
        invalid_properties.push('invalid value for "artifacts_url", artifacts_url cannot be nil.')
      end

      if @cancel_url.nil?
        invalid_properties.push('invalid value for "cancel_url", cancel_url cannot be nil.')
      end

      if @check_suite_id.nil?
        invalid_properties.push('invalid value for "check_suite_id", check_suite_id cannot be nil.')
      end

      if @check_suite_node_id.nil?
        invalid_properties.push('invalid value for "check_suite_node_id", check_suite_node_id cannot be nil.')
      end

      if @check_suite_url.nil?
        invalid_properties.push('invalid value for "check_suite_url", check_suite_url cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @event.nil?
        invalid_properties.push('invalid value for "event", event cannot be nil.')
      end

      if @head_commit.nil?
        invalid_properties.push('invalid value for "head_commit", head_commit cannot be nil.')
      end

      if @head_repository.nil?
        invalid_properties.push('invalid value for "head_repository", head_repository cannot be nil.')
      end

      if @head_sha.nil?
        invalid_properties.push('invalid value for "head_sha", head_sha cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @jobs_url.nil?
        invalid_properties.push('invalid value for "jobs_url", jobs_url cannot be nil.')
      end

      if @logs_url.nil?
        invalid_properties.push('invalid value for "logs_url", logs_url cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @path.nil?
        invalid_properties.push('invalid value for "path", path cannot be nil.')
      end

      if @pull_requests.nil?
        invalid_properties.push('invalid value for "pull_requests", pull_requests cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      if @rerun_url.nil?
        invalid_properties.push('invalid value for "rerun_url", rerun_url cannot be nil.')
      end

      if @run_attempt.nil?
        invalid_properties.push('invalid value for "run_attempt", run_attempt cannot be nil.')
      end

      if @run_number.nil?
        invalid_properties.push('invalid value for "run_number", run_number cannot be nil.')
      end

      if @run_started_at.nil?
        invalid_properties.push('invalid value for "run_started_at", run_started_at cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @workflow_id.nil?
        invalid_properties.push('invalid value for "workflow_id", workflow_id cannot be nil.')
      end

      if @workflow_url.nil?
        invalid_properties.push('invalid value for "workflow_url", workflow_url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @artifacts_url.nil?
      return false if @cancel_url.nil?
      return false if @check_suite_id.nil?
      return false if @check_suite_node_id.nil?
      return false if @check_suite_url.nil?
      conclusion_validator = EnumAttributeValidator.new('String', ["action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out"])
      return false unless conclusion_validator.valid?(@conclusion)
      return false if @created_at.nil?
      return false if @event.nil?
      return false if @head_commit.nil?
      return false if @head_repository.nil?
      return false if @head_sha.nil?
      return false if @html_url.nil?
      return false if @id.nil?
      return false if @jobs_url.nil?
      return false if @logs_url.nil?
      return false if @node_id.nil?
      return false if @path.nil?
      return false if @pull_requests.nil?
      return false if @repository.nil?
      return false if @rerun_url.nil?
      return false if @run_attempt.nil?
      return false if @run_number.nil?
      return false if @run_started_at.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["requested", "in_progress", "completed", "queued", "pending", "waiting"])
      return false unless status_validator.valid?(@status)
      return false if @updated_at.nil?
      return false if @url.nil?
      return false if @workflow_id.nil?
      return false if @workflow_url.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conclusion Object to be assigned
    def conclusion=(conclusion)
      validator = EnumAttributeValidator.new('String', ["action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out"])
      unless validator.valid?(conclusion)
        fail ArgumentError, "invalid value for \"conclusion\", must be one of #{validator.allowable_values}."
      end
      @conclusion = conclusion
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["requested", "in_progress", "completed", "queued", "pending", "waiting"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actor == o.actor &&
          artifacts_url == o.artifacts_url &&
          cancel_url == o.cancel_url &&
          check_suite_id == o.check_suite_id &&
          check_suite_node_id == o.check_suite_node_id &&
          check_suite_url == o.check_suite_url &&
          conclusion == o.conclusion &&
          created_at == o.created_at &&
          event == o.event &&
          head_branch == o.head_branch &&
          head_commit == o.head_commit &&
          head_repository == o.head_repository &&
          head_sha == o.head_sha &&
          html_url == o.html_url &&
          id == o.id &&
          jobs_url == o.jobs_url &&
          logs_url == o.logs_url &&
          name == o.name &&
          node_id == o.node_id &&
          path == o.path &&
          previous_attempt_url == o.previous_attempt_url &&
          pull_requests == o.pull_requests &&
          referenced_workflows == o.referenced_workflows &&
          repository == o.repository &&
          rerun_url == o.rerun_url &&
          run_attempt == o.run_attempt &&
          run_number == o.run_number &&
          run_started_at == o.run_started_at &&
          status == o.status &&
          triggering_actor == o.triggering_actor &&
          updated_at == o.updated_at &&
          url == o.url &&
          workflow_id == o.workflow_id &&
          workflow_url == o.workflow_url &&
          display_title == o.display_title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [actor, artifacts_url, cancel_url, check_suite_id, check_suite_node_id, check_suite_url, conclusion, created_at, event, head_branch, head_commit, head_repository, head_sha, html_url, id, jobs_url, logs_url, name, node_id, path, previous_attempt_url, pull_requests, referenced_workflows, repository, rerun_url, run_attempt, run_number, run_started_at, status, triggering_actor, updated_at, url, workflow_id, workflow_url, display_title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
