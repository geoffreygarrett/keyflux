=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WebhookPush
    # The SHA of the most recent commit on `ref` after the push.
    attr_accessor :after

    attr_accessor :base_ref

    # The SHA of the most recent commit on `ref` before the push.
    attr_accessor :before

    # An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
    attr_accessor :commits

    # URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
    attr_accessor :compare

    # Whether this push created the `ref`.
    attr_accessor :created

    # Whether this push deleted the `ref`.
    attr_accessor :deleted

    attr_accessor :enterprise

    # Whether this push was a force push of the `ref`.
    attr_accessor :forced

    attr_accessor :head_commit

    attr_accessor :installation

    attr_accessor :organization

    attr_accessor :pusher

    # The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
    attr_accessor :ref

    attr_accessor :repository

    attr_accessor :sender

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'after' => :'after',
        :'base_ref' => :'base_ref',
        :'before' => :'before',
        :'commits' => :'commits',
        :'compare' => :'compare',
        :'created' => :'created',
        :'deleted' => :'deleted',
        :'enterprise' => :'enterprise',
        :'forced' => :'forced',
        :'head_commit' => :'head_commit',
        :'installation' => :'installation',
        :'organization' => :'organization',
        :'pusher' => :'pusher',
        :'ref' => :'ref',
        :'repository' => :'repository',
        :'sender' => :'sender'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'after' => :'String',
        :'base_ref' => :'String',
        :'before' => :'String',
        :'commits' => :'Array<Commit>',
        :'compare' => :'String',
        :'created' => :'Boolean',
        :'deleted' => :'Boolean',
        :'enterprise' => :'EnterpriseWebhooks',
        :'forced' => :'Boolean',
        :'head_commit' => :'Commit1',
        :'installation' => :'SimpleInstallation',
        :'organization' => :'OrganizationSimpleWebhooks',
        :'pusher' => :'Committer1',
        :'ref' => :'String',
        :'repository' => :'Repository3',
        :'sender' => :'SimpleUserWebhooks'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'base_ref',
        :'head_commit',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhookPush` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhookPush`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'after')
        self.after = attributes[:'after']
      end

      if attributes.key?(:'base_ref')
        self.base_ref = attributes[:'base_ref']
      end

      if attributes.key?(:'before')
        self.before = attributes[:'before']
      end

      if attributes.key?(:'commits')
        if (value = attributes[:'commits']).is_a?(Array)
          self.commits = value
        end
      end

      if attributes.key?(:'compare')
        self.compare = attributes[:'compare']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'enterprise')
        self.enterprise = attributes[:'enterprise']
      end

      if attributes.key?(:'forced')
        self.forced = attributes[:'forced']
      end

      if attributes.key?(:'head_commit')
        self.head_commit = attributes[:'head_commit']
      end

      if attributes.key?(:'installation')
        self.installation = attributes[:'installation']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'pusher')
        self.pusher = attributes[:'pusher']
      end

      if attributes.key?(:'ref')
        self.ref = attributes[:'ref']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @after.nil?
        invalid_properties.push('invalid value for "after", after cannot be nil.')
      end

      if @before.nil?
        invalid_properties.push('invalid value for "before", before cannot be nil.')
      end

      if @commits.nil?
        invalid_properties.push('invalid value for "commits", commits cannot be nil.')
      end

      if @compare.nil?
        invalid_properties.push('invalid value for "compare", compare cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @deleted.nil?
        invalid_properties.push('invalid value for "deleted", deleted cannot be nil.')
      end

      if @forced.nil?
        invalid_properties.push('invalid value for "forced", forced cannot be nil.')
      end

      if @pusher.nil?
        invalid_properties.push('invalid value for "pusher", pusher cannot be nil.')
      end

      if @ref.nil?
        invalid_properties.push('invalid value for "ref", ref cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @after.nil?
      return false if @before.nil?
      return false if @commits.nil?
      return false if @compare.nil?
      return false if @created.nil?
      return false if @deleted.nil?
      return false if @forced.nil?
      return false if @pusher.nil?
      return false if @ref.nil?
      return false if @repository.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          after == o.after &&
          base_ref == o.base_ref &&
          before == o.before &&
          commits == o.commits &&
          compare == o.compare &&
          created == o.created &&
          deleted == o.deleted &&
          enterprise == o.enterprise &&
          forced == o.forced &&
          head_commit == o.head_commit &&
          installation == o.installation &&
          organization == o.organization &&
          pusher == o.pusher &&
          ref == o.ref &&
          repository == o.repository &&
          sender == o.sender
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [after, base_ref, before, commits, compare, created, deleted, enterprise, forced, head_commit, installation, organization, pusher, ref, repository, sender].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
