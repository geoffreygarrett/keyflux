=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class PullRequestWebhookAllOf
    # Whether to allow auto-merge for pull requests.
    attr_accessor :allow_auto_merge

    # Whether to allow updating the pull request's branch.
    attr_accessor :allow_update_branch

    # Whether to delete head branches when pull requests are merged.
    attr_accessor :delete_branch_on_merge

    # The default value for a merge commit message. - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
    attr_accessor :merge_commit_message

    # The default value for a merge commit title. - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., \"Merge pull request #123 from branch-name\").
    attr_accessor :merge_commit_title

    # The default value for a squash merge commit message: - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
    attr_accessor :squash_merge_commit_message

    # The default value for a squash merge commit title: - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    attr_accessor :squash_merge_commit_title

    # Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
    attr_accessor :use_squash_pr_title_as_default

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_auto_merge' => :'allow_auto_merge',
        :'allow_update_branch' => :'allow_update_branch',
        :'delete_branch_on_merge' => :'delete_branch_on_merge',
        :'merge_commit_message' => :'merge_commit_message',
        :'merge_commit_title' => :'merge_commit_title',
        :'squash_merge_commit_message' => :'squash_merge_commit_message',
        :'squash_merge_commit_title' => :'squash_merge_commit_title',
        :'use_squash_pr_title_as_default' => :'use_squash_pr_title_as_default'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_auto_merge' => :'Boolean',
        :'allow_update_branch' => :'Boolean',
        :'delete_branch_on_merge' => :'Boolean',
        :'merge_commit_message' => :'String',
        :'merge_commit_title' => :'String',
        :'squash_merge_commit_message' => :'String',
        :'squash_merge_commit_title' => :'String',
        :'use_squash_pr_title_as_default' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PullRequestWebhookAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PullRequestWebhookAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_auto_merge')
        self.allow_auto_merge = attributes[:'allow_auto_merge']
      else
        self.allow_auto_merge = false
      end

      if attributes.key?(:'allow_update_branch')
        self.allow_update_branch = attributes[:'allow_update_branch']
      end

      if attributes.key?(:'delete_branch_on_merge')
        self.delete_branch_on_merge = attributes[:'delete_branch_on_merge']
      else
        self.delete_branch_on_merge = false
      end

      if attributes.key?(:'merge_commit_message')
        self.merge_commit_message = attributes[:'merge_commit_message']
      end

      if attributes.key?(:'merge_commit_title')
        self.merge_commit_title = attributes[:'merge_commit_title']
      end

      if attributes.key?(:'squash_merge_commit_message')
        self.squash_merge_commit_message = attributes[:'squash_merge_commit_message']
      end

      if attributes.key?(:'squash_merge_commit_title')
        self.squash_merge_commit_title = attributes[:'squash_merge_commit_title']
      end

      if attributes.key?(:'use_squash_pr_title_as_default')
        self.use_squash_pr_title_as_default = attributes[:'use_squash_pr_title_as_default']
      else
        self.use_squash_pr_title_as_default = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      merge_commit_message_validator = EnumAttributeValidator.new('String', ["PR_BODY", "PR_TITLE", "BLANK"])
      return false unless merge_commit_message_validator.valid?(@merge_commit_message)
      merge_commit_title_validator = EnumAttributeValidator.new('String', ["PR_TITLE", "MERGE_MESSAGE"])
      return false unless merge_commit_title_validator.valid?(@merge_commit_title)
      squash_merge_commit_message_validator = EnumAttributeValidator.new('String', ["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      return false unless squash_merge_commit_message_validator.valid?(@squash_merge_commit_message)
      squash_merge_commit_title_validator = EnumAttributeValidator.new('String', ["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      return false unless squash_merge_commit_title_validator.valid?(@squash_merge_commit_title)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merge_commit_message Object to be assigned
    def merge_commit_message=(merge_commit_message)
      validator = EnumAttributeValidator.new('String', ["PR_BODY", "PR_TITLE", "BLANK"])
      unless validator.valid?(merge_commit_message)
        fail ArgumentError, "invalid value for \"merge_commit_message\", must be one of #{validator.allowable_values}."
      end
      @merge_commit_message = merge_commit_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merge_commit_title Object to be assigned
    def merge_commit_title=(merge_commit_title)
      validator = EnumAttributeValidator.new('String', ["PR_TITLE", "MERGE_MESSAGE"])
      unless validator.valid?(merge_commit_title)
        fail ArgumentError, "invalid value for \"merge_commit_title\", must be one of #{validator.allowable_values}."
      end
      @merge_commit_title = merge_commit_title
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] squash_merge_commit_message Object to be assigned
    def squash_merge_commit_message=(squash_merge_commit_message)
      validator = EnumAttributeValidator.new('String', ["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      unless validator.valid?(squash_merge_commit_message)
        fail ArgumentError, "invalid value for \"squash_merge_commit_message\", must be one of #{validator.allowable_values}."
      end
      @squash_merge_commit_message = squash_merge_commit_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] squash_merge_commit_title Object to be assigned
    def squash_merge_commit_title=(squash_merge_commit_title)
      validator = EnumAttributeValidator.new('String', ["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      unless validator.valid?(squash_merge_commit_title)
        fail ArgumentError, "invalid value for \"squash_merge_commit_title\", must be one of #{validator.allowable_values}."
      end
      @squash_merge_commit_title = squash_merge_commit_title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_auto_merge == o.allow_auto_merge &&
          allow_update_branch == o.allow_update_branch &&
          delete_branch_on_merge == o.delete_branch_on_merge &&
          merge_commit_message == o.merge_commit_message &&
          merge_commit_title == o.merge_commit_title &&
          squash_merge_commit_message == o.squash_merge_commit_message &&
          squash_merge_commit_title == o.squash_merge_commit_title &&
          use_squash_pr_title_as_default == o.use_squash_pr_title_as_default
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_auto_merge, allow_update_branch, delete_branch_on_merge, merge_commit_message, merge_commit_title, squash_merge_commit_message, squash_merge_commit_title, use_squash_pr_title_as_default].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
