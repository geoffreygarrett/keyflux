=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WebhooksPullRequest5
    attr_accessor :_links

    attr_accessor :active_lock_reason

    attr_accessor :additions

    attr_accessor :assignee

    attr_accessor :assignees

    # How the author is associated with the repository.
    attr_accessor :author_association

    attr_accessor :auto_merge

    attr_accessor :base

    attr_accessor :body

    attr_accessor :changed_files

    attr_accessor :closed_at

    attr_accessor :comments

    attr_accessor :comments_url

    attr_accessor :commits

    attr_accessor :commits_url

    attr_accessor :created_at

    attr_accessor :deletions

    attr_accessor :diff_url

    # Indicates whether or not the pull request is a draft.
    attr_accessor :draft

    attr_accessor :head

    attr_accessor :html_url

    attr_accessor :id

    attr_accessor :issue_url

    attr_accessor :labels

    attr_accessor :locked

    # Indicates whether maintainers can modify the pull request.
    attr_accessor :maintainer_can_modify

    attr_accessor :merge_commit_sha

    attr_accessor :mergeable

    attr_accessor :mergeable_state

    attr_accessor :merged

    attr_accessor :merged_at

    attr_accessor :merged_by

    attr_accessor :milestone

    attr_accessor :node_id

    # Number uniquely identifying the pull request within its repository.
    attr_accessor :number

    attr_accessor :patch_url

    attr_accessor :rebaseable

    attr_accessor :requested_reviewers

    attr_accessor :requested_teams

    attr_accessor :review_comment_url

    attr_accessor :review_comments

    attr_accessor :review_comments_url

    # State of this Pull Request. Either `open` or `closed`.
    attr_accessor :state

    attr_accessor :statuses_url

    # The title of the pull request.
    attr_accessor :title

    attr_accessor :updated_at

    attr_accessor :url

    attr_accessor :user

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_links' => :'_links',
        :'active_lock_reason' => :'active_lock_reason',
        :'additions' => :'additions',
        :'assignee' => :'assignee',
        :'assignees' => :'assignees',
        :'author_association' => :'author_association',
        :'auto_merge' => :'auto_merge',
        :'base' => :'base',
        :'body' => :'body',
        :'changed_files' => :'changed_files',
        :'closed_at' => :'closed_at',
        :'comments' => :'comments',
        :'comments_url' => :'comments_url',
        :'commits' => :'commits',
        :'commits_url' => :'commits_url',
        :'created_at' => :'created_at',
        :'deletions' => :'deletions',
        :'diff_url' => :'diff_url',
        :'draft' => :'draft',
        :'head' => :'head',
        :'html_url' => :'html_url',
        :'id' => :'id',
        :'issue_url' => :'issue_url',
        :'labels' => :'labels',
        :'locked' => :'locked',
        :'maintainer_can_modify' => :'maintainer_can_modify',
        :'merge_commit_sha' => :'merge_commit_sha',
        :'mergeable' => :'mergeable',
        :'mergeable_state' => :'mergeable_state',
        :'merged' => :'merged',
        :'merged_at' => :'merged_at',
        :'merged_by' => :'merged_by',
        :'milestone' => :'milestone',
        :'node_id' => :'node_id',
        :'number' => :'number',
        :'patch_url' => :'patch_url',
        :'rebaseable' => :'rebaseable',
        :'requested_reviewers' => :'requested_reviewers',
        :'requested_teams' => :'requested_teams',
        :'review_comment_url' => :'review_comment_url',
        :'review_comments' => :'review_comments',
        :'review_comments_url' => :'review_comments_url',
        :'state' => :'state',
        :'statuses_url' => :'statuses_url',
        :'title' => :'title',
        :'updated_at' => :'updated_at',
        :'url' => :'url',
        :'user' => :'user'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_links' => :'WebhooksPullRequest5Links',
        :'active_lock_reason' => :'String',
        :'additions' => :'Integer',
        :'assignee' => :'User3',
        :'assignees' => :'Array<User3>',
        :'author_association' => :'String',
        :'auto_merge' => :'PullRequestAutoMerge',
        :'base' => :'WebhooksPullRequest5Base',
        :'body' => :'String',
        :'changed_files' => :'Integer',
        :'closed_at' => :'Time',
        :'comments' => :'Integer',
        :'comments_url' => :'String',
        :'commits' => :'Integer',
        :'commits_url' => :'String',
        :'created_at' => :'Time',
        :'deletions' => :'Integer',
        :'diff_url' => :'String',
        :'draft' => :'Boolean',
        :'head' => :'WebhooksPullRequest5Base',
        :'html_url' => :'String',
        :'id' => :'Integer',
        :'issue_url' => :'String',
        :'labels' => :'Array<Label>',
        :'locked' => :'Boolean',
        :'maintainer_can_modify' => :'Boolean',
        :'merge_commit_sha' => :'String',
        :'mergeable' => :'Boolean',
        :'mergeable_state' => :'String',
        :'merged' => :'Boolean',
        :'merged_at' => :'Time',
        :'merged_by' => :'User3',
        :'milestone' => :'Milestone',
        :'node_id' => :'String',
        :'number' => :'Integer',
        :'patch_url' => :'String',
        :'rebaseable' => :'Boolean',
        :'requested_reviewers' => :'Array<WebhooksPullRequest5RequestedReviewersInner>',
        :'requested_teams' => :'Array<Team>',
        :'review_comment_url' => :'String',
        :'review_comments' => :'Integer',
        :'review_comments_url' => :'String',
        :'state' => :'String',
        :'statuses_url' => :'String',
        :'title' => :'String',
        :'updated_at' => :'Time',
        :'url' => :'String',
        :'user' => :'User2'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'active_lock_reason',
        :'assignee',
        :'auto_merge',
        :'body',
        :'closed_at',
        :'merge_commit_sha',
        :'mergeable',
        :'merged',
        :'merged_at',
        :'merged_by',
        :'milestone',
        :'rebaseable',
        :'user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhooksPullRequest5` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhooksPullRequest5`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_links')
        self._links = attributes[:'_links']
      end

      if attributes.key?(:'active_lock_reason')
        self.active_lock_reason = attributes[:'active_lock_reason']
      end

      if attributes.key?(:'additions')
        self.additions = attributes[:'additions']
      end

      if attributes.key?(:'assignee')
        self.assignee = attributes[:'assignee']
      end

      if attributes.key?(:'assignees')
        if (value = attributes[:'assignees']).is_a?(Array)
          self.assignees = value
        end
      end

      if attributes.key?(:'author_association')
        self.author_association = attributes[:'author_association']
      end

      if attributes.key?(:'auto_merge')
        self.auto_merge = attributes[:'auto_merge']
      end

      if attributes.key?(:'base')
        self.base = attributes[:'base']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'changed_files')
        self.changed_files = attributes[:'changed_files']
      end

      if attributes.key?(:'closed_at')
        self.closed_at = attributes[:'closed_at']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'comments_url')
        self.comments_url = attributes[:'comments_url']
      end

      if attributes.key?(:'commits')
        self.commits = attributes[:'commits']
      end

      if attributes.key?(:'commits_url')
        self.commits_url = attributes[:'commits_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'deletions')
        self.deletions = attributes[:'deletions']
      end

      if attributes.key?(:'diff_url')
        self.diff_url = attributes[:'diff_url']
      end

      if attributes.key?(:'draft')
        self.draft = attributes[:'draft']
      end

      if attributes.key?(:'head')
        self.head = attributes[:'head']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'issue_url')
        self.issue_url = attributes[:'issue_url']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.key?(:'maintainer_can_modify')
        self.maintainer_can_modify = attributes[:'maintainer_can_modify']
      end

      if attributes.key?(:'merge_commit_sha')
        self.merge_commit_sha = attributes[:'merge_commit_sha']
      end

      if attributes.key?(:'mergeable')
        self.mergeable = attributes[:'mergeable']
      end

      if attributes.key?(:'mergeable_state')
        self.mergeable_state = attributes[:'mergeable_state']
      end

      if attributes.key?(:'merged')
        self.merged = attributes[:'merged']
      end

      if attributes.key?(:'merged_at')
        self.merged_at = attributes[:'merged_at']
      end

      if attributes.key?(:'merged_by')
        self.merged_by = attributes[:'merged_by']
      end

      if attributes.key?(:'milestone')
        self.milestone = attributes[:'milestone']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'patch_url')
        self.patch_url = attributes[:'patch_url']
      end

      if attributes.key?(:'rebaseable')
        self.rebaseable = attributes[:'rebaseable']
      end

      if attributes.key?(:'requested_reviewers')
        if (value = attributes[:'requested_reviewers']).is_a?(Array)
          self.requested_reviewers = value
        end
      end

      if attributes.key?(:'requested_teams')
        if (value = attributes[:'requested_teams']).is_a?(Array)
          self.requested_teams = value
        end
      end

      if attributes.key?(:'review_comment_url')
        self.review_comment_url = attributes[:'review_comment_url']
      end

      if attributes.key?(:'review_comments')
        self.review_comments = attributes[:'review_comments']
      end

      if attributes.key?(:'review_comments_url')
        self.review_comments_url = attributes[:'review_comments_url']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'statuses_url')
        self.statuses_url = attributes[:'statuses_url']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @_links.nil?
        invalid_properties.push('invalid value for "_links", _links cannot be nil.')
      end

      if @assignees.nil?
        invalid_properties.push('invalid value for "assignees", assignees cannot be nil.')
      end

      if @author_association.nil?
        invalid_properties.push('invalid value for "author_association", author_association cannot be nil.')
      end

      if @base.nil?
        invalid_properties.push('invalid value for "base", base cannot be nil.')
      end

      if @comments_url.nil?
        invalid_properties.push('invalid value for "comments_url", comments_url cannot be nil.')
      end

      if @commits_url.nil?
        invalid_properties.push('invalid value for "commits_url", commits_url cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @diff_url.nil?
        invalid_properties.push('invalid value for "diff_url", diff_url cannot be nil.')
      end

      if @draft.nil?
        invalid_properties.push('invalid value for "draft", draft cannot be nil.')
      end

      if @head.nil?
        invalid_properties.push('invalid value for "head", head cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @issue_url.nil?
        invalid_properties.push('invalid value for "issue_url", issue_url cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @locked.nil?
        invalid_properties.push('invalid value for "locked", locked cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @number.nil?
        invalid_properties.push('invalid value for "number", number cannot be nil.')
      end

      if @patch_url.nil?
        invalid_properties.push('invalid value for "patch_url", patch_url cannot be nil.')
      end

      if @requested_reviewers.nil?
        invalid_properties.push('invalid value for "requested_reviewers", requested_reviewers cannot be nil.')
      end

      if @requested_teams.nil?
        invalid_properties.push('invalid value for "requested_teams", requested_teams cannot be nil.')
      end

      if @review_comment_url.nil?
        invalid_properties.push('invalid value for "review_comment_url", review_comment_url cannot be nil.')
      end

      if @review_comments_url.nil?
        invalid_properties.push('invalid value for "review_comments_url", review_comments_url cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @statuses_url.nil?
        invalid_properties.push('invalid value for "statuses_url", statuses_url cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_links.nil?
      active_lock_reason_validator = EnumAttributeValidator.new('String', ["resolved", "off-topic", "too heated", "spam", "null"])
      return false unless active_lock_reason_validator.valid?(@active_lock_reason)
      return false if @assignees.nil?
      return false if @author_association.nil?
      author_association_validator = EnumAttributeValidator.new('String', ["COLLABORATOR", "CONTRIBUTOR", "FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR", "MANNEQUIN", "MEMBER", "NONE", "OWNER"])
      return false unless author_association_validator.valid?(@author_association)
      return false if @base.nil?
      return false if @comments_url.nil?
      return false if @commits_url.nil?
      return false if @created_at.nil?
      return false if @diff_url.nil?
      return false if @draft.nil?
      return false if @head.nil?
      return false if @html_url.nil?
      return false if @id.nil?
      return false if @issue_url.nil?
      return false if @labels.nil?
      return false if @locked.nil?
      return false if @node_id.nil?
      return false if @number.nil?
      return false if @patch_url.nil?
      return false if @requested_reviewers.nil?
      return false if @requested_teams.nil?
      return false if @review_comment_url.nil?
      return false if @review_comments_url.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["open", "closed"])
      return false unless state_validator.valid?(@state)
      return false if @statuses_url.nil?
      return false if @title.nil?
      return false if @updated_at.nil?
      return false if @url.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active_lock_reason Object to be assigned
    def active_lock_reason=(active_lock_reason)
      validator = EnumAttributeValidator.new('String', ["resolved", "off-topic", "too heated", "spam", "null"])
      unless validator.valid?(active_lock_reason)
        fail ArgumentError, "invalid value for \"active_lock_reason\", must be one of #{validator.allowable_values}."
      end
      @active_lock_reason = active_lock_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] author_association Object to be assigned
    def author_association=(author_association)
      validator = EnumAttributeValidator.new('String', ["COLLABORATOR", "CONTRIBUTOR", "FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR", "MANNEQUIN", "MEMBER", "NONE", "OWNER"])
      unless validator.valid?(author_association)
        fail ArgumentError, "invalid value for \"author_association\", must be one of #{validator.allowable_values}."
      end
      @author_association = author_association
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["open", "closed"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _links == o._links &&
          active_lock_reason == o.active_lock_reason &&
          additions == o.additions &&
          assignee == o.assignee &&
          assignees == o.assignees &&
          author_association == o.author_association &&
          auto_merge == o.auto_merge &&
          base == o.base &&
          body == o.body &&
          changed_files == o.changed_files &&
          closed_at == o.closed_at &&
          comments == o.comments &&
          comments_url == o.comments_url &&
          commits == o.commits &&
          commits_url == o.commits_url &&
          created_at == o.created_at &&
          deletions == o.deletions &&
          diff_url == o.diff_url &&
          draft == o.draft &&
          head == o.head &&
          html_url == o.html_url &&
          id == o.id &&
          issue_url == o.issue_url &&
          labels == o.labels &&
          locked == o.locked &&
          maintainer_can_modify == o.maintainer_can_modify &&
          merge_commit_sha == o.merge_commit_sha &&
          mergeable == o.mergeable &&
          mergeable_state == o.mergeable_state &&
          merged == o.merged &&
          merged_at == o.merged_at &&
          merged_by == o.merged_by &&
          milestone == o.milestone &&
          node_id == o.node_id &&
          number == o.number &&
          patch_url == o.patch_url &&
          rebaseable == o.rebaseable &&
          requested_reviewers == o.requested_reviewers &&
          requested_teams == o.requested_teams &&
          review_comment_url == o.review_comment_url &&
          review_comments == o.review_comments &&
          review_comments_url == o.review_comments_url &&
          state == o.state &&
          statuses_url == o.statuses_url &&
          title == o.title &&
          updated_at == o.updated_at &&
          url == o.url &&
          user == o.user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_links, active_lock_reason, additions, assignee, assignees, author_association, auto_merge, base, body, changed_files, closed_at, comments, comments_url, commits, commits_url, created_at, deletions, diff_url, draft, head, html_url, id, issue_url, labels, locked, maintainer_can_modify, merge_commit_sha, mergeable, mergeable_state, merged, merged_at, merged_by, milestone, node_id, number, patch_url, rebaseable, requested_reviewers, requested_teams, review_comment_url, review_comments, review_comments_url, state, statuses_url, title, updated_at, url, user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
