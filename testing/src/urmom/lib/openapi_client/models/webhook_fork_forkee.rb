=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.
  class WebhookForkForkee
    # Whether to allow auto-merge for pull requests.
    attr_accessor :allow_auto_merge

    attr_accessor :allow_forking

    # Whether to allow merge commits for pull requests.
    attr_accessor :allow_merge_commit

    # Whether to allow rebase merges for pull requests.
    attr_accessor :allow_rebase_merge

    # Whether to allow squash merges for pull requests.
    attr_accessor :allow_squash_merge

    attr_accessor :allow_update_branch

    attr_accessor :archive_url

    attr_accessor :archived

    attr_accessor :assignees_url

    attr_accessor :blobs_url

    attr_accessor :branches_url

    attr_accessor :clone_url

    attr_accessor :collaborators_url

    attr_accessor :comments_url

    attr_accessor :commits_url

    attr_accessor :compare_url

    attr_accessor :contents_url

    attr_accessor :contributors_url

    attr_accessor :created_at

    attr_accessor :default_branch

    # Whether to delete head branches when pull requests are merged
    attr_accessor :delete_branch_on_merge

    attr_accessor :deployments_url

    attr_accessor :description

    attr_accessor :disabled

    attr_accessor :downloads_url

    attr_accessor :events_url

    attr_accessor :fork

    attr_accessor :forks

    attr_accessor :forks_count

    attr_accessor :forks_url

    attr_accessor :full_name

    attr_accessor :git_commits_url

    attr_accessor :git_refs_url

    attr_accessor :git_tags_url

    attr_accessor :git_url

    attr_accessor :has_downloads

    attr_accessor :has_issues

    attr_accessor :has_pages

    attr_accessor :has_projects

    attr_accessor :has_wiki

    attr_accessor :homepage

    attr_accessor :hooks_url

    attr_accessor :html_url

    attr_accessor :id

    attr_accessor :is_template

    attr_accessor :issue_comment_url

    attr_accessor :issue_events_url

    attr_accessor :issues_url

    attr_accessor :keys_url

    attr_accessor :labels_url

    attr_accessor :language

    attr_accessor :languages_url

    attr_accessor :license

    attr_accessor :master_branch

    attr_accessor :merges_url

    attr_accessor :milestones_url

    attr_accessor :mirror_url

    attr_accessor :name

    attr_accessor :node_id

    attr_accessor :notifications_url

    attr_accessor :open_issues

    attr_accessor :open_issues_count

    attr_accessor :organization

    attr_accessor :owner

    attr_accessor :permissions

    attr_accessor :private

    attr_accessor :public

    attr_accessor :pulls_url

    attr_accessor :pushed_at

    attr_accessor :releases_url

    attr_accessor :role_name

    attr_accessor :size

    attr_accessor :ssh_url

    attr_accessor :stargazers

    attr_accessor :stargazers_count

    attr_accessor :stargazers_url

    attr_accessor :statuses_url

    attr_accessor :subscribers_url

    attr_accessor :subscription_url

    attr_accessor :svn_url

    attr_accessor :tags_url

    attr_accessor :teams_url

    attr_accessor :topics

    attr_accessor :trees_url

    attr_accessor :updated_at

    attr_accessor :url

    attr_accessor :visibility

    attr_accessor :watchers

    attr_accessor :watchers_count

    # Whether to require contributors to sign off on web-based commits
    attr_accessor :web_commit_signoff_required

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_auto_merge' => :'allow_auto_merge',
        :'allow_forking' => :'allow_forking',
        :'allow_merge_commit' => :'allow_merge_commit',
        :'allow_rebase_merge' => :'allow_rebase_merge',
        :'allow_squash_merge' => :'allow_squash_merge',
        :'allow_update_branch' => :'allow_update_branch',
        :'archive_url' => :'archive_url',
        :'archived' => :'archived',
        :'assignees_url' => :'assignees_url',
        :'blobs_url' => :'blobs_url',
        :'branches_url' => :'branches_url',
        :'clone_url' => :'clone_url',
        :'collaborators_url' => :'collaborators_url',
        :'comments_url' => :'comments_url',
        :'commits_url' => :'commits_url',
        :'compare_url' => :'compare_url',
        :'contents_url' => :'contents_url',
        :'contributors_url' => :'contributors_url',
        :'created_at' => :'created_at',
        :'default_branch' => :'default_branch',
        :'delete_branch_on_merge' => :'delete_branch_on_merge',
        :'deployments_url' => :'deployments_url',
        :'description' => :'description',
        :'disabled' => :'disabled',
        :'downloads_url' => :'downloads_url',
        :'events_url' => :'events_url',
        :'fork' => :'fork',
        :'forks' => :'forks',
        :'forks_count' => :'forks_count',
        :'forks_url' => :'forks_url',
        :'full_name' => :'full_name',
        :'git_commits_url' => :'git_commits_url',
        :'git_refs_url' => :'git_refs_url',
        :'git_tags_url' => :'git_tags_url',
        :'git_url' => :'git_url',
        :'has_downloads' => :'has_downloads',
        :'has_issues' => :'has_issues',
        :'has_pages' => :'has_pages',
        :'has_projects' => :'has_projects',
        :'has_wiki' => :'has_wiki',
        :'homepage' => :'homepage',
        :'hooks_url' => :'hooks_url',
        :'html_url' => :'html_url',
        :'id' => :'id',
        :'is_template' => :'is_template',
        :'issue_comment_url' => :'issue_comment_url',
        :'issue_events_url' => :'issue_events_url',
        :'issues_url' => :'issues_url',
        :'keys_url' => :'keys_url',
        :'labels_url' => :'labels_url',
        :'language' => :'language',
        :'languages_url' => :'languages_url',
        :'license' => :'license',
        :'master_branch' => :'master_branch',
        :'merges_url' => :'merges_url',
        :'milestones_url' => :'milestones_url',
        :'mirror_url' => :'mirror_url',
        :'name' => :'name',
        :'node_id' => :'node_id',
        :'notifications_url' => :'notifications_url',
        :'open_issues' => :'open_issues',
        :'open_issues_count' => :'open_issues_count',
        :'organization' => :'organization',
        :'owner' => :'owner',
        :'permissions' => :'permissions',
        :'private' => :'private',
        :'public' => :'public',
        :'pulls_url' => :'pulls_url',
        :'pushed_at' => :'pushed_at',
        :'releases_url' => :'releases_url',
        :'role_name' => :'role_name',
        :'size' => :'size',
        :'ssh_url' => :'ssh_url',
        :'stargazers' => :'stargazers',
        :'stargazers_count' => :'stargazers_count',
        :'stargazers_url' => :'stargazers_url',
        :'statuses_url' => :'statuses_url',
        :'subscribers_url' => :'subscribers_url',
        :'subscription_url' => :'subscription_url',
        :'svn_url' => :'svn_url',
        :'tags_url' => :'tags_url',
        :'teams_url' => :'teams_url',
        :'topics' => :'topics',
        :'trees_url' => :'trees_url',
        :'updated_at' => :'updated_at',
        :'url' => :'url',
        :'visibility' => :'visibility',
        :'watchers' => :'watchers',
        :'watchers_count' => :'watchers_count',
        :'web_commit_signoff_required' => :'web_commit_signoff_required'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_auto_merge' => :'Boolean',
        :'allow_forking' => :'Boolean',
        :'allow_merge_commit' => :'Boolean',
        :'allow_rebase_merge' => :'Boolean',
        :'allow_squash_merge' => :'Boolean',
        :'allow_update_branch' => :'Boolean',
        :'archive_url' => :'String',
        :'archived' => :'Boolean',
        :'assignees_url' => :'String',
        :'blobs_url' => :'String',
        :'branches_url' => :'String',
        :'clone_url' => :'String',
        :'collaborators_url' => :'String',
        :'comments_url' => :'String',
        :'commits_url' => :'String',
        :'compare_url' => :'String',
        :'contents_url' => :'String',
        :'contributors_url' => :'String',
        :'created_at' => :'String',
        :'default_branch' => :'String',
        :'delete_branch_on_merge' => :'Boolean',
        :'deployments_url' => :'String',
        :'description' => :'String',
        :'disabled' => :'Boolean',
        :'downloads_url' => :'String',
        :'events_url' => :'String',
        :'fork' => :'Boolean',
        :'forks' => :'Integer',
        :'forks_count' => :'Integer',
        :'forks_url' => :'String',
        :'full_name' => :'String',
        :'git_commits_url' => :'String',
        :'git_refs_url' => :'String',
        :'git_tags_url' => :'String',
        :'git_url' => :'String',
        :'has_downloads' => :'Boolean',
        :'has_issues' => :'Boolean',
        :'has_pages' => :'Boolean',
        :'has_projects' => :'Boolean',
        :'has_wiki' => :'Boolean',
        :'homepage' => :'String',
        :'hooks_url' => :'String',
        :'html_url' => :'String',
        :'id' => :'Integer',
        :'is_template' => :'Boolean',
        :'issue_comment_url' => :'String',
        :'issue_events_url' => :'String',
        :'issues_url' => :'String',
        :'keys_url' => :'String',
        :'labels_url' => :'String',
        :'language' => :'Object',
        :'languages_url' => :'String',
        :'license' => :'Object',
        :'master_branch' => :'String',
        :'merges_url' => :'String',
        :'milestones_url' => :'String',
        :'mirror_url' => :'Object',
        :'name' => :'String',
        :'node_id' => :'String',
        :'notifications_url' => :'String',
        :'open_issues' => :'Integer',
        :'open_issues_count' => :'Integer',
        :'organization' => :'String',
        :'owner' => :'WebhooksSponsorshipMaintainer',
        :'permissions' => :'RepositoryPermissions',
        :'private' => :'Boolean',
        :'public' => :'Boolean',
        :'pulls_url' => :'String',
        :'pushed_at' => :'String',
        :'releases_url' => :'String',
        :'role_name' => :'String',
        :'size' => :'Integer',
        :'ssh_url' => :'String',
        :'stargazers' => :'Integer',
        :'stargazers_count' => :'Integer',
        :'stargazers_url' => :'String',
        :'statuses_url' => :'String',
        :'subscribers_url' => :'String',
        :'subscription_url' => :'String',
        :'svn_url' => :'String',
        :'tags_url' => :'String',
        :'teams_url' => :'String',
        :'topics' => :'Array<Object>',
        :'trees_url' => :'String',
        :'updated_at' => :'String',
        :'url' => :'String',
        :'visibility' => :'String',
        :'watchers' => :'Integer',
        :'watchers_count' => :'Integer',
        :'web_commit_signoff_required' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'homepage',
        :'language',
        :'license',
        :'mirror_url',
        :'role_name',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Repository1',
      :'WebhookForkForkeeAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhookForkForkee` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhookForkForkee`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_auto_merge')
        self.allow_auto_merge = attributes[:'allow_auto_merge']
      else
        self.allow_auto_merge = false
      end

      if attributes.key?(:'allow_forking')
        self.allow_forking = attributes[:'allow_forking']
      end

      if attributes.key?(:'allow_merge_commit')
        self.allow_merge_commit = attributes[:'allow_merge_commit']
      else
        self.allow_merge_commit = true
      end

      if attributes.key?(:'allow_rebase_merge')
        self.allow_rebase_merge = attributes[:'allow_rebase_merge']
      else
        self.allow_rebase_merge = true
      end

      if attributes.key?(:'allow_squash_merge')
        self.allow_squash_merge = attributes[:'allow_squash_merge']
      else
        self.allow_squash_merge = true
      end

      if attributes.key?(:'allow_update_branch')
        self.allow_update_branch = attributes[:'allow_update_branch']
      end

      if attributes.key?(:'archive_url')
        self.archive_url = attributes[:'archive_url']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'assignees_url')
        self.assignees_url = attributes[:'assignees_url']
      end

      if attributes.key?(:'blobs_url')
        self.blobs_url = attributes[:'blobs_url']
      end

      if attributes.key?(:'branches_url')
        self.branches_url = attributes[:'branches_url']
      end

      if attributes.key?(:'clone_url')
        self.clone_url = attributes[:'clone_url']
      end

      if attributes.key?(:'collaborators_url')
        self.collaborators_url = attributes[:'collaborators_url']
      end

      if attributes.key?(:'comments_url')
        self.comments_url = attributes[:'comments_url']
      end

      if attributes.key?(:'commits_url')
        self.commits_url = attributes[:'commits_url']
      end

      if attributes.key?(:'compare_url')
        self.compare_url = attributes[:'compare_url']
      end

      if attributes.key?(:'contents_url')
        self.contents_url = attributes[:'contents_url']
      end

      if attributes.key?(:'contributors_url')
        self.contributors_url = attributes[:'contributors_url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'default_branch')
        self.default_branch = attributes[:'default_branch']
      end

      if attributes.key?(:'delete_branch_on_merge')
        self.delete_branch_on_merge = attributes[:'delete_branch_on_merge']
      else
        self.delete_branch_on_merge = false
      end

      if attributes.key?(:'deployments_url')
        self.deployments_url = attributes[:'deployments_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'downloads_url')
        self.downloads_url = attributes[:'downloads_url']
      end

      if attributes.key?(:'events_url')
        self.events_url = attributes[:'events_url']
      end

      if attributes.key?(:'fork')
        self.fork = attributes[:'fork']
      end

      if attributes.key?(:'forks')
        self.forks = attributes[:'forks']
      end

      if attributes.key?(:'forks_count')
        self.forks_count = attributes[:'forks_count']
      end

      if attributes.key?(:'forks_url')
        self.forks_url = attributes[:'forks_url']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'git_commits_url')
        self.git_commits_url = attributes[:'git_commits_url']
      end

      if attributes.key?(:'git_refs_url')
        self.git_refs_url = attributes[:'git_refs_url']
      end

      if attributes.key?(:'git_tags_url')
        self.git_tags_url = attributes[:'git_tags_url']
      end

      if attributes.key?(:'git_url')
        self.git_url = attributes[:'git_url']
      end

      if attributes.key?(:'has_downloads')
        self.has_downloads = attributes[:'has_downloads']
      end

      if attributes.key?(:'has_issues')
        self.has_issues = attributes[:'has_issues']
      end

      if attributes.key?(:'has_pages')
        self.has_pages = attributes[:'has_pages']
      end

      if attributes.key?(:'has_projects')
        self.has_projects = attributes[:'has_projects']
      end

      if attributes.key?(:'has_wiki')
        self.has_wiki = attributes[:'has_wiki']
      end

      if attributes.key?(:'homepage')
        self.homepage = attributes[:'homepage']
      end

      if attributes.key?(:'hooks_url')
        self.hooks_url = attributes[:'hooks_url']
      end

      if attributes.key?(:'html_url')
        self.html_url = attributes[:'html_url']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_template')
        self.is_template = attributes[:'is_template']
      end

      if attributes.key?(:'issue_comment_url')
        self.issue_comment_url = attributes[:'issue_comment_url']
      end

      if attributes.key?(:'issue_events_url')
        self.issue_events_url = attributes[:'issue_events_url']
      end

      if attributes.key?(:'issues_url')
        self.issues_url = attributes[:'issues_url']
      end

      if attributes.key?(:'keys_url')
        self.keys_url = attributes[:'keys_url']
      end

      if attributes.key?(:'labels_url')
        self.labels_url = attributes[:'labels_url']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'languages_url')
        self.languages_url = attributes[:'languages_url']
      end

      if attributes.key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.key?(:'master_branch')
        self.master_branch = attributes[:'master_branch']
      end

      if attributes.key?(:'merges_url')
        self.merges_url = attributes[:'merges_url']
      end

      if attributes.key?(:'milestones_url')
        self.milestones_url = attributes[:'milestones_url']
      end

      if attributes.key?(:'mirror_url')
        self.mirror_url = attributes[:'mirror_url']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'notifications_url')
        self.notifications_url = attributes[:'notifications_url']
      end

      if attributes.key?(:'open_issues')
        self.open_issues = attributes[:'open_issues']
      end

      if attributes.key?(:'open_issues_count')
        self.open_issues_count = attributes[:'open_issues_count']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'public')
        self.public = attributes[:'public']
      end

      if attributes.key?(:'pulls_url')
        self.pulls_url = attributes[:'pulls_url']
      end

      if attributes.key?(:'pushed_at')
        self.pushed_at = attributes[:'pushed_at']
      end

      if attributes.key?(:'releases_url')
        self.releases_url = attributes[:'releases_url']
      end

      if attributes.key?(:'role_name')
        self.role_name = attributes[:'role_name']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'ssh_url')
        self.ssh_url = attributes[:'ssh_url']
      end

      if attributes.key?(:'stargazers')
        self.stargazers = attributes[:'stargazers']
      end

      if attributes.key?(:'stargazers_count')
        self.stargazers_count = attributes[:'stargazers_count']
      end

      if attributes.key?(:'stargazers_url')
        self.stargazers_url = attributes[:'stargazers_url']
      end

      if attributes.key?(:'statuses_url')
        self.statuses_url = attributes[:'statuses_url']
      end

      if attributes.key?(:'subscribers_url')
        self.subscribers_url = attributes[:'subscribers_url']
      end

      if attributes.key?(:'subscription_url')
        self.subscription_url = attributes[:'subscription_url']
      end

      if attributes.key?(:'svn_url')
        self.svn_url = attributes[:'svn_url']
      end

      if attributes.key?(:'tags_url')
        self.tags_url = attributes[:'tags_url']
      end

      if attributes.key?(:'teams_url')
        self.teams_url = attributes[:'teams_url']
      end

      if attributes.key?(:'topics')
        if (value = attributes[:'topics']).is_a?(Array)
          self.topics = value
        end
      end

      if attributes.key?(:'trees_url')
        self.trees_url = attributes[:'trees_url']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end

      if attributes.key?(:'watchers')
        self.watchers = attributes[:'watchers']
      end

      if attributes.key?(:'watchers_count')
        self.watchers_count = attributes[:'watchers_count']
      end

      if attributes.key?(:'web_commit_signoff_required')
        self.web_commit_signoff_required = attributes[:'web_commit_signoff_required']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @archive_url.nil?
        invalid_properties.push('invalid value for "archive_url", archive_url cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @assignees_url.nil?
        invalid_properties.push('invalid value for "assignees_url", assignees_url cannot be nil.')
      end

      if @blobs_url.nil?
        invalid_properties.push('invalid value for "blobs_url", blobs_url cannot be nil.')
      end

      if @branches_url.nil?
        invalid_properties.push('invalid value for "branches_url", branches_url cannot be nil.')
      end

      if @clone_url.nil?
        invalid_properties.push('invalid value for "clone_url", clone_url cannot be nil.')
      end

      if @collaborators_url.nil?
        invalid_properties.push('invalid value for "collaborators_url", collaborators_url cannot be nil.')
      end

      if @comments_url.nil?
        invalid_properties.push('invalid value for "comments_url", comments_url cannot be nil.')
      end

      if @commits_url.nil?
        invalid_properties.push('invalid value for "commits_url", commits_url cannot be nil.')
      end

      if @compare_url.nil?
        invalid_properties.push('invalid value for "compare_url", compare_url cannot be nil.')
      end

      if @contents_url.nil?
        invalid_properties.push('invalid value for "contents_url", contents_url cannot be nil.')
      end

      if @contributors_url.nil?
        invalid_properties.push('invalid value for "contributors_url", contributors_url cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @default_branch.nil?
        invalid_properties.push('invalid value for "default_branch", default_branch cannot be nil.')
      end

      if @deployments_url.nil?
        invalid_properties.push('invalid value for "deployments_url", deployments_url cannot be nil.')
      end

      if @downloads_url.nil?
        invalid_properties.push('invalid value for "downloads_url", downloads_url cannot be nil.')
      end

      if @events_url.nil?
        invalid_properties.push('invalid value for "events_url", events_url cannot be nil.')
      end

      if @fork.nil?
        invalid_properties.push('invalid value for "fork", fork cannot be nil.')
      end

      if @forks.nil?
        invalid_properties.push('invalid value for "forks", forks cannot be nil.')
      end

      if @forks_count.nil?
        invalid_properties.push('invalid value for "forks_count", forks_count cannot be nil.')
      end

      if @forks_url.nil?
        invalid_properties.push('invalid value for "forks_url", forks_url cannot be nil.')
      end

      if @full_name.nil?
        invalid_properties.push('invalid value for "full_name", full_name cannot be nil.')
      end

      if @git_commits_url.nil?
        invalid_properties.push('invalid value for "git_commits_url", git_commits_url cannot be nil.')
      end

      if @git_refs_url.nil?
        invalid_properties.push('invalid value for "git_refs_url", git_refs_url cannot be nil.')
      end

      if @git_tags_url.nil?
        invalid_properties.push('invalid value for "git_tags_url", git_tags_url cannot be nil.')
      end

      if @git_url.nil?
        invalid_properties.push('invalid value for "git_url", git_url cannot be nil.')
      end

      if @has_downloads.nil?
        invalid_properties.push('invalid value for "has_downloads", has_downloads cannot be nil.')
      end

      if @has_issues.nil?
        invalid_properties.push('invalid value for "has_issues", has_issues cannot be nil.')
      end

      if @has_pages.nil?
        invalid_properties.push('invalid value for "has_pages", has_pages cannot be nil.')
      end

      if @has_projects.nil?
        invalid_properties.push('invalid value for "has_projects", has_projects cannot be nil.')
      end

      if @has_wiki.nil?
        invalid_properties.push('invalid value for "has_wiki", has_wiki cannot be nil.')
      end

      if @hooks_url.nil?
        invalid_properties.push('invalid value for "hooks_url", hooks_url cannot be nil.')
      end

      if @html_url.nil?
        invalid_properties.push('invalid value for "html_url", html_url cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @issue_comment_url.nil?
        invalid_properties.push('invalid value for "issue_comment_url", issue_comment_url cannot be nil.')
      end

      if @issue_events_url.nil?
        invalid_properties.push('invalid value for "issue_events_url", issue_events_url cannot be nil.')
      end

      if @issues_url.nil?
        invalid_properties.push('invalid value for "issues_url", issues_url cannot be nil.')
      end

      if @keys_url.nil?
        invalid_properties.push('invalid value for "keys_url", keys_url cannot be nil.')
      end

      if @labels_url.nil?
        invalid_properties.push('invalid value for "labels_url", labels_url cannot be nil.')
      end

      if @languages_url.nil?
        invalid_properties.push('invalid value for "languages_url", languages_url cannot be nil.')
      end

      if @merges_url.nil?
        invalid_properties.push('invalid value for "merges_url", merges_url cannot be nil.')
      end

      if @milestones_url.nil?
        invalid_properties.push('invalid value for "milestones_url", milestones_url cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @notifications_url.nil?
        invalid_properties.push('invalid value for "notifications_url", notifications_url cannot be nil.')
      end

      if @open_issues.nil?
        invalid_properties.push('invalid value for "open_issues", open_issues cannot be nil.')
      end

      if @open_issues_count.nil?
        invalid_properties.push('invalid value for "open_issues_count", open_issues_count cannot be nil.')
      end

      if @owner.nil?
        invalid_properties.push('invalid value for "owner", owner cannot be nil.')
      end

      if @private.nil?
        invalid_properties.push('invalid value for "private", private cannot be nil.')
      end

      if @pulls_url.nil?
        invalid_properties.push('invalid value for "pulls_url", pulls_url cannot be nil.')
      end

      if @pushed_at.nil?
        invalid_properties.push('invalid value for "pushed_at", pushed_at cannot be nil.')
      end

      if @releases_url.nil?
        invalid_properties.push('invalid value for "releases_url", releases_url cannot be nil.')
      end

      if @size.nil?
        invalid_properties.push('invalid value for "size", size cannot be nil.')
      end

      if @ssh_url.nil?
        invalid_properties.push('invalid value for "ssh_url", ssh_url cannot be nil.')
      end

      if @stargazers_count.nil?
        invalid_properties.push('invalid value for "stargazers_count", stargazers_count cannot be nil.')
      end

      if @stargazers_url.nil?
        invalid_properties.push('invalid value for "stargazers_url", stargazers_url cannot be nil.')
      end

      if @statuses_url.nil?
        invalid_properties.push('invalid value for "statuses_url", statuses_url cannot be nil.')
      end

      if @subscribers_url.nil?
        invalid_properties.push('invalid value for "subscribers_url", subscribers_url cannot be nil.')
      end

      if @subscription_url.nil?
        invalid_properties.push('invalid value for "subscription_url", subscription_url cannot be nil.')
      end

      if @svn_url.nil?
        invalid_properties.push('invalid value for "svn_url", svn_url cannot be nil.')
      end

      if @tags_url.nil?
        invalid_properties.push('invalid value for "tags_url", tags_url cannot be nil.')
      end

      if @teams_url.nil?
        invalid_properties.push('invalid value for "teams_url", teams_url cannot be nil.')
      end

      if @topics.nil?
        invalid_properties.push('invalid value for "topics", topics cannot be nil.')
      end

      if @trees_url.nil?
        invalid_properties.push('invalid value for "trees_url", trees_url cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @visibility.nil?
        invalid_properties.push('invalid value for "visibility", visibility cannot be nil.')
      end

      if @watchers.nil?
        invalid_properties.push('invalid value for "watchers", watchers cannot be nil.')
      end

      if @watchers_count.nil?
        invalid_properties.push('invalid value for "watchers_count", watchers_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @archive_url.nil?
      return false if @archived.nil?
      return false if @assignees_url.nil?
      return false if @blobs_url.nil?
      return false if @branches_url.nil?
      return false if @clone_url.nil?
      return false if @collaborators_url.nil?
      return false if @comments_url.nil?
      return false if @commits_url.nil?
      return false if @compare_url.nil?
      return false if @contents_url.nil?
      return false if @contributors_url.nil?
      return false if @created_at.nil?
      return false if @default_branch.nil?
      return false if @deployments_url.nil?
      return false if @downloads_url.nil?
      return false if @events_url.nil?
      return false if @fork.nil?
      fork_validator = EnumAttributeValidator.new('Boolean', ["true"])
      return false unless fork_validator.valid?(@fork)
      return false if @forks.nil?
      return false if @forks_count.nil?
      return false if @forks_url.nil?
      return false if @full_name.nil?
      return false if @git_commits_url.nil?
      return false if @git_refs_url.nil?
      return false if @git_tags_url.nil?
      return false if @git_url.nil?
      return false if @has_downloads.nil?
      return false if @has_issues.nil?
      return false if @has_pages.nil?
      return false if @has_projects.nil?
      return false if @has_wiki.nil?
      return false if @hooks_url.nil?
      return false if @html_url.nil?
      return false if @id.nil?
      return false if @issue_comment_url.nil?
      return false if @issue_events_url.nil?
      return false if @issues_url.nil?
      return false if @keys_url.nil?
      return false if @labels_url.nil?
      return false if @languages_url.nil?
      return false if @merges_url.nil?
      return false if @milestones_url.nil?
      return false if @name.nil?
      return false if @node_id.nil?
      return false if @notifications_url.nil?
      return false if @open_issues.nil?
      return false if @open_issues_count.nil?
      return false if @owner.nil?
      return false if @private.nil?
      return false if @pulls_url.nil?
      return false if @pushed_at.nil?
      return false if @releases_url.nil?
      return false if @size.nil?
      return false if @ssh_url.nil?
      return false if @stargazers_count.nil?
      return false if @stargazers_url.nil?
      return false if @statuses_url.nil?
      return false if @subscribers_url.nil?
      return false if @subscription_url.nil?
      return false if @svn_url.nil?
      return false if @tags_url.nil?
      return false if @teams_url.nil?
      return false if @topics.nil?
      return false if @trees_url.nil?
      return false if @updated_at.nil?
      return false if @url.nil?
      return false if @visibility.nil?
      return false if @watchers.nil?
      return false if @watchers_count.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fork Object to be assigned
    def fork=(fork)
      validator = EnumAttributeValidator.new('Boolean', ["true"])
      unless validator.valid?(fork)
        fail ArgumentError, "invalid value for \"fork\", must be one of #{validator.allowable_values}."
      end
      @fork = fork
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_auto_merge == o.allow_auto_merge &&
          allow_forking == o.allow_forking &&
          allow_merge_commit == o.allow_merge_commit &&
          allow_rebase_merge == o.allow_rebase_merge &&
          allow_squash_merge == o.allow_squash_merge &&
          allow_update_branch == o.allow_update_branch &&
          archive_url == o.archive_url &&
          archived == o.archived &&
          assignees_url == o.assignees_url &&
          blobs_url == o.blobs_url &&
          branches_url == o.branches_url &&
          clone_url == o.clone_url &&
          collaborators_url == o.collaborators_url &&
          comments_url == o.comments_url &&
          commits_url == o.commits_url &&
          compare_url == o.compare_url &&
          contents_url == o.contents_url &&
          contributors_url == o.contributors_url &&
          created_at == o.created_at &&
          default_branch == o.default_branch &&
          delete_branch_on_merge == o.delete_branch_on_merge &&
          deployments_url == o.deployments_url &&
          description == o.description &&
          disabled == o.disabled &&
          downloads_url == o.downloads_url &&
          events_url == o.events_url &&
          fork == o.fork &&
          forks == o.forks &&
          forks_count == o.forks_count &&
          forks_url == o.forks_url &&
          full_name == o.full_name &&
          git_commits_url == o.git_commits_url &&
          git_refs_url == o.git_refs_url &&
          git_tags_url == o.git_tags_url &&
          git_url == o.git_url &&
          has_downloads == o.has_downloads &&
          has_issues == o.has_issues &&
          has_pages == o.has_pages &&
          has_projects == o.has_projects &&
          has_wiki == o.has_wiki &&
          homepage == o.homepage &&
          hooks_url == o.hooks_url &&
          html_url == o.html_url &&
          id == o.id &&
          is_template == o.is_template &&
          issue_comment_url == o.issue_comment_url &&
          issue_events_url == o.issue_events_url &&
          issues_url == o.issues_url &&
          keys_url == o.keys_url &&
          labels_url == o.labels_url &&
          language == o.language &&
          languages_url == o.languages_url &&
          license == o.license &&
          master_branch == o.master_branch &&
          merges_url == o.merges_url &&
          milestones_url == o.milestones_url &&
          mirror_url == o.mirror_url &&
          name == o.name &&
          node_id == o.node_id &&
          notifications_url == o.notifications_url &&
          open_issues == o.open_issues &&
          open_issues_count == o.open_issues_count &&
          organization == o.organization &&
          owner == o.owner &&
          permissions == o.permissions &&
          private == o.private &&
          public == o.public &&
          pulls_url == o.pulls_url &&
          pushed_at == o.pushed_at &&
          releases_url == o.releases_url &&
          role_name == o.role_name &&
          size == o.size &&
          ssh_url == o.ssh_url &&
          stargazers == o.stargazers &&
          stargazers_count == o.stargazers_count &&
          stargazers_url == o.stargazers_url &&
          statuses_url == o.statuses_url &&
          subscribers_url == o.subscribers_url &&
          subscription_url == o.subscription_url &&
          svn_url == o.svn_url &&
          tags_url == o.tags_url &&
          teams_url == o.teams_url &&
          topics == o.topics &&
          trees_url == o.trees_url &&
          updated_at == o.updated_at &&
          url == o.url &&
          visibility == o.visibility &&
          watchers == o.watchers &&
          watchers_count == o.watchers_count &&
          web_commit_signoff_required == o.web_commit_signoff_required
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_auto_merge, allow_forking, allow_merge_commit, allow_rebase_merge, allow_squash_merge, allow_update_branch, archive_url, archived, assignees_url, blobs_url, branches_url, clone_url, collaborators_url, comments_url, commits_url, compare_url, contents_url, contributors_url, created_at, default_branch, delete_branch_on_merge, deployments_url, description, disabled, downloads_url, events_url, fork, forks, forks_count, forks_url, full_name, git_commits_url, git_refs_url, git_tags_url, git_url, has_downloads, has_issues, has_pages, has_projects, has_wiki, homepage, hooks_url, html_url, id, is_template, issue_comment_url, issue_events_url, issues_url, keys_url, labels_url, language, languages_url, license, master_branch, merges_url, milestones_url, mirror_url, name, node_id, notifications_url, open_issues, open_issues_count, organization, owner, permissions, private, public, pulls_url, pushed_at, releases_url, role_name, size, ssh_url, stargazers, stargazers_count, stargazers_url, statuses_url, subscribers_url, subscription_url, svn_url, tags_url, teams_url, topics, trees_url, updated_at, url, visibility, watchers, watchers_count, web_commit_signoff_required].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
