=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  class WebhooksRule
    attr_accessor :admin_enforced

    attr_accessor :allow_deletions_enforcement_level

    attr_accessor :allow_force_pushes_enforcement_level

    attr_accessor :authorized_actor_names

    attr_accessor :authorized_actors_only

    attr_accessor :authorized_dismissal_actors_only

    attr_accessor :create_protected

    attr_accessor :created_at

    attr_accessor :dismiss_stale_reviews_on_push

    attr_accessor :id

    attr_accessor :ignore_approvals_from_contributors

    attr_accessor :linear_history_requirement_enforcement_level

    # The enforcement level of the branch lock setting. `off` means the branch is not locked, `non_admins` means the branch is read-only for non_admins, and `everyone` means the branch is read-only for everyone.
    attr_accessor :lock_branch_enforcement_level

    # Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks.
    attr_accessor :lock_allows_fork_sync

    attr_accessor :merge_queue_enforcement_level

    attr_accessor :name

    attr_accessor :pull_request_reviews_enforcement_level

    attr_accessor :repository_id

    attr_accessor :require_code_owner_review

    # Whether the most recent push must be approved by someone other than the person who pushed it
    attr_accessor :require_last_push_approval

    attr_accessor :required_approving_review_count

    attr_accessor :required_conversation_resolution_level

    attr_accessor :required_deployments_enforcement_level

    attr_accessor :required_status_checks

    attr_accessor :required_status_checks_enforcement_level

    attr_accessor :signature_requirement_enforcement_level

    attr_accessor :strict_required_status_checks_policy

    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'admin_enforced' => :'admin_enforced',
        :'allow_deletions_enforcement_level' => :'allow_deletions_enforcement_level',
        :'allow_force_pushes_enforcement_level' => :'allow_force_pushes_enforcement_level',
        :'authorized_actor_names' => :'authorized_actor_names',
        :'authorized_actors_only' => :'authorized_actors_only',
        :'authorized_dismissal_actors_only' => :'authorized_dismissal_actors_only',
        :'create_protected' => :'create_protected',
        :'created_at' => :'created_at',
        :'dismiss_stale_reviews_on_push' => :'dismiss_stale_reviews_on_push',
        :'id' => :'id',
        :'ignore_approvals_from_contributors' => :'ignore_approvals_from_contributors',
        :'linear_history_requirement_enforcement_level' => :'linear_history_requirement_enforcement_level',
        :'lock_branch_enforcement_level' => :'lock_branch_enforcement_level',
        :'lock_allows_fork_sync' => :'lock_allows_fork_sync',
        :'merge_queue_enforcement_level' => :'merge_queue_enforcement_level',
        :'name' => :'name',
        :'pull_request_reviews_enforcement_level' => :'pull_request_reviews_enforcement_level',
        :'repository_id' => :'repository_id',
        :'require_code_owner_review' => :'require_code_owner_review',
        :'require_last_push_approval' => :'require_last_push_approval',
        :'required_approving_review_count' => :'required_approving_review_count',
        :'required_conversation_resolution_level' => :'required_conversation_resolution_level',
        :'required_deployments_enforcement_level' => :'required_deployments_enforcement_level',
        :'required_status_checks' => :'required_status_checks',
        :'required_status_checks_enforcement_level' => :'required_status_checks_enforcement_level',
        :'signature_requirement_enforcement_level' => :'signature_requirement_enforcement_level',
        :'strict_required_status_checks_policy' => :'strict_required_status_checks_policy',
        :'updated_at' => :'updated_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'admin_enforced' => :'Boolean',
        :'allow_deletions_enforcement_level' => :'String',
        :'allow_force_pushes_enforcement_level' => :'String',
        :'authorized_actor_names' => :'Array<String>',
        :'authorized_actors_only' => :'Boolean',
        :'authorized_dismissal_actors_only' => :'Boolean',
        :'create_protected' => :'Boolean',
        :'created_at' => :'Time',
        :'dismiss_stale_reviews_on_push' => :'Boolean',
        :'id' => :'Integer',
        :'ignore_approvals_from_contributors' => :'Boolean',
        :'linear_history_requirement_enforcement_level' => :'String',
        :'lock_branch_enforcement_level' => :'String',
        :'lock_allows_fork_sync' => :'Boolean',
        :'merge_queue_enforcement_level' => :'String',
        :'name' => :'String',
        :'pull_request_reviews_enforcement_level' => :'String',
        :'repository_id' => :'Integer',
        :'require_code_owner_review' => :'Boolean',
        :'require_last_push_approval' => :'Boolean',
        :'required_approving_review_count' => :'Integer',
        :'required_conversation_resolution_level' => :'String',
        :'required_deployments_enforcement_level' => :'String',
        :'required_status_checks' => :'Array<String>',
        :'required_status_checks_enforcement_level' => :'String',
        :'signature_requirement_enforcement_level' => :'String',
        :'strict_required_status_checks_policy' => :'Boolean',
        :'updated_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhooksRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhooksRule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'admin_enforced')
        self.admin_enforced = attributes[:'admin_enforced']
      end

      if attributes.key?(:'allow_deletions_enforcement_level')
        self.allow_deletions_enforcement_level = attributes[:'allow_deletions_enforcement_level']
      end

      if attributes.key?(:'allow_force_pushes_enforcement_level')
        self.allow_force_pushes_enforcement_level = attributes[:'allow_force_pushes_enforcement_level']
      end

      if attributes.key?(:'authorized_actor_names')
        if (value = attributes[:'authorized_actor_names']).is_a?(Array)
          self.authorized_actor_names = value
        end
      end

      if attributes.key?(:'authorized_actors_only')
        self.authorized_actors_only = attributes[:'authorized_actors_only']
      end

      if attributes.key?(:'authorized_dismissal_actors_only')
        self.authorized_dismissal_actors_only = attributes[:'authorized_dismissal_actors_only']
      end

      if attributes.key?(:'create_protected')
        self.create_protected = attributes[:'create_protected']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'dismiss_stale_reviews_on_push')
        self.dismiss_stale_reviews_on_push = attributes[:'dismiss_stale_reviews_on_push']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ignore_approvals_from_contributors')
        self.ignore_approvals_from_contributors = attributes[:'ignore_approvals_from_contributors']
      end

      if attributes.key?(:'linear_history_requirement_enforcement_level')
        self.linear_history_requirement_enforcement_level = attributes[:'linear_history_requirement_enforcement_level']
      end

      if attributes.key?(:'lock_branch_enforcement_level')
        self.lock_branch_enforcement_level = attributes[:'lock_branch_enforcement_level']
      end

      if attributes.key?(:'lock_allows_fork_sync')
        self.lock_allows_fork_sync = attributes[:'lock_allows_fork_sync']
      end

      if attributes.key?(:'merge_queue_enforcement_level')
        self.merge_queue_enforcement_level = attributes[:'merge_queue_enforcement_level']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pull_request_reviews_enforcement_level')
        self.pull_request_reviews_enforcement_level = attributes[:'pull_request_reviews_enforcement_level']
      end

      if attributes.key?(:'repository_id')
        self.repository_id = attributes[:'repository_id']
      end

      if attributes.key?(:'require_code_owner_review')
        self.require_code_owner_review = attributes[:'require_code_owner_review']
      end

      if attributes.key?(:'require_last_push_approval')
        self.require_last_push_approval = attributes[:'require_last_push_approval']
      end

      if attributes.key?(:'required_approving_review_count')
        self.required_approving_review_count = attributes[:'required_approving_review_count']
      end

      if attributes.key?(:'required_conversation_resolution_level')
        self.required_conversation_resolution_level = attributes[:'required_conversation_resolution_level']
      end

      if attributes.key?(:'required_deployments_enforcement_level')
        self.required_deployments_enforcement_level = attributes[:'required_deployments_enforcement_level']
      end

      if attributes.key?(:'required_status_checks')
        if (value = attributes[:'required_status_checks']).is_a?(Array)
          self.required_status_checks = value
        end
      end

      if attributes.key?(:'required_status_checks_enforcement_level')
        self.required_status_checks_enforcement_level = attributes[:'required_status_checks_enforcement_level']
      end

      if attributes.key?(:'signature_requirement_enforcement_level')
        self.signature_requirement_enforcement_level = attributes[:'signature_requirement_enforcement_level']
      end

      if attributes.key?(:'strict_required_status_checks_policy')
        self.strict_required_status_checks_policy = attributes[:'strict_required_status_checks_policy']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @admin_enforced.nil?
        invalid_properties.push('invalid value for "admin_enforced", admin_enforced cannot be nil.')
      end

      if @allow_deletions_enforcement_level.nil?
        invalid_properties.push('invalid value for "allow_deletions_enforcement_level", allow_deletions_enforcement_level cannot be nil.')
      end

      if @allow_force_pushes_enforcement_level.nil?
        invalid_properties.push('invalid value for "allow_force_pushes_enforcement_level", allow_force_pushes_enforcement_level cannot be nil.')
      end

      if @authorized_actor_names.nil?
        invalid_properties.push('invalid value for "authorized_actor_names", authorized_actor_names cannot be nil.')
      end

      if @authorized_actors_only.nil?
        invalid_properties.push('invalid value for "authorized_actors_only", authorized_actors_only cannot be nil.')
      end

      if @authorized_dismissal_actors_only.nil?
        invalid_properties.push('invalid value for "authorized_dismissal_actors_only", authorized_dismissal_actors_only cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @dismiss_stale_reviews_on_push.nil?
        invalid_properties.push('invalid value for "dismiss_stale_reviews_on_push", dismiss_stale_reviews_on_push cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @ignore_approvals_from_contributors.nil?
        invalid_properties.push('invalid value for "ignore_approvals_from_contributors", ignore_approvals_from_contributors cannot be nil.')
      end

      if @linear_history_requirement_enforcement_level.nil?
        invalid_properties.push('invalid value for "linear_history_requirement_enforcement_level", linear_history_requirement_enforcement_level cannot be nil.')
      end

      if @lock_branch_enforcement_level.nil?
        invalid_properties.push('invalid value for "lock_branch_enforcement_level", lock_branch_enforcement_level cannot be nil.')
      end

      if @merge_queue_enforcement_level.nil?
        invalid_properties.push('invalid value for "merge_queue_enforcement_level", merge_queue_enforcement_level cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @pull_request_reviews_enforcement_level.nil?
        invalid_properties.push('invalid value for "pull_request_reviews_enforcement_level", pull_request_reviews_enforcement_level cannot be nil.')
      end

      if @repository_id.nil?
        invalid_properties.push('invalid value for "repository_id", repository_id cannot be nil.')
      end

      if @require_code_owner_review.nil?
        invalid_properties.push('invalid value for "require_code_owner_review", require_code_owner_review cannot be nil.')
      end

      if @required_approving_review_count.nil?
        invalid_properties.push('invalid value for "required_approving_review_count", required_approving_review_count cannot be nil.')
      end

      if @required_conversation_resolution_level.nil?
        invalid_properties.push('invalid value for "required_conversation_resolution_level", required_conversation_resolution_level cannot be nil.')
      end

      if @required_deployments_enforcement_level.nil?
        invalid_properties.push('invalid value for "required_deployments_enforcement_level", required_deployments_enforcement_level cannot be nil.')
      end

      if @required_status_checks.nil?
        invalid_properties.push('invalid value for "required_status_checks", required_status_checks cannot be nil.')
      end

      if @required_status_checks_enforcement_level.nil?
        invalid_properties.push('invalid value for "required_status_checks_enforcement_level", required_status_checks_enforcement_level cannot be nil.')
      end

      if @signature_requirement_enforcement_level.nil?
        invalid_properties.push('invalid value for "signature_requirement_enforcement_level", signature_requirement_enforcement_level cannot be nil.')
      end

      if @strict_required_status_checks_policy.nil?
        invalid_properties.push('invalid value for "strict_required_status_checks_policy", strict_required_status_checks_policy cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @admin_enforced.nil?
      return false if @allow_deletions_enforcement_level.nil?
      allow_deletions_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless allow_deletions_enforcement_level_validator.valid?(@allow_deletions_enforcement_level)
      return false if @allow_force_pushes_enforcement_level.nil?
      allow_force_pushes_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless allow_force_pushes_enforcement_level_validator.valid?(@allow_force_pushes_enforcement_level)
      return false if @authorized_actor_names.nil?
      return false if @authorized_actors_only.nil?
      return false if @authorized_dismissal_actors_only.nil?
      return false if @created_at.nil?
      return false if @dismiss_stale_reviews_on_push.nil?
      return false if @id.nil?
      return false if @ignore_approvals_from_contributors.nil?
      return false if @linear_history_requirement_enforcement_level.nil?
      linear_history_requirement_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless linear_history_requirement_enforcement_level_validator.valid?(@linear_history_requirement_enforcement_level)
      return false if @lock_branch_enforcement_level.nil?
      lock_branch_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless lock_branch_enforcement_level_validator.valid?(@lock_branch_enforcement_level)
      return false if @merge_queue_enforcement_level.nil?
      merge_queue_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless merge_queue_enforcement_level_validator.valid?(@merge_queue_enforcement_level)
      return false if @name.nil?
      return false if @pull_request_reviews_enforcement_level.nil?
      pull_request_reviews_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless pull_request_reviews_enforcement_level_validator.valid?(@pull_request_reviews_enforcement_level)
      return false if @repository_id.nil?
      return false if @require_code_owner_review.nil?
      return false if @required_approving_review_count.nil?
      return false if @required_conversation_resolution_level.nil?
      required_conversation_resolution_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless required_conversation_resolution_level_validator.valid?(@required_conversation_resolution_level)
      return false if @required_deployments_enforcement_level.nil?
      required_deployments_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless required_deployments_enforcement_level_validator.valid?(@required_deployments_enforcement_level)
      return false if @required_status_checks.nil?
      return false if @required_status_checks_enforcement_level.nil?
      required_status_checks_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless required_status_checks_enforcement_level_validator.valid?(@required_status_checks_enforcement_level)
      return false if @signature_requirement_enforcement_level.nil?
      signature_requirement_enforcement_level_validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      return false unless signature_requirement_enforcement_level_validator.valid?(@signature_requirement_enforcement_level)
      return false if @strict_required_status_checks_policy.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_deletions_enforcement_level Object to be assigned
    def allow_deletions_enforcement_level=(allow_deletions_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(allow_deletions_enforcement_level)
        fail ArgumentError, "invalid value for \"allow_deletions_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @allow_deletions_enforcement_level = allow_deletions_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_force_pushes_enforcement_level Object to be assigned
    def allow_force_pushes_enforcement_level=(allow_force_pushes_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(allow_force_pushes_enforcement_level)
        fail ArgumentError, "invalid value for \"allow_force_pushes_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @allow_force_pushes_enforcement_level = allow_force_pushes_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] linear_history_requirement_enforcement_level Object to be assigned
    def linear_history_requirement_enforcement_level=(linear_history_requirement_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(linear_history_requirement_enforcement_level)
        fail ArgumentError, "invalid value for \"linear_history_requirement_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @linear_history_requirement_enforcement_level = linear_history_requirement_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lock_branch_enforcement_level Object to be assigned
    def lock_branch_enforcement_level=(lock_branch_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(lock_branch_enforcement_level)
        fail ArgumentError, "invalid value for \"lock_branch_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @lock_branch_enforcement_level = lock_branch_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merge_queue_enforcement_level Object to be assigned
    def merge_queue_enforcement_level=(merge_queue_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(merge_queue_enforcement_level)
        fail ArgumentError, "invalid value for \"merge_queue_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @merge_queue_enforcement_level = merge_queue_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pull_request_reviews_enforcement_level Object to be assigned
    def pull_request_reviews_enforcement_level=(pull_request_reviews_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(pull_request_reviews_enforcement_level)
        fail ArgumentError, "invalid value for \"pull_request_reviews_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @pull_request_reviews_enforcement_level = pull_request_reviews_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] required_conversation_resolution_level Object to be assigned
    def required_conversation_resolution_level=(required_conversation_resolution_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(required_conversation_resolution_level)
        fail ArgumentError, "invalid value for \"required_conversation_resolution_level\", must be one of #{validator.allowable_values}."
      end
      @required_conversation_resolution_level = required_conversation_resolution_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] required_deployments_enforcement_level Object to be assigned
    def required_deployments_enforcement_level=(required_deployments_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(required_deployments_enforcement_level)
        fail ArgumentError, "invalid value for \"required_deployments_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @required_deployments_enforcement_level = required_deployments_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] required_status_checks_enforcement_level Object to be assigned
    def required_status_checks_enforcement_level=(required_status_checks_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(required_status_checks_enforcement_level)
        fail ArgumentError, "invalid value for \"required_status_checks_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @required_status_checks_enforcement_level = required_status_checks_enforcement_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] signature_requirement_enforcement_level Object to be assigned
    def signature_requirement_enforcement_level=(signature_requirement_enforcement_level)
      validator = EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      unless validator.valid?(signature_requirement_enforcement_level)
        fail ArgumentError, "invalid value for \"signature_requirement_enforcement_level\", must be one of #{validator.allowable_values}."
      end
      @signature_requirement_enforcement_level = signature_requirement_enforcement_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          admin_enforced == o.admin_enforced &&
          allow_deletions_enforcement_level == o.allow_deletions_enforcement_level &&
          allow_force_pushes_enforcement_level == o.allow_force_pushes_enforcement_level &&
          authorized_actor_names == o.authorized_actor_names &&
          authorized_actors_only == o.authorized_actors_only &&
          authorized_dismissal_actors_only == o.authorized_dismissal_actors_only &&
          create_protected == o.create_protected &&
          created_at == o.created_at &&
          dismiss_stale_reviews_on_push == o.dismiss_stale_reviews_on_push &&
          id == o.id &&
          ignore_approvals_from_contributors == o.ignore_approvals_from_contributors &&
          linear_history_requirement_enforcement_level == o.linear_history_requirement_enforcement_level &&
          lock_branch_enforcement_level == o.lock_branch_enforcement_level &&
          lock_allows_fork_sync == o.lock_allows_fork_sync &&
          merge_queue_enforcement_level == o.merge_queue_enforcement_level &&
          name == o.name &&
          pull_request_reviews_enforcement_level == o.pull_request_reviews_enforcement_level &&
          repository_id == o.repository_id &&
          require_code_owner_review == o.require_code_owner_review &&
          require_last_push_approval == o.require_last_push_approval &&
          required_approving_review_count == o.required_approving_review_count &&
          required_conversation_resolution_level == o.required_conversation_resolution_level &&
          required_deployments_enforcement_level == o.required_deployments_enforcement_level &&
          required_status_checks == o.required_status_checks &&
          required_status_checks_enforcement_level == o.required_status_checks_enforcement_level &&
          signature_requirement_enforcement_level == o.signature_requirement_enforcement_level &&
          strict_required_status_checks_policy == o.strict_required_status_checks_policy &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [admin_enforced, allow_deletions_enforcement_level, allow_force_pushes_enforcement_level, authorized_actor_names, authorized_actors_only, authorized_dismissal_actors_only, create_protected, created_at, dismiss_stale_reviews_on_push, id, ignore_approvals_from_contributors, linear_history_requirement_enforcement_level, lock_branch_enforcement_level, lock_allows_fork_sync, merge_queue_enforcement_level, name, pull_request_reviews_enforcement_level, repository_id, require_code_owner_review, require_last_push_approval, required_approving_review_count, required_conversation_resolution_level, required_deployments_enforcement_level, required_status_checks, required_status_checks_enforcement_level, signature_requirement_enforcement_level, strict_required_status_checks_policy, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
