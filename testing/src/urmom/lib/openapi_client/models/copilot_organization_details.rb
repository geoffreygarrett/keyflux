=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Information about the seat breakdown and policies set for an organization with a Copilot Business subscription.
  class CopilotOrganizationDetails
    attr_accessor :seat_breakdown

    # The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
    attr_accessor :public_code_suggestions

    # The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
    attr_accessor :ide_chat

    # The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
    attr_accessor :platform_chat

    # The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
    attr_accessor :cli

    # The mode of assigning new seats.
    attr_accessor :seat_management_setting

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'seat_breakdown' => :'seat_breakdown',
        :'public_code_suggestions' => :'public_code_suggestions',
        :'ide_chat' => :'ide_chat',
        :'platform_chat' => :'platform_chat',
        :'cli' => :'cli',
        :'seat_management_setting' => :'seat_management_setting'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'seat_breakdown' => :'CopilotSeatBreakdown',
        :'public_code_suggestions' => :'String',
        :'ide_chat' => :'String',
        :'platform_chat' => :'String',
        :'cli' => :'String',
        :'seat_management_setting' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CopilotOrganizationDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CopilotOrganizationDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'seat_breakdown')
        self.seat_breakdown = attributes[:'seat_breakdown']
      end

      if attributes.key?(:'public_code_suggestions')
        self.public_code_suggestions = attributes[:'public_code_suggestions']
      end

      if attributes.key?(:'ide_chat')
        self.ide_chat = attributes[:'ide_chat']
      end

      if attributes.key?(:'platform_chat')
        self.platform_chat = attributes[:'platform_chat']
      end

      if attributes.key?(:'cli')
        self.cli = attributes[:'cli']
      end

      if attributes.key?(:'seat_management_setting')
        self.seat_management_setting = attributes[:'seat_management_setting']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @seat_breakdown.nil?
        invalid_properties.push('invalid value for "seat_breakdown", seat_breakdown cannot be nil.')
      end

      if @public_code_suggestions.nil?
        invalid_properties.push('invalid value for "public_code_suggestions", public_code_suggestions cannot be nil.')
      end

      if @seat_management_setting.nil?
        invalid_properties.push('invalid value for "seat_management_setting", seat_management_setting cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @seat_breakdown.nil?
      return false if @public_code_suggestions.nil?
      public_code_suggestions_validator = EnumAttributeValidator.new('String', ["allow", "block", "unconfigured", "unknown"])
      return false unless public_code_suggestions_validator.valid?(@public_code_suggestions)
      ide_chat_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      return false unless ide_chat_validator.valid?(@ide_chat)
      platform_chat_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      return false unless platform_chat_validator.valid?(@platform_chat)
      cli_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      return false unless cli_validator.valid?(@cli)
      return false if @seat_management_setting.nil?
      seat_management_setting_validator = EnumAttributeValidator.new('String', ["assign_all", "assign_selected", "disabled", "unconfigured"])
      return false unless seat_management_setting_validator.valid?(@seat_management_setting)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] public_code_suggestions Object to be assigned
    def public_code_suggestions=(public_code_suggestions)
      validator = EnumAttributeValidator.new('String', ["allow", "block", "unconfigured", "unknown"])
      unless validator.valid?(public_code_suggestions)
        fail ArgumentError, "invalid value for \"public_code_suggestions\", must be one of #{validator.allowable_values}."
      end
      @public_code_suggestions = public_code_suggestions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ide_chat Object to be assigned
    def ide_chat=(ide_chat)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      unless validator.valid?(ide_chat)
        fail ArgumentError, "invalid value for \"ide_chat\", must be one of #{validator.allowable_values}."
      end
      @ide_chat = ide_chat
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform_chat Object to be assigned
    def platform_chat=(platform_chat)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      unless validator.valid?(platform_chat)
        fail ArgumentError, "invalid value for \"platform_chat\", must be one of #{validator.allowable_values}."
      end
      @platform_chat = platform_chat
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cli Object to be assigned
    def cli=(cli)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "unconfigured"])
      unless validator.valid?(cli)
        fail ArgumentError, "invalid value for \"cli\", must be one of #{validator.allowable_values}."
      end
      @cli = cli
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] seat_management_setting Object to be assigned
    def seat_management_setting=(seat_management_setting)
      validator = EnumAttributeValidator.new('String', ["assign_all", "assign_selected", "disabled", "unconfigured"])
      unless validator.valid?(seat_management_setting)
        fail ArgumentError, "invalid value for \"seat_management_setting\", must be one of #{validator.allowable_values}."
      end
      @seat_management_setting = seat_management_setting
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          seat_breakdown == o.seat_breakdown &&
          public_code_suggestions == o.public_code_suggestions &&
          ide_chat == o.ide_chat &&
          platform_chat == o.platform_chat &&
          cli == o.cli &&
          seat_management_setting == o.seat_management_setting
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [seat_breakdown, public_code_suggestions, ide_chat, platform_chat, cli, seat_management_setting].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
