=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The set of permissions for the GitHub app
  class AppPermissions
    attr_accessor :actions

    attr_accessor :administration

    attr_accessor :checks

    attr_accessor :content_references

    attr_accessor :contents

    attr_accessor :deployments

    attr_accessor :discussions

    attr_accessor :emails

    attr_accessor :environments

    attr_accessor :issues

    attr_accessor :keys

    attr_accessor :members

    attr_accessor :metadata

    attr_accessor :organization_administration

    attr_accessor :organization_hooks

    attr_accessor :organization_packages

    attr_accessor :organization_plan

    attr_accessor :organization_projects

    attr_accessor :organization_secrets

    attr_accessor :organization_self_hosted_runners

    attr_accessor :organization_user_blocking

    attr_accessor :packages

    attr_accessor :pages

    attr_accessor :pull_requests

    attr_accessor :repository_hooks

    attr_accessor :repository_projects

    attr_accessor :secret_scanning_alerts

    attr_accessor :secrets

    attr_accessor :security_events

    attr_accessor :security_scanning_alert

    attr_accessor :single_file

    attr_accessor :statuses

    attr_accessor :team_discussions

    attr_accessor :vulnerability_alerts

    attr_accessor :workflows

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actions' => :'actions',
        :'administration' => :'administration',
        :'checks' => :'checks',
        :'content_references' => :'content_references',
        :'contents' => :'contents',
        :'deployments' => :'deployments',
        :'discussions' => :'discussions',
        :'emails' => :'emails',
        :'environments' => :'environments',
        :'issues' => :'issues',
        :'keys' => :'keys',
        :'members' => :'members',
        :'metadata' => :'metadata',
        :'organization_administration' => :'organization_administration',
        :'organization_hooks' => :'organization_hooks',
        :'organization_packages' => :'organization_packages',
        :'organization_plan' => :'organization_plan',
        :'organization_projects' => :'organization_projects',
        :'organization_secrets' => :'organization_secrets',
        :'organization_self_hosted_runners' => :'organization_self_hosted_runners',
        :'organization_user_blocking' => :'organization_user_blocking',
        :'packages' => :'packages',
        :'pages' => :'pages',
        :'pull_requests' => :'pull_requests',
        :'repository_hooks' => :'repository_hooks',
        :'repository_projects' => :'repository_projects',
        :'secret_scanning_alerts' => :'secret_scanning_alerts',
        :'secrets' => :'secrets',
        :'security_events' => :'security_events',
        :'security_scanning_alert' => :'security_scanning_alert',
        :'single_file' => :'single_file',
        :'statuses' => :'statuses',
        :'team_discussions' => :'team_discussions',
        :'vulnerability_alerts' => :'vulnerability_alerts',
        :'workflows' => :'workflows'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'actions' => :'String',
        :'administration' => :'String',
        :'checks' => :'String',
        :'content_references' => :'String',
        :'contents' => :'String',
        :'deployments' => :'String',
        :'discussions' => :'String',
        :'emails' => :'String',
        :'environments' => :'String',
        :'issues' => :'String',
        :'keys' => :'String',
        :'members' => :'String',
        :'metadata' => :'String',
        :'organization_administration' => :'String',
        :'organization_hooks' => :'String',
        :'organization_packages' => :'String',
        :'organization_plan' => :'String',
        :'organization_projects' => :'String',
        :'organization_secrets' => :'String',
        :'organization_self_hosted_runners' => :'String',
        :'organization_user_blocking' => :'String',
        :'packages' => :'String',
        :'pages' => :'String',
        :'pull_requests' => :'String',
        :'repository_hooks' => :'String',
        :'repository_projects' => :'String',
        :'secret_scanning_alerts' => :'String',
        :'secrets' => :'String',
        :'security_events' => :'String',
        :'security_scanning_alert' => :'String',
        :'single_file' => :'String',
        :'statuses' => :'String',
        :'team_discussions' => :'String',
        :'vulnerability_alerts' => :'String',
        :'workflows' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AppPermissions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AppPermissions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'actions')
        self.actions = attributes[:'actions']
      end

      if attributes.key?(:'administration')
        self.administration = attributes[:'administration']
      end

      if attributes.key?(:'checks')
        self.checks = attributes[:'checks']
      end

      if attributes.key?(:'content_references')
        self.content_references = attributes[:'content_references']
      end

      if attributes.key?(:'contents')
        self.contents = attributes[:'contents']
      end

      if attributes.key?(:'deployments')
        self.deployments = attributes[:'deployments']
      end

      if attributes.key?(:'discussions')
        self.discussions = attributes[:'discussions']
      end

      if attributes.key?(:'emails')
        self.emails = attributes[:'emails']
      end

      if attributes.key?(:'environments')
        self.environments = attributes[:'environments']
      end

      if attributes.key?(:'issues')
        self.issues = attributes[:'issues']
      end

      if attributes.key?(:'keys')
        self.keys = attributes[:'keys']
      end

      if attributes.key?(:'members')
        self.members = attributes[:'members']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'organization_administration')
        self.organization_administration = attributes[:'organization_administration']
      end

      if attributes.key?(:'organization_hooks')
        self.organization_hooks = attributes[:'organization_hooks']
      end

      if attributes.key?(:'organization_packages')
        self.organization_packages = attributes[:'organization_packages']
      end

      if attributes.key?(:'organization_plan')
        self.organization_plan = attributes[:'organization_plan']
      end

      if attributes.key?(:'organization_projects')
        self.organization_projects = attributes[:'organization_projects']
      end

      if attributes.key?(:'organization_secrets')
        self.organization_secrets = attributes[:'organization_secrets']
      end

      if attributes.key?(:'organization_self_hosted_runners')
        self.organization_self_hosted_runners = attributes[:'organization_self_hosted_runners']
      end

      if attributes.key?(:'organization_user_blocking')
        self.organization_user_blocking = attributes[:'organization_user_blocking']
      end

      if attributes.key?(:'packages')
        self.packages = attributes[:'packages']
      end

      if attributes.key?(:'pages')
        self.pages = attributes[:'pages']
      end

      if attributes.key?(:'pull_requests')
        self.pull_requests = attributes[:'pull_requests']
      end

      if attributes.key?(:'repository_hooks')
        self.repository_hooks = attributes[:'repository_hooks']
      end

      if attributes.key?(:'repository_projects')
        self.repository_projects = attributes[:'repository_projects']
      end

      if attributes.key?(:'secret_scanning_alerts')
        self.secret_scanning_alerts = attributes[:'secret_scanning_alerts']
      end

      if attributes.key?(:'secrets')
        self.secrets = attributes[:'secrets']
      end

      if attributes.key?(:'security_events')
        self.security_events = attributes[:'security_events']
      end

      if attributes.key?(:'security_scanning_alert')
        self.security_scanning_alert = attributes[:'security_scanning_alert']
      end

      if attributes.key?(:'single_file')
        self.single_file = attributes[:'single_file']
      end

      if attributes.key?(:'statuses')
        self.statuses = attributes[:'statuses']
      end

      if attributes.key?(:'team_discussions')
        self.team_discussions = attributes[:'team_discussions']
      end

      if attributes.key?(:'vulnerability_alerts')
        self.vulnerability_alerts = attributes[:'vulnerability_alerts']
      end

      if attributes.key?(:'workflows')
        self.workflows = attributes[:'workflows']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      actions_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless actions_validator.valid?(@actions)
      administration_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless administration_validator.valid?(@administration)
      checks_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless checks_validator.valid?(@checks)
      content_references_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless content_references_validator.valid?(@content_references)
      contents_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless contents_validator.valid?(@contents)
      deployments_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless deployments_validator.valid?(@deployments)
      discussions_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless discussions_validator.valid?(@discussions)
      emails_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless emails_validator.valid?(@emails)
      environments_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless environments_validator.valid?(@environments)
      issues_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless issues_validator.valid?(@issues)
      keys_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless keys_validator.valid?(@keys)
      members_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless members_validator.valid?(@members)
      metadata_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless metadata_validator.valid?(@metadata)
      organization_administration_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_administration_validator.valid?(@organization_administration)
      organization_hooks_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_hooks_validator.valid?(@organization_hooks)
      organization_packages_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_packages_validator.valid?(@organization_packages)
      organization_plan_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_plan_validator.valid?(@organization_plan)
      organization_projects_validator = EnumAttributeValidator.new('String', ["read", "write", "admin"])
      return false unless organization_projects_validator.valid?(@organization_projects)
      organization_secrets_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_secrets_validator.valid?(@organization_secrets)
      organization_self_hosted_runners_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_self_hosted_runners_validator.valid?(@organization_self_hosted_runners)
      organization_user_blocking_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless organization_user_blocking_validator.valid?(@organization_user_blocking)
      packages_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless packages_validator.valid?(@packages)
      pages_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless pages_validator.valid?(@pages)
      pull_requests_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless pull_requests_validator.valid?(@pull_requests)
      repository_hooks_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless repository_hooks_validator.valid?(@repository_hooks)
      repository_projects_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless repository_projects_validator.valid?(@repository_projects)
      secret_scanning_alerts_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless secret_scanning_alerts_validator.valid?(@secret_scanning_alerts)
      secrets_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless secrets_validator.valid?(@secrets)
      security_events_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless security_events_validator.valid?(@security_events)
      security_scanning_alert_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless security_scanning_alert_validator.valid?(@security_scanning_alert)
      single_file_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless single_file_validator.valid?(@single_file)
      statuses_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless statuses_validator.valid?(@statuses)
      team_discussions_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless team_discussions_validator.valid?(@team_discussions)
      vulnerability_alerts_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless vulnerability_alerts_validator.valid?(@vulnerability_alerts)
      workflows_validator = EnumAttributeValidator.new('String', ["read", "write"])
      return false unless workflows_validator.valid?(@workflows)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] actions Object to be assigned
    def actions=(actions)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(actions)
        fail ArgumentError, "invalid value for \"actions\", must be one of #{validator.allowable_values}."
      end
      @actions = actions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] administration Object to be assigned
    def administration=(administration)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(administration)
        fail ArgumentError, "invalid value for \"administration\", must be one of #{validator.allowable_values}."
      end
      @administration = administration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] checks Object to be assigned
    def checks=(checks)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(checks)
        fail ArgumentError, "invalid value for \"checks\", must be one of #{validator.allowable_values}."
      end
      @checks = checks
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_references Object to be assigned
    def content_references=(content_references)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(content_references)
        fail ArgumentError, "invalid value for \"content_references\", must be one of #{validator.allowable_values}."
      end
      @content_references = content_references
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contents Object to be assigned
    def contents=(contents)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(contents)
        fail ArgumentError, "invalid value for \"contents\", must be one of #{validator.allowable_values}."
      end
      @contents = contents
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployments Object to be assigned
    def deployments=(deployments)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(deployments)
        fail ArgumentError, "invalid value for \"deployments\", must be one of #{validator.allowable_values}."
      end
      @deployments = deployments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discussions Object to be assigned
    def discussions=(discussions)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(discussions)
        fail ArgumentError, "invalid value for \"discussions\", must be one of #{validator.allowable_values}."
      end
      @discussions = discussions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] emails Object to be assigned
    def emails=(emails)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(emails)
        fail ArgumentError, "invalid value for \"emails\", must be one of #{validator.allowable_values}."
      end
      @emails = emails
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] environments Object to be assigned
    def environments=(environments)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(environments)
        fail ArgumentError, "invalid value for \"environments\", must be one of #{validator.allowable_values}."
      end
      @environments = environments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issues Object to be assigned
    def issues=(issues)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(issues)
        fail ArgumentError, "invalid value for \"issues\", must be one of #{validator.allowable_values}."
      end
      @issues = issues
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] keys Object to be assigned
    def keys=(keys)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(keys)
        fail ArgumentError, "invalid value for \"keys\", must be one of #{validator.allowable_values}."
      end
      @keys = keys
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] members Object to be assigned
    def members=(members)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(members)
        fail ArgumentError, "invalid value for \"members\", must be one of #{validator.allowable_values}."
      end
      @members = members
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(metadata)
        fail ArgumentError, "invalid value for \"metadata\", must be one of #{validator.allowable_values}."
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_administration Object to be assigned
    def organization_administration=(organization_administration)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_administration)
        fail ArgumentError, "invalid value for \"organization_administration\", must be one of #{validator.allowable_values}."
      end
      @organization_administration = organization_administration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_hooks Object to be assigned
    def organization_hooks=(organization_hooks)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_hooks)
        fail ArgumentError, "invalid value for \"organization_hooks\", must be one of #{validator.allowable_values}."
      end
      @organization_hooks = organization_hooks
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_packages Object to be assigned
    def organization_packages=(organization_packages)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_packages)
        fail ArgumentError, "invalid value for \"organization_packages\", must be one of #{validator.allowable_values}."
      end
      @organization_packages = organization_packages
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_plan Object to be assigned
    def organization_plan=(organization_plan)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_plan)
        fail ArgumentError, "invalid value for \"organization_plan\", must be one of #{validator.allowable_values}."
      end
      @organization_plan = organization_plan
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_projects Object to be assigned
    def organization_projects=(organization_projects)
      validator = EnumAttributeValidator.new('String', ["read", "write", "admin"])
      unless validator.valid?(organization_projects)
        fail ArgumentError, "invalid value for \"organization_projects\", must be one of #{validator.allowable_values}."
      end
      @organization_projects = organization_projects
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_secrets Object to be assigned
    def organization_secrets=(organization_secrets)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_secrets)
        fail ArgumentError, "invalid value for \"organization_secrets\", must be one of #{validator.allowable_values}."
      end
      @organization_secrets = organization_secrets
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_self_hosted_runners Object to be assigned
    def organization_self_hosted_runners=(organization_self_hosted_runners)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_self_hosted_runners)
        fail ArgumentError, "invalid value for \"organization_self_hosted_runners\", must be one of #{validator.allowable_values}."
      end
      @organization_self_hosted_runners = organization_self_hosted_runners
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] organization_user_blocking Object to be assigned
    def organization_user_blocking=(organization_user_blocking)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(organization_user_blocking)
        fail ArgumentError, "invalid value for \"organization_user_blocking\", must be one of #{validator.allowable_values}."
      end
      @organization_user_blocking = organization_user_blocking
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] packages Object to be assigned
    def packages=(packages)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(packages)
        fail ArgumentError, "invalid value for \"packages\", must be one of #{validator.allowable_values}."
      end
      @packages = packages
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pages Object to be assigned
    def pages=(pages)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(pages)
        fail ArgumentError, "invalid value for \"pages\", must be one of #{validator.allowable_values}."
      end
      @pages = pages
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pull_requests Object to be assigned
    def pull_requests=(pull_requests)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(pull_requests)
        fail ArgumentError, "invalid value for \"pull_requests\", must be one of #{validator.allowable_values}."
      end
      @pull_requests = pull_requests
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repository_hooks Object to be assigned
    def repository_hooks=(repository_hooks)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(repository_hooks)
        fail ArgumentError, "invalid value for \"repository_hooks\", must be one of #{validator.allowable_values}."
      end
      @repository_hooks = repository_hooks
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repository_projects Object to be assigned
    def repository_projects=(repository_projects)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(repository_projects)
        fail ArgumentError, "invalid value for \"repository_projects\", must be one of #{validator.allowable_values}."
      end
      @repository_projects = repository_projects
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret_scanning_alerts Object to be assigned
    def secret_scanning_alerts=(secret_scanning_alerts)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(secret_scanning_alerts)
        fail ArgumentError, "invalid value for \"secret_scanning_alerts\", must be one of #{validator.allowable_values}."
      end
      @secret_scanning_alerts = secret_scanning_alerts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secrets Object to be assigned
    def secrets=(secrets)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(secrets)
        fail ArgumentError, "invalid value for \"secrets\", must be one of #{validator.allowable_values}."
      end
      @secrets = secrets
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_events Object to be assigned
    def security_events=(security_events)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(security_events)
        fail ArgumentError, "invalid value for \"security_events\", must be one of #{validator.allowable_values}."
      end
      @security_events = security_events
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_scanning_alert Object to be assigned
    def security_scanning_alert=(security_scanning_alert)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(security_scanning_alert)
        fail ArgumentError, "invalid value for \"security_scanning_alert\", must be one of #{validator.allowable_values}."
      end
      @security_scanning_alert = security_scanning_alert
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] single_file Object to be assigned
    def single_file=(single_file)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(single_file)
        fail ArgumentError, "invalid value for \"single_file\", must be one of #{validator.allowable_values}."
      end
      @single_file = single_file
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statuses Object to be assigned
    def statuses=(statuses)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(statuses)
        fail ArgumentError, "invalid value for \"statuses\", must be one of #{validator.allowable_values}."
      end
      @statuses = statuses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] team_discussions Object to be assigned
    def team_discussions=(team_discussions)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(team_discussions)
        fail ArgumentError, "invalid value for \"team_discussions\", must be one of #{validator.allowable_values}."
      end
      @team_discussions = team_discussions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vulnerability_alerts Object to be assigned
    def vulnerability_alerts=(vulnerability_alerts)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(vulnerability_alerts)
        fail ArgumentError, "invalid value for \"vulnerability_alerts\", must be one of #{validator.allowable_values}."
      end
      @vulnerability_alerts = vulnerability_alerts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workflows Object to be assigned
    def workflows=(workflows)
      validator = EnumAttributeValidator.new('String', ["read", "write"])
      unless validator.valid?(workflows)
        fail ArgumentError, "invalid value for \"workflows\", must be one of #{validator.allowable_values}."
      end
      @workflows = workflows
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actions == o.actions &&
          administration == o.administration &&
          checks == o.checks &&
          content_references == o.content_references &&
          contents == o.contents &&
          deployments == o.deployments &&
          discussions == o.discussions &&
          emails == o.emails &&
          environments == o.environments &&
          issues == o.issues &&
          keys == o.keys &&
          members == o.members &&
          metadata == o.metadata &&
          organization_administration == o.organization_administration &&
          organization_hooks == o.organization_hooks &&
          organization_packages == o.organization_packages &&
          organization_plan == o.organization_plan &&
          organization_projects == o.organization_projects &&
          organization_secrets == o.organization_secrets &&
          organization_self_hosted_runners == o.organization_self_hosted_runners &&
          organization_user_blocking == o.organization_user_blocking &&
          packages == o.packages &&
          pages == o.pages &&
          pull_requests == o.pull_requests &&
          repository_hooks == o.repository_hooks &&
          repository_projects == o.repository_projects &&
          secret_scanning_alerts == o.secret_scanning_alerts &&
          secrets == o.secrets &&
          security_events == o.security_events &&
          security_scanning_alert == o.security_scanning_alert &&
          single_file == o.single_file &&
          statuses == o.statuses &&
          team_discussions == o.team_discussions &&
          vulnerability_alerts == o.vulnerability_alerts &&
          workflows == o.workflows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [actions, administration, checks, content_references, contents, deployments, discussions, emails, environments, issues, keys, members, metadata, organization_administration, organization_hooks, organization_packages, organization_plan, organization_projects, organization_secrets, organization_self_hosted_runners, organization_user_blocking, packages, pages, pull_requests, repository_hooks, repository_projects, secret_scanning_alerts, secrets, security_events, security_scanning_alert, single_file, statuses, team_discussions, vulnerability_alerts, workflows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
