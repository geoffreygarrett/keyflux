=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WebhookDeploymentReviewRejected
    attr_accessor :action

    attr_accessor :approver

    attr_accessor :comment

    attr_accessor :enterprise

    attr_accessor :installation

    attr_accessor :organization

    attr_accessor :repository

    attr_accessor :reviewers

    attr_accessor :sender

    attr_accessor :since

    attr_accessor :workflow_job_run

    attr_accessor :workflow_job_runs

    attr_accessor :workflow_run

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'approver' => :'approver',
        :'comment' => :'comment',
        :'enterprise' => :'enterprise',
        :'installation' => :'installation',
        :'organization' => :'organization',
        :'repository' => :'repository',
        :'reviewers' => :'reviewers',
        :'sender' => :'sender',
        :'since' => :'since',
        :'workflow_job_run' => :'workflow_job_run',
        :'workflow_job_runs' => :'workflow_job_runs',
        :'workflow_run' => :'workflow_run'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action' => :'String',
        :'approver' => :'WebhooksApprover',
        :'comment' => :'String',
        :'enterprise' => :'EnterpriseWebhooks',
        :'installation' => :'SimpleInstallation',
        :'organization' => :'OrganizationSimpleWebhooks',
        :'repository' => :'RepositoryWebhooks',
        :'reviewers' => :'Array<WebhooksReviewersInner>',
        :'sender' => :'SimpleUserWebhooks',
        :'since' => :'String',
        :'workflow_job_run' => :'WebhooksWorkflowJobRun',
        :'workflow_job_runs' => :'Array<WebhookDeploymentReviewRejectedWorkflowJobRunsInner>',
        :'workflow_run' => :'DeploymentWorkflowRun2'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'workflow_run'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhookDeploymentReviewRejected` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhookDeploymentReviewRejected`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'approver')
        self.approver = attributes[:'approver']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'enterprise')
        self.enterprise = attributes[:'enterprise']
      end

      if attributes.key?(:'installation')
        self.installation = attributes[:'installation']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'reviewers')
        if (value = attributes[:'reviewers']).is_a?(Array)
          self.reviewers = value
        end
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'since')
        self.since = attributes[:'since']
      end

      if attributes.key?(:'workflow_job_run')
        self.workflow_job_run = attributes[:'workflow_job_run']
      end

      if attributes.key?(:'workflow_job_runs')
        if (value = attributes[:'workflow_job_runs']).is_a?(Array)
          self.workflow_job_runs = value
        end
      end

      if attributes.key?(:'workflow_run')
        self.workflow_run = attributes[:'workflow_run']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      if @organization.nil?
        invalid_properties.push('invalid value for "organization", organization cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @since.nil?
        invalid_properties.push('invalid value for "since", since cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @action.nil?
      action_validator = EnumAttributeValidator.new('String', ["rejected"])
      return false unless action_validator.valid?(@action)
      return false if @organization.nil?
      return false if @repository.nil?
      return false if @sender.nil?
      return false if @since.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["rejected"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          approver == o.approver &&
          comment == o.comment &&
          enterprise == o.enterprise &&
          installation == o.installation &&
          organization == o.organization &&
          repository == o.repository &&
          reviewers == o.reviewers &&
          sender == o.sender &&
          since == o.since &&
          workflow_job_run == o.workflow_job_run &&
          workflow_job_runs == o.workflow_job_runs &&
          workflow_run == o.workflow_run
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, approver, comment, enterprise, installation, organization, repository, reviewers, sender, since, workflow_job_run, workflow_job_runs, workflow_run].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
