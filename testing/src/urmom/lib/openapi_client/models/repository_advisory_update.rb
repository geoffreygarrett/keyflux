=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class RepositoryAdvisoryUpdate
    # A short summary of the advisory.
    attr_accessor :summary

    # A detailed description of what the advisory impacts.
    attr_accessor :description

    # The Common Vulnerabilities and Exposures (CVE) ID.
    attr_accessor :cve_id

    # A product affected by the vulnerability detailed in a repository security advisory.
    attr_accessor :vulnerabilities

    # A list of Common Weakness Enumeration (CWE) IDs.
    attr_accessor :cwe_ids

    # A list of users receiving credit for their participation in the security advisory.
    attr_accessor :credits

    # The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
    attr_accessor :severity

    # The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
    attr_accessor :cvss_vector_string

    # The state of the advisory.
    attr_accessor :state

    # A list of usernames who have been granted write access to the advisory.
    attr_accessor :collaborating_users

    # A list of team slugs which have been granted write access to the advisory.
    attr_accessor :collaborating_teams

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'summary' => :'summary',
        :'description' => :'description',
        :'cve_id' => :'cve_id',
        :'vulnerabilities' => :'vulnerabilities',
        :'cwe_ids' => :'cwe_ids',
        :'credits' => :'credits',
        :'severity' => :'severity',
        :'cvss_vector_string' => :'cvss_vector_string',
        :'state' => :'state',
        :'collaborating_users' => :'collaborating_users',
        :'collaborating_teams' => :'collaborating_teams'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'summary' => :'String',
        :'description' => :'String',
        :'cve_id' => :'String',
        :'vulnerabilities' => :'Array<RepositoryAdvisoryCreateVulnerabilitiesInner>',
        :'cwe_ids' => :'Array<String>',
        :'credits' => :'Array<RepositoryAdvisoryCreateCreditsInner>',
        :'severity' => :'String',
        :'cvss_vector_string' => :'String',
        :'state' => :'String',
        :'collaborating_users' => :'Array<String>',
        :'collaborating_teams' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cve_id',
        :'cwe_ids',
        :'credits',
        :'severity',
        :'cvss_vector_string',
        :'collaborating_users',
        :'collaborating_teams'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::RepositoryAdvisoryUpdate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::RepositoryAdvisoryUpdate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'cve_id')
        self.cve_id = attributes[:'cve_id']
      end

      if attributes.key?(:'vulnerabilities')
        if (value = attributes[:'vulnerabilities']).is_a?(Array)
          self.vulnerabilities = value
        end
      end

      if attributes.key?(:'cwe_ids')
        if (value = attributes[:'cwe_ids']).is_a?(Array)
          self.cwe_ids = value
        end
      end

      if attributes.key?(:'credits')
        if (value = attributes[:'credits']).is_a?(Array)
          self.credits = value
        end
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'cvss_vector_string')
        self.cvss_vector_string = attributes[:'cvss_vector_string']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'collaborating_users')
        if (value = attributes[:'collaborating_users']).is_a?(Array)
          self.collaborating_users = value
        end
      end

      if attributes.key?(:'collaborating_teams')
        if (value = attributes[:'collaborating_teams']).is_a?(Array)
          self.collaborating_teams = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@summary.nil? && @summary.to_s.length > 1024
        invalid_properties.push('invalid value for "summary", the character length must be smaller than or equal to 1024.')
      end

      if !@description.nil? && @description.to_s.length > 65535
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 65535.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@summary.nil? && @summary.to_s.length > 1024
      return false if !@description.nil? && @description.to_s.length > 65535
      severity_validator = EnumAttributeValidator.new('String', ["critical", "high", "medium", "low"])
      return false unless severity_validator.valid?(@severity)
      state_validator = EnumAttributeValidator.new('String', ["published", "closed", "draft"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] summary Value to be assigned
    def summary=(summary)
      if !summary.nil? && summary.to_s.length > 1024
        fail ArgumentError, 'invalid value for "summary", the character length must be smaller than or equal to 1024.'
      end

      @summary = summary
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 65535
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 65535.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('String', ["critical", "high", "medium", "low"])
      unless validator.valid?(severity)
        fail ArgumentError, "invalid value for \"severity\", must be one of #{validator.allowable_values}."
      end
      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["published", "closed", "draft"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          summary == o.summary &&
          description == o.description &&
          cve_id == o.cve_id &&
          vulnerabilities == o.vulnerabilities &&
          cwe_ids == o.cwe_ids &&
          credits == o.credits &&
          severity == o.severity &&
          cvss_vector_string == o.cvss_vector_string &&
          state == o.state &&
          collaborating_users == o.collaborating_users &&
          collaborating_teams == o.collaborating_teams
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [summary, description, cve_id, vulnerabilities, cwe_ids, credits, severity, cvss_vector_string, state, collaborating_users, collaborating_teams].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
