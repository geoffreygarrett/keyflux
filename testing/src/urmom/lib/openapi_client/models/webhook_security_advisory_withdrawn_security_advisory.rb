=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The details of the security advisory, including summary, description, and severity.
  class WebhookSecurityAdvisoryWithdrawnSecurityAdvisory
    attr_accessor :cvss

    attr_accessor :cwes

    attr_accessor :description

    attr_accessor :ghsa_id

    attr_accessor :identifiers

    attr_accessor :published_at

    attr_accessor :references

    attr_accessor :severity

    attr_accessor :summary

    attr_accessor :updated_at

    attr_accessor :vulnerabilities

    attr_accessor :withdrawn_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cvss' => :'cvss',
        :'cwes' => :'cwes',
        :'description' => :'description',
        :'ghsa_id' => :'ghsa_id',
        :'identifiers' => :'identifiers',
        :'published_at' => :'published_at',
        :'references' => :'references',
        :'severity' => :'severity',
        :'summary' => :'summary',
        :'updated_at' => :'updated_at',
        :'vulnerabilities' => :'vulnerabilities',
        :'withdrawn_at' => :'withdrawn_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cvss' => :'WebhooksSecurityAdvisoryCvss',
        :'cwes' => :'Array<WebhooksSecurityAdvisoryCwesInner>',
        :'description' => :'String',
        :'ghsa_id' => :'String',
        :'identifiers' => :'Array<WebhooksSecurityAdvisoryIdentifiersInner>',
        :'published_at' => :'String',
        :'references' => :'Array<WebhooksSecurityAdvisoryReferencesInner>',
        :'severity' => :'String',
        :'summary' => :'String',
        :'updated_at' => :'String',
        :'vulnerabilities' => :'Array<WebhooksSecurityAdvisoryVulnerabilitiesInner>',
        :'withdrawn_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhookSecurityAdvisoryWithdrawnSecurityAdvisory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhookSecurityAdvisoryWithdrawnSecurityAdvisory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cvss')
        self.cvss = attributes[:'cvss']
      end

      if attributes.key?(:'cwes')
        if (value = attributes[:'cwes']).is_a?(Array)
          self.cwes = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'ghsa_id')
        self.ghsa_id = attributes[:'ghsa_id']
      end

      if attributes.key?(:'identifiers')
        if (value = attributes[:'identifiers']).is_a?(Array)
          self.identifiers = value
        end
      end

      if attributes.key?(:'published_at')
        self.published_at = attributes[:'published_at']
      end

      if attributes.key?(:'references')
        if (value = attributes[:'references']).is_a?(Array)
          self.references = value
        end
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'vulnerabilities')
        if (value = attributes[:'vulnerabilities']).is_a?(Array)
          self.vulnerabilities = value
        end
      end

      if attributes.key?(:'withdrawn_at')
        self.withdrawn_at = attributes[:'withdrawn_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cvss.nil?
        invalid_properties.push('invalid value for "cvss", cvss cannot be nil.')
      end

      if @cwes.nil?
        invalid_properties.push('invalid value for "cwes", cwes cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @ghsa_id.nil?
        invalid_properties.push('invalid value for "ghsa_id", ghsa_id cannot be nil.')
      end

      if @identifiers.nil?
        invalid_properties.push('invalid value for "identifiers", identifiers cannot be nil.')
      end

      if @published_at.nil?
        invalid_properties.push('invalid value for "published_at", published_at cannot be nil.')
      end

      if @references.nil?
        invalid_properties.push('invalid value for "references", references cannot be nil.')
      end

      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @summary.nil?
        invalid_properties.push('invalid value for "summary", summary cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @vulnerabilities.nil?
        invalid_properties.push('invalid value for "vulnerabilities", vulnerabilities cannot be nil.')
      end

      if @withdrawn_at.nil?
        invalid_properties.push('invalid value for "withdrawn_at", withdrawn_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cvss.nil?
      return false if @cwes.nil?
      return false if @description.nil?
      return false if @ghsa_id.nil?
      return false if @identifiers.nil?
      return false if @published_at.nil?
      return false if @references.nil?
      return false if @severity.nil?
      return false if @summary.nil?
      return false if @updated_at.nil?
      return false if @vulnerabilities.nil?
      return false if @withdrawn_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cvss == o.cvss &&
          cwes == o.cwes &&
          description == o.description &&
          ghsa_id == o.ghsa_id &&
          identifiers == o.identifiers &&
          published_at == o.published_at &&
          references == o.references &&
          severity == o.severity &&
          summary == o.summary &&
          updated_at == o.updated_at &&
          vulnerabilities == o.vulnerabilities &&
          withdrawn_at == o.withdrawn_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cvss, cwes, description, ghsa_id, identifiers, published_at, references, severity, summary, updated_at, vulnerabilities, withdrawn_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
