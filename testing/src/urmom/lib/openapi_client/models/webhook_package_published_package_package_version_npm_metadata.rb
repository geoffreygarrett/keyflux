=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WebhookPackagePublishedPackagePackageVersionNpmMetadata
    attr_accessor :name

    attr_accessor :version

    attr_accessor :npm_user

    attr_accessor :author

    attr_accessor :bugs

    attr_accessor :dependencies

    attr_accessor :dev_dependencies

    attr_accessor :peer_dependencies

    attr_accessor :optional_dependencies

    attr_accessor :description

    attr_accessor :dist

    attr_accessor :git_head

    attr_accessor :homepage

    attr_accessor :license

    attr_accessor :main

    attr_accessor :repository

    attr_accessor :scripts

    attr_accessor :id

    attr_accessor :node_version

    attr_accessor :npm_version

    attr_accessor :has_shrinkwrap

    attr_accessor :maintainers

    attr_accessor :contributors

    attr_accessor :engines

    attr_accessor :keywords

    attr_accessor :files

    attr_accessor :bin

    attr_accessor :man

    attr_accessor :directories

    attr_accessor :os

    attr_accessor :cpu

    attr_accessor :readme

    attr_accessor :installation_command

    attr_accessor :release_id

    attr_accessor :commit_oid

    attr_accessor :published_via_actions

    attr_accessor :deleted_by_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'version' => :'version',
        :'npm_user' => :'npm_user',
        :'author' => :'author',
        :'bugs' => :'bugs',
        :'dependencies' => :'dependencies',
        :'dev_dependencies' => :'dev_dependencies',
        :'peer_dependencies' => :'peer_dependencies',
        :'optional_dependencies' => :'optional_dependencies',
        :'description' => :'description',
        :'dist' => :'dist',
        :'git_head' => :'git_head',
        :'homepage' => :'homepage',
        :'license' => :'license',
        :'main' => :'main',
        :'repository' => :'repository',
        :'scripts' => :'scripts',
        :'id' => :'id',
        :'node_version' => :'node_version',
        :'npm_version' => :'npm_version',
        :'has_shrinkwrap' => :'has_shrinkwrap',
        :'maintainers' => :'maintainers',
        :'contributors' => :'contributors',
        :'engines' => :'engines',
        :'keywords' => :'keywords',
        :'files' => :'files',
        :'bin' => :'bin',
        :'man' => :'man',
        :'directories' => :'directories',
        :'os' => :'os',
        :'cpu' => :'cpu',
        :'readme' => :'readme',
        :'installation_command' => :'installation_command',
        :'release_id' => :'release_id',
        :'commit_oid' => :'commit_oid',
        :'published_via_actions' => :'published_via_actions',
        :'deleted_by_id' => :'deleted_by_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'version' => :'String',
        :'npm_user' => :'String',
        :'author' => :'Object',
        :'bugs' => :'Object',
        :'dependencies' => :'Object',
        :'dev_dependencies' => :'Object',
        :'peer_dependencies' => :'Object',
        :'optional_dependencies' => :'Object',
        :'description' => :'String',
        :'dist' => :'Object',
        :'git_head' => :'String',
        :'homepage' => :'String',
        :'license' => :'String',
        :'main' => :'String',
        :'repository' => :'Object',
        :'scripts' => :'Object',
        :'id' => :'String',
        :'node_version' => :'String',
        :'npm_version' => :'String',
        :'has_shrinkwrap' => :'Boolean',
        :'maintainers' => :'Array<Object>',
        :'contributors' => :'Array<Object>',
        :'engines' => :'Object',
        :'keywords' => :'Array<String>',
        :'files' => :'Array<String>',
        :'bin' => :'Object',
        :'man' => :'Object',
        :'directories' => :'Object',
        :'os' => :'Array<String>',
        :'cpu' => :'Array<String>',
        :'readme' => :'String',
        :'installation_command' => :'String',
        :'release_id' => :'Integer',
        :'commit_oid' => :'String',
        :'published_via_actions' => :'Boolean',
        :'deleted_by_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'author',
        :'bugs',
        :'dist',
        :'repository',
        :'directories',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhookPackagePublishedPackagePackageVersionNpmMetadata` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhookPackagePublishedPackagePackageVersionNpmMetadata`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'npm_user')
        self.npm_user = attributes[:'npm_user']
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'bugs')
        self.bugs = attributes[:'bugs']
      end

      if attributes.key?(:'dependencies')
        self.dependencies = attributes[:'dependencies']
      end

      if attributes.key?(:'dev_dependencies')
        self.dev_dependencies = attributes[:'dev_dependencies']
      end

      if attributes.key?(:'peer_dependencies')
        self.peer_dependencies = attributes[:'peer_dependencies']
      end

      if attributes.key?(:'optional_dependencies')
        self.optional_dependencies = attributes[:'optional_dependencies']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'dist')
        self.dist = attributes[:'dist']
      end

      if attributes.key?(:'git_head')
        self.git_head = attributes[:'git_head']
      end

      if attributes.key?(:'homepage')
        self.homepage = attributes[:'homepage']
      end

      if attributes.key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.key?(:'main')
        self.main = attributes[:'main']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'scripts')
        self.scripts = attributes[:'scripts']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_version')
        self.node_version = attributes[:'node_version']
      end

      if attributes.key?(:'npm_version')
        self.npm_version = attributes[:'npm_version']
      end

      if attributes.key?(:'has_shrinkwrap')
        self.has_shrinkwrap = attributes[:'has_shrinkwrap']
      end

      if attributes.key?(:'maintainers')
        if (value = attributes[:'maintainers']).is_a?(Array)
          self.maintainers = value
        end
      end

      if attributes.key?(:'contributors')
        if (value = attributes[:'contributors']).is_a?(Array)
          self.contributors = value
        end
      end

      if attributes.key?(:'engines')
        self.engines = attributes[:'engines']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.key?(:'bin')
        self.bin = attributes[:'bin']
      end

      if attributes.key?(:'man')
        self.man = attributes[:'man']
      end

      if attributes.key?(:'directories')
        self.directories = attributes[:'directories']
      end

      if attributes.key?(:'os')
        if (value = attributes[:'os']).is_a?(Array)
          self.os = value
        end
      end

      if attributes.key?(:'cpu')
        if (value = attributes[:'cpu']).is_a?(Array)
          self.cpu = value
        end
      end

      if attributes.key?(:'readme')
        self.readme = attributes[:'readme']
      end

      if attributes.key?(:'installation_command')
        self.installation_command = attributes[:'installation_command']
      end

      if attributes.key?(:'release_id')
        self.release_id = attributes[:'release_id']
      end

      if attributes.key?(:'commit_oid')
        self.commit_oid = attributes[:'commit_oid']
      end

      if attributes.key?(:'published_via_actions')
        self.published_via_actions = attributes[:'published_via_actions']
      end

      if attributes.key?(:'deleted_by_id')
        self.deleted_by_id = attributes[:'deleted_by_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          version == o.version &&
          npm_user == o.npm_user &&
          author == o.author &&
          bugs == o.bugs &&
          dependencies == o.dependencies &&
          dev_dependencies == o.dev_dependencies &&
          peer_dependencies == o.peer_dependencies &&
          optional_dependencies == o.optional_dependencies &&
          description == o.description &&
          dist == o.dist &&
          git_head == o.git_head &&
          homepage == o.homepage &&
          license == o.license &&
          main == o.main &&
          repository == o.repository &&
          scripts == o.scripts &&
          id == o.id &&
          node_version == o.node_version &&
          npm_version == o.npm_version &&
          has_shrinkwrap == o.has_shrinkwrap &&
          maintainers == o.maintainers &&
          contributors == o.contributors &&
          engines == o.engines &&
          keywords == o.keywords &&
          files == o.files &&
          bin == o.bin &&
          man == o.man &&
          directories == o.directories &&
          os == o.os &&
          cpu == o.cpu &&
          readme == o.readme &&
          installation_command == o.installation_command &&
          release_id == o.release_id &&
          commit_oid == o.commit_oid &&
          published_via_actions == o.published_via_actions &&
          deleted_by_id == o.deleted_by_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, version, npm_user, author, bugs, dependencies, dev_dependencies, peer_dependencies, optional_dependencies, description, dist, git_head, homepage, license, main, repository, scripts, id, node_version, npm_version, has_shrinkwrap, maintainers, contributors, engines, keywords, files, bin, man, directories, os, cpu, readme, installation_command, release_id, commit_oid, published_via_actions, deleted_by_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
