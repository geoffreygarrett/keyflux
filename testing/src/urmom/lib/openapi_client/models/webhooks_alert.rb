=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The security alert of the vulnerable dependency.
  class WebhooksAlert
    attr_accessor :affected_package_name

    attr_accessor :affected_range

    attr_accessor :created_at

    attr_accessor :dismiss_reason

    attr_accessor :dismissed_at

    attr_accessor :dismisser

    attr_accessor :external_identifier

    attr_accessor :external_reference

    attr_accessor :fix_reason

    attr_accessor :fixed_at

    attr_accessor :fixed_in

    attr_accessor :ghsa_id

    attr_accessor :id

    attr_accessor :node_id

    attr_accessor :number

    attr_accessor :severity

    attr_accessor :state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affected_package_name' => :'affected_package_name',
        :'affected_range' => :'affected_range',
        :'created_at' => :'created_at',
        :'dismiss_reason' => :'dismiss_reason',
        :'dismissed_at' => :'dismissed_at',
        :'dismisser' => :'dismisser',
        :'external_identifier' => :'external_identifier',
        :'external_reference' => :'external_reference',
        :'fix_reason' => :'fix_reason',
        :'fixed_at' => :'fixed_at',
        :'fixed_in' => :'fixed_in',
        :'ghsa_id' => :'ghsa_id',
        :'id' => :'id',
        :'node_id' => :'node_id',
        :'number' => :'number',
        :'severity' => :'severity',
        :'state' => :'state'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'affected_package_name' => :'String',
        :'affected_range' => :'String',
        :'created_at' => :'String',
        :'dismiss_reason' => :'String',
        :'dismissed_at' => :'String',
        :'dismisser' => :'User',
        :'external_identifier' => :'String',
        :'external_reference' => :'String',
        :'fix_reason' => :'String',
        :'fixed_at' => :'Time',
        :'fixed_in' => :'String',
        :'ghsa_id' => :'String',
        :'id' => :'Integer',
        :'node_id' => :'String',
        :'number' => :'Integer',
        :'severity' => :'String',
        :'state' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'dismisser',
        :'external_reference',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebhooksAlert` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebhooksAlert`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'affected_package_name')
        self.affected_package_name = attributes[:'affected_package_name']
      end

      if attributes.key?(:'affected_range')
        self.affected_range = attributes[:'affected_range']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'dismiss_reason')
        self.dismiss_reason = attributes[:'dismiss_reason']
      end

      if attributes.key?(:'dismissed_at')
        self.dismissed_at = attributes[:'dismissed_at']
      end

      if attributes.key?(:'dismisser')
        self.dismisser = attributes[:'dismisser']
      end

      if attributes.key?(:'external_identifier')
        self.external_identifier = attributes[:'external_identifier']
      end

      if attributes.key?(:'external_reference')
        self.external_reference = attributes[:'external_reference']
      end

      if attributes.key?(:'fix_reason')
        self.fix_reason = attributes[:'fix_reason']
      end

      if attributes.key?(:'fixed_at')
        self.fixed_at = attributes[:'fixed_at']
      end

      if attributes.key?(:'fixed_in')
        self.fixed_in = attributes[:'fixed_in']
      end

      if attributes.key?(:'ghsa_id')
        self.ghsa_id = attributes[:'ghsa_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @affected_package_name.nil?
        invalid_properties.push('invalid value for "affected_package_name", affected_package_name cannot be nil.')
      end

      if @affected_range.nil?
        invalid_properties.push('invalid value for "affected_range", affected_range cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @external_identifier.nil?
        invalid_properties.push('invalid value for "external_identifier", external_identifier cannot be nil.')
      end

      if @ghsa_id.nil?
        invalid_properties.push('invalid value for "ghsa_id", ghsa_id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @node_id.nil?
        invalid_properties.push('invalid value for "node_id", node_id cannot be nil.')
      end

      if @number.nil?
        invalid_properties.push('invalid value for "number", number cannot be nil.')
      end

      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @affected_package_name.nil?
      return false if @affected_range.nil?
      return false if @created_at.nil?
      return false if @external_identifier.nil?
      return false if @ghsa_id.nil?
      return false if @id.nil?
      return false if @node_id.nil?
      return false if @number.nil?
      return false if @severity.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["open"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["open"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affected_package_name == o.affected_package_name &&
          affected_range == o.affected_range &&
          created_at == o.created_at &&
          dismiss_reason == o.dismiss_reason &&
          dismissed_at == o.dismissed_at &&
          dismisser == o.dismisser &&
          external_identifier == o.external_identifier &&
          external_reference == o.external_reference &&
          fix_reason == o.fix_reason &&
          fixed_at == o.fixed_at &&
          fixed_in == o.fixed_in &&
          ghsa_id == o.ghsa_id &&
          id == o.id &&
          node_id == o.node_id &&
          number == o.number &&
          severity == o.severity &&
          state == o.state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [affected_package_name, affected_range, created_at, dismiss_reason, dismissed_at, dismisser, external_identifier, external_reference, fix_reason, fixed_at, fixed_in, ghsa_id, id, node_id, number, severity, state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
