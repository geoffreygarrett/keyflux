=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class RepositoryRulePullRequestParameters
    # New, reviewable commits pushed will dismiss previous pull request review approvals.
    attr_accessor :dismiss_stale_reviews_on_push

    # Require an approving review in pull requests that modify files that have a designated code owner.
    attr_accessor :require_code_owner_review

    # Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
    attr_accessor :require_last_push_approval

    # The number of approving reviews that are required before a pull request can be merged.
    attr_accessor :required_approving_review_count

    # All conversations on code must be resolved before a pull request can be merged.
    attr_accessor :required_review_thread_resolution

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dismiss_stale_reviews_on_push' => :'dismiss_stale_reviews_on_push',
        :'require_code_owner_review' => :'require_code_owner_review',
        :'require_last_push_approval' => :'require_last_push_approval',
        :'required_approving_review_count' => :'required_approving_review_count',
        :'required_review_thread_resolution' => :'required_review_thread_resolution'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'dismiss_stale_reviews_on_push' => :'Boolean',
        :'require_code_owner_review' => :'Boolean',
        :'require_last_push_approval' => :'Boolean',
        :'required_approving_review_count' => :'Integer',
        :'required_review_thread_resolution' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::RepositoryRulePullRequestParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::RepositoryRulePullRequestParameters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'dismiss_stale_reviews_on_push')
        self.dismiss_stale_reviews_on_push = attributes[:'dismiss_stale_reviews_on_push']
      end

      if attributes.key?(:'require_code_owner_review')
        self.require_code_owner_review = attributes[:'require_code_owner_review']
      end

      if attributes.key?(:'require_last_push_approval')
        self.require_last_push_approval = attributes[:'require_last_push_approval']
      end

      if attributes.key?(:'required_approving_review_count')
        self.required_approving_review_count = attributes[:'required_approving_review_count']
      end

      if attributes.key?(:'required_review_thread_resolution')
        self.required_review_thread_resolution = attributes[:'required_review_thread_resolution']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @dismiss_stale_reviews_on_push.nil?
        invalid_properties.push('invalid value for "dismiss_stale_reviews_on_push", dismiss_stale_reviews_on_push cannot be nil.')
      end

      if @require_code_owner_review.nil?
        invalid_properties.push('invalid value for "require_code_owner_review", require_code_owner_review cannot be nil.')
      end

      if @require_last_push_approval.nil?
        invalid_properties.push('invalid value for "require_last_push_approval", require_last_push_approval cannot be nil.')
      end

      if @required_approving_review_count.nil?
        invalid_properties.push('invalid value for "required_approving_review_count", required_approving_review_count cannot be nil.')
      end

      if @required_approving_review_count > 10
        invalid_properties.push('invalid value for "required_approving_review_count", must be smaller than or equal to 10.')
      end

      if @required_approving_review_count < 0
        invalid_properties.push('invalid value for "required_approving_review_count", must be greater than or equal to 0.')
      end

      if @required_review_thread_resolution.nil?
        invalid_properties.push('invalid value for "required_review_thread_resolution", required_review_thread_resolution cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @dismiss_stale_reviews_on_push.nil?
      return false if @require_code_owner_review.nil?
      return false if @require_last_push_approval.nil?
      return false if @required_approving_review_count.nil?
      return false if @required_approving_review_count > 10
      return false if @required_approving_review_count < 0
      return false if @required_review_thread_resolution.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] required_approving_review_count Value to be assigned
    def required_approving_review_count=(required_approving_review_count)
      if required_approving_review_count.nil?
        fail ArgumentError, 'required_approving_review_count cannot be nil'
      end

      if required_approving_review_count > 10
        fail ArgumentError, 'invalid value for "required_approving_review_count", must be smaller than or equal to 10.'
      end

      if required_approving_review_count < 0
        fail ArgumentError, 'invalid value for "required_approving_review_count", must be greater than or equal to 0.'
      end

      @required_approving_review_count = required_approving_review_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dismiss_stale_reviews_on_push == o.dismiss_stale_reviews_on_push &&
          require_code_owner_review == o.require_code_owner_review &&
          require_last_push_approval == o.require_last_push_approval &&
          required_approving_review_count == o.required_approving_review_count &&
          required_review_thread_resolution == o.required_review_thread_resolution
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [dismiss_stale_reviews_on_push, require_code_owner_review, require_last_push_approval, required_approving_review_count, required_review_thread_resolution].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
