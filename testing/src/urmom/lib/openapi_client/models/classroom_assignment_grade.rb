=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Grade for a student or groups GitHub Classroom assignment
  class ClassroomAssignmentGrade
    # Name of the assignment
    attr_accessor :assignment_name

    # URL of the assignment
    attr_accessor :assignment_url

    # URL of the starter code for the assignment
    attr_accessor :starter_code_url

    # GitHub username of the student
    attr_accessor :github_username

    # Roster identifier of the student
    attr_accessor :roster_identifier

    # Name of the student's assignment repository
    attr_accessor :student_repository_name

    # URL of the student's assignment repository
    attr_accessor :student_repository_url

    # Timestamp of the student's assignment submission
    attr_accessor :submission_timestamp

    # Number of points awarded to the student
    attr_accessor :points_awarded

    # Number of points available for the assignment
    attr_accessor :points_available

    # If a group assignment, name of the group the student is in
    attr_accessor :group_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assignment_name' => :'assignment_name',
        :'assignment_url' => :'assignment_url',
        :'starter_code_url' => :'starter_code_url',
        :'github_username' => :'github_username',
        :'roster_identifier' => :'roster_identifier',
        :'student_repository_name' => :'student_repository_name',
        :'student_repository_url' => :'student_repository_url',
        :'submission_timestamp' => :'submission_timestamp',
        :'points_awarded' => :'points_awarded',
        :'points_available' => :'points_available',
        :'group_name' => :'group_name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'assignment_name' => :'String',
        :'assignment_url' => :'String',
        :'starter_code_url' => :'String',
        :'github_username' => :'String',
        :'roster_identifier' => :'String',
        :'student_repository_name' => :'String',
        :'student_repository_url' => :'String',
        :'submission_timestamp' => :'String',
        :'points_awarded' => :'Integer',
        :'points_available' => :'Integer',
        :'group_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ClassroomAssignmentGrade` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ClassroomAssignmentGrade`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'assignment_name')
        self.assignment_name = attributes[:'assignment_name']
      end

      if attributes.key?(:'assignment_url')
        self.assignment_url = attributes[:'assignment_url']
      end

      if attributes.key?(:'starter_code_url')
        self.starter_code_url = attributes[:'starter_code_url']
      end

      if attributes.key?(:'github_username')
        self.github_username = attributes[:'github_username']
      end

      if attributes.key?(:'roster_identifier')
        self.roster_identifier = attributes[:'roster_identifier']
      end

      if attributes.key?(:'student_repository_name')
        self.student_repository_name = attributes[:'student_repository_name']
      end

      if attributes.key?(:'student_repository_url')
        self.student_repository_url = attributes[:'student_repository_url']
      end

      if attributes.key?(:'submission_timestamp')
        self.submission_timestamp = attributes[:'submission_timestamp']
      end

      if attributes.key?(:'points_awarded')
        self.points_awarded = attributes[:'points_awarded']
      end

      if attributes.key?(:'points_available')
        self.points_available = attributes[:'points_available']
      end

      if attributes.key?(:'group_name')
        self.group_name = attributes[:'group_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @assignment_name.nil?
        invalid_properties.push('invalid value for "assignment_name", assignment_name cannot be nil.')
      end

      if @assignment_url.nil?
        invalid_properties.push('invalid value for "assignment_url", assignment_url cannot be nil.')
      end

      if @starter_code_url.nil?
        invalid_properties.push('invalid value for "starter_code_url", starter_code_url cannot be nil.')
      end

      if @github_username.nil?
        invalid_properties.push('invalid value for "github_username", github_username cannot be nil.')
      end

      if @roster_identifier.nil?
        invalid_properties.push('invalid value for "roster_identifier", roster_identifier cannot be nil.')
      end

      if @student_repository_name.nil?
        invalid_properties.push('invalid value for "student_repository_name", student_repository_name cannot be nil.')
      end

      if @student_repository_url.nil?
        invalid_properties.push('invalid value for "student_repository_url", student_repository_url cannot be nil.')
      end

      if @submission_timestamp.nil?
        invalid_properties.push('invalid value for "submission_timestamp", submission_timestamp cannot be nil.')
      end

      if @points_awarded.nil?
        invalid_properties.push('invalid value for "points_awarded", points_awarded cannot be nil.')
      end

      if @points_available.nil?
        invalid_properties.push('invalid value for "points_available", points_available cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @assignment_name.nil?
      return false if @assignment_url.nil?
      return false if @starter_code_url.nil?
      return false if @github_username.nil?
      return false if @roster_identifier.nil?
      return false if @student_repository_name.nil?
      return false if @student_repository_url.nil?
      return false if @submission_timestamp.nil?
      return false if @points_awarded.nil?
      return false if @points_available.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assignment_name == o.assignment_name &&
          assignment_url == o.assignment_url &&
          starter_code_url == o.starter_code_url &&
          github_username == o.github_username &&
          roster_identifier == o.roster_identifier &&
          student_repository_name == o.student_repository_name &&
          student_repository_url == o.student_repository_url &&
          submission_timestamp == o.submission_timestamp &&
          points_awarded == o.points_awarded &&
          points_available == o.points_available &&
          group_name == o.group_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [assignment_name, assignment_url, starter_code_url, github_username, roster_identifier, student_repository_name, student_repository_url, submission_timestamp, points_awarded, points_available, group_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
