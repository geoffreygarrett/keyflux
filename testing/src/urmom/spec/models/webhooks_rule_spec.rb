=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for OpenapiClient::WebhooksRule
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe OpenapiClient::WebhooksRule do
  let(:instance) { OpenapiClient::WebhooksRule.new }

  describe 'test an instance of WebhooksRule' do
    it 'should create an instance of WebhooksRule' do
      expect(instance).to be_instance_of(OpenapiClient::WebhooksRule)
    end
  end
  describe 'test attribute "admin_enforced"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "allow_deletions_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.allow_deletions_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "allow_force_pushes_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.allow_force_pushes_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "authorized_actor_names"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "authorized_actors_only"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "authorized_dismissal_actors_only"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "create_protected"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "created_at"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "dismiss_stale_reviews_on_push"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ignore_approvals_from_contributors"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "linear_history_requirement_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.linear_history_requirement_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lock_branch_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lock_branch_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lock_allows_fork_sync"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "merge_queue_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.merge_queue_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "pull_request_reviews_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pull_request_reviews_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "repository_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "require_code_owner_review"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "require_last_push_approval"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "required_approving_review_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "required_conversation_resolution_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.required_conversation_resolution_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "required_deployments_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.required_deployments_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "required_status_checks"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "required_status_checks_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.required_status_checks_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "signature_requirement_enforcement_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["off", "non_admins", "everyone"])
      # validator.allowable_values.each do |value|
      #   expect { instance.signature_requirement_enforcement_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "strict_required_status_checks_policy"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "updated_at"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
