=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::UsersApi)
    end
  end

  # unit tests for users_add_email_for_authenticated_user
  # Add an email address for the authenticated user
  # OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [UsersAddEmailForAuthenticatedUserRequest] :users_add_email_for_authenticated_user_request 
  # @return [Array<Email>]
  describe 'users_add_email_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_add_social_account_for_authenticated_user
  # Add social accounts for the authenticated user
  # Add one or more social accounts to the authenticated user&#39;s profile.  OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
  # @param users_add_social_account_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Array<SocialAccount>]
  describe 'users_add_social_account_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_block
  # Block a user
  # Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_block test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_check_blocked
  # Check if a user is blocked by the authenticated user
  # Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_check_blocked test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_check_following_for_user
  # Check if a user follows another user
  # 
  # @param username The handle for the GitHub user account.
  # @param target_user 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_check_following_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_check_person_is_followed_by_authenticated
  # Check if a person is followed by the authenticated user
  # 
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_check_person_is_followed_by_authenticated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_create_gpg_key_for_authenticated_user
  # Create a GPG key for the authenticated user
  # Adds a GPG key to the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.
  # @param users_create_gpg_key_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [GpgKey]
  describe 'users_create_gpg_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_create_public_ssh_key_for_authenticated_user
  # Create a public SSH key for the authenticated user
  # Adds a public SSH key to the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.
  # @param users_create_public_ssh_key_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Key]
  describe 'users_create_public_ssh_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_create_ssh_signing_key_for_authenticated_user
  # Create a SSH signing key for the authenticated user
  # Creates an SSH signing key for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:ssh_signing_key&#x60; scope to use this endpoint.
  # @param users_create_ssh_signing_key_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [SshSigningKey]
  describe 'users_create_ssh_signing_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_delete_email_for_authenticated_user
  # Delete an email address for the authenticated user
  # OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [UsersDeleteEmailForAuthenticatedUserRequest] :users_delete_email_for_authenticated_user_request 
  # @return [nil]
  describe 'users_delete_email_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_delete_gpg_key_for_authenticated_user
  # Delete a GPG key for the authenticated user
  # Removes a GPG key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:gpg_key&#x60; scope to use this endpoint.
  # @param gpg_key_id The unique identifier of the GPG key.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_delete_gpg_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_delete_public_ssh_key_for_authenticated_user
  # Delete a public SSH key for the authenticated user
  # Removes a public SSH key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:public_key&#x60; scope to use this endpoint.
  # @param key_id The unique identifier of the key.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_delete_public_ssh_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_delete_social_account_for_authenticated_user
  # Delete social accounts for the authenticated user
  # Deletes one or more social accounts from the authenticated user&#39;s profile.  OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
  # @param users_delete_social_account_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_delete_social_account_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_delete_ssh_signing_key_for_authenticated_user
  # Delete an SSH signing key for the authenticated user
  # Deletes an SSH signing key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:ssh_signing_key&#x60; scope to use this endpoint.
  # @param ssh_signing_key_id The unique identifier of the SSH signing key.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_delete_ssh_signing_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_follow
  # Follow a user
  # Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_follow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_authenticated
  # Get the authenticated user
  # OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope in order for the response to include private profile information.
  # @param [Hash] opts the optional parameters
  # @return [UsersGetAuthenticated200Response]
  describe 'users_get_authenticated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_by_id
  # Get a user using their ID
  # Provides publicly available information about someone with a GitHub account. This method takes their durable user &#x60;ID&#x60; instead of their &#x60;login&#x60;, which can change over time.  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/users/emails)\&quot;.
  # @param account_id account_id parameter
  # @param [Hash] opts the optional parameters
  # @return [UsersGetAuthenticated200Response]
  describe 'users_get_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_by_username
  # Get a user
  # Provides publicly available information about someone with a GitHub account.  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/users/emails)\&quot;.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [UsersGetAuthenticated200Response]
  describe 'users_get_by_username test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_context_for_user
  # Get contextual information for a user
  # Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.    The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#39;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository, you would use a &#x60;subject_type&#x60; value of &#x60;repository&#x60; and a &#x60;subject_id&#x60; value of &#x60;1300192&#x60; (the ID of the &#x60;Spoon-Knife&#x60; repository).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :subject_type Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;.
  # @option opts [String] :subject_id Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;.
  # @return [Hovercard]
  describe 'users_get_context_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_gpg_key_for_authenticated_user
  # Get a GPG key for the authenticated user
  # View extended details for a single GPG key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.
  # @param gpg_key_id The unique identifier of the GPG key.
  # @param [Hash] opts the optional parameters
  # @return [GpgKey]
  describe 'users_get_gpg_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_public_ssh_key_for_authenticated_user
  # Get a public SSH key for the authenticated user
  # View extended details for a single public SSH key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.
  # @param key_id The unique identifier of the key.
  # @param [Hash] opts the optional parameters
  # @return [Key]
  describe 'users_get_public_ssh_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get_ssh_signing_key_for_authenticated_user
  # Get an SSH signing key for the authenticated user
  # Gets extended details for an SSH signing key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.
  # @param ssh_signing_key_id The unique identifier of the SSH signing key.
  # @param [Hash] opts the optional parameters
  # @return [SshSigningKey]
  describe 'users_get_ssh_signing_key_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list
  # List users
  # Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :since A user ID. Only return users with an ID greater than this ID.
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_attestations
  # List attestations
  # List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.  The collection of attestations returned by this endpoint is filtered according to the authenticated user&#39;s permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the &#x60;attestations:read&#x60; permission is required.  **Please note:** in order to offer meaningful security benefits, an attestation&#39;s signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI &#x60;attestation verify&#x60; command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build&#39;s provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
  # @param username The handle for the GitHub user account.
  # @param subject_digest Subject Digest
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [String] :before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [String] :after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [UsersListAttestations200Response]
  describe 'users_list_attestations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_blocked_by_authenticated_user
  # List users blocked by the authenticated user
  # List the users you&#39;ve blocked on your personal account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list_blocked_by_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_emails_for_authenticated_user
  # List email addresses for the authenticated user
  # Lists all of your email addresses, and specifies which one is visible to the public.  OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<Email>]
  describe 'users_list_emails_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_followed_by_authenticated_user
  # List the people the authenticated user follows
  # Lists the people who the authenticated user follows.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list_followed_by_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_followers_for_authenticated_user
  # List followers of the authenticated user
  # Lists the people following the authenticated user.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list_followers_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_followers_for_user
  # List followers of a user
  # Lists the people following the specified user.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list_followers_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_following_for_user
  # List the people a user follows
  # Lists the people who the specified user follows.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SimpleUser>]
  describe 'users_list_following_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_gpg_keys_for_authenticated_user
  # List GPG keys for the authenticated user
  # Lists the current user&#39;s GPG keys.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<GpgKey>]
  describe 'users_list_gpg_keys_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_gpg_keys_for_user
  # List GPG keys for a user
  # Lists the GPG keys for a user. This information is accessible by anyone.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<GpgKey>]
  describe 'users_list_gpg_keys_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_public_emails_for_authenticated_user
  # List public email addresses for the authenticated user
  # Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user) endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<Email>]
  describe 'users_list_public_emails_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_public_keys_for_user
  # List public keys for a user
  # Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<KeySimple>]
  describe 'users_list_public_keys_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_public_ssh_keys_for_authenticated_user
  # List public SSH keys for the authenticated user
  # Lists the public SSH keys for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<Key>]
  describe 'users_list_public_ssh_keys_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_social_accounts_for_authenticated_user
  # List social accounts for the authenticated user
  # Lists all of your social accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SocialAccount>]
  describe 'users_list_social_accounts_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_social_accounts_for_user
  # List social accounts for a user
  # Lists social media accounts for a user. This endpoint is accessible by anyone.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SocialAccount>]
  describe 'users_list_social_accounts_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_ssh_signing_keys_for_authenticated_user
  # List SSH signing keys for the authenticated user
  # Lists the SSH signing keys for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SshSigningKey>]
  describe 'users_list_ssh_signing_keys_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_list_ssh_signing_keys_for_user
  # List SSH signing keys for a user
  # Lists the SSH signing keys for a user. This operation is accessible by anyone.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<SshSigningKey>]
  describe 'users_list_ssh_signing_keys_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_set_primary_email_visibility_for_authenticated_user
  # Set primary email visibility for the authenticated user
  # Sets the visibility for your primary email addresses.
  # @param users_set_primary_email_visibility_for_authenticated_user_request 
  # @param [Hash] opts the optional parameters
  # @return [Array<Email>]
  describe 'users_set_primary_email_visibility_for_authenticated_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_unblock
  # Unblock a user
  # Unblocks the given user and returns a 204.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_unblock test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_unfollow
  # Unfollow a user
  # OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.
  # @param username The handle for the GitHub user account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'users_unfollow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_update_authenticated
  # Update the authenticated user
  # **Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
  # @param [Hash] opts the optional parameters
  # @option opts [UsersUpdateAuthenticatedRequest] :users_update_authenticated_request 
  # @return [PrivateUser]
  describe 'users_update_authenticated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
