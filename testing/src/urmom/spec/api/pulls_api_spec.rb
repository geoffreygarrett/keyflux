=begin
#GitHub v3 REST API

#GitHub's v3 REST API.

The version of the OpenAPI document: 1.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PullsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PullsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PullsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PullsApi' do
    it 'should create an instance of PullsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PullsApi)
    end
  end

  # unit tests for pulls_check_if_merged
  # Check if a pull request has been merged
  # Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'pulls_check_if_merged test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_create
  # Create a pull request
  # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pulls_create_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequest]
  describe 'pulls_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_create_reply_for_review_comment
  # Create a reply for a review comment
  # Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param comment_id The unique identifier of the comment.
  # @param pulls_create_reply_for_review_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReviewComment]
  describe 'pulls_create_reply_for_review_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_create_review
  # Create a review for a pull request
  # Creates a review on a specified pull request.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  Pull request reviews created in the &#x60;PENDING&#x60; state are not submitted and therefore do not include the &#x60;submitted_at&#x60; property in the response. To create a pending review for a pull request, leave the &#x60;event&#x60; parameter blank. For more information about submitting a &#x60;PENDING&#x60; review, see \&quot;[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request).\&quot;  **Note:** To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the &#x60;application/vnd.github.v3.diff&#x60; media type to the &#x60;Accept&#x60; header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [PullsCreateReviewRequest] :pulls_create_review_request 
  # @return [PullRequestReview]
  describe 'pulls_create_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_create_review_comment
  # Create a review comment for a pull request
  # Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment).\&quot;  If your comment applies to more than one line in the pull request diff, you should use the parameters &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; in your request.  The &#x60;position&#x60; parameter is deprecated. If you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param pulls_create_review_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReviewComment]
  describe 'pulls_create_review_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_delete_pending_review
  # Delete a pending review for a pull request
  # Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReview]
  describe 'pulls_delete_pending_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_delete_review_comment
  # Delete a review comment for a pull request
  # Deletes a review comment.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'pulls_delete_review_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_dismiss_review
  # Dismiss a review for a pull request
  # Dismisses a specified review on a pull request.  **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param pulls_dismiss_review_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReview]
  describe 'pulls_dismiss_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_get
  # Get a pull request
  # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;. - **&#x60;application/vnd.github.diff&#x60;**: For more information, see \&quot;[git-diff](https://git-scm.com/docs/git-diff)\&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @return [PullRequest]
  describe 'pulls_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_get_review
  # Get a review for a pull request
  # Retrieves a pull request review by its ID.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReview]
  describe 'pulls_get_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_get_review_comment
  # Get a review comment for a pull request
  # Provides details for a specified review comment.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReviewComment]
  describe 'pulls_get_review_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list
  # List pull requests
  # Lists pull requests in a specified repository.  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state.
  # @option opts [String] :head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;.
  # @option opts [String] :base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;.
  # @option opts [String] :sort What to sort results by. &#x60;popularity&#x60; will sort by the number of comments. &#x60;long-running&#x60; will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
  # @option opts [String] :direction The direction of the sort. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<PullRequestSimple>]
  describe 'pulls_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_comments_for_review
  # List comments for a pull request review
  # Lists comments for a specific pull request review.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<ReviewComment>]
  describe 'pulls_list_comments_for_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_commits
  # List commits on a pull request
  # Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits) endpoint.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<Commit>]
  describe 'pulls_list_commits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_files
  # List pull requests files
  # Lists the files in a specified pull request.  **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<DiffEntry>]
  describe 'pulls_list_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_requested_reviewers
  # Get all requested reviewers for a pull request
  # Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReviewRequest]
  describe 'pulls_list_requested_reviewers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_review_comments
  # List review comments on a pull request
  # Lists all review comments for a specified pull request. By default, review comments are in ascending order by ID.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort The property to sort the results by.
  # @option opts [String] :direction The direction to sort results. Ignored without &#x60;sort&#x60; parameter.
  # @option opts [Time] :since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<PullRequestReviewComment>]
  describe 'pulls_list_review_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_review_comments_for_repo
  # List review comments in a repository
  # Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort 
  # @option opts [String] :direction The direction to sort results. Ignored without &#x60;sort&#x60; parameter.
  # @option opts [Time] :since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<PullRequestReviewComment>]
  describe 'pulls_list_review_comments_for_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_list_reviews
  # List reviews for a pull request
  # Lists all reviews for a specified pull request. The list of reviews returns in chronological order.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :per_page The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @option opts [Integer] :page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot;
  # @return [Array<PullRequestReview>]
  describe 'pulls_list_reviews test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_merge
  # Merge a pull request
  # Merges a pull request into the base branch. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [PullsMergeRequest] :pulls_merge_request 
  # @return [PullRequestMergeResult]
  describe 'pulls_merge test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_remove_requested_reviewers
  # Remove requested reviewers from a pull request
  # Removes review requests from a pull request for a given set of users and/or teams.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param pulls_remove_requested_reviewers_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestSimple]
  describe 'pulls_remove_requested_reviewers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_request_reviewers
  # Request reviewers for a pull request
  # Requests reviews for a pull request from a given set of users and/or teams. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [PullsRequestReviewersRequest] :pulls_request_reviewers_request 
  # @return [PullRequestSimple]
  describe 'pulls_request_reviewers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_submit_review
  # Submit a review for a pull request
  # Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \&quot;[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request).\&quot;  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param pulls_submit_review_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReview]
  describe 'pulls_submit_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_update
  # Update a pull request
  # Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [PullsUpdateRequest] :pulls_update_request 
  # @return [PullRequest]
  describe 'pulls_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_update_branch
  # Update a pull request branch
  # Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param [Hash] opts the optional parameters
  # @option opts [PullsUpdateBranchRequest] :pulls_update_branch_request 
  # @return [ActivityMarkRepoNotificationsAsRead202Response]
  describe 'pulls_update_branch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_update_review
  # Update a review for a pull request
  # Updates the contents of a specified review summary comment.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param pull_number The number that identifies the pull request.
  # @param review_id The unique identifier of the review.
  # @param pulls_update_review_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReview]
  describe 'pulls_update_review test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for pulls_update_review_comment
  # Update a review comment for a pull request
  # Edits the content of a specified review comment.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
  # @param owner The account owner of the repository. The name is not case sensitive.
  # @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive.
  # @param comment_id The unique identifier of the comment.
  # @param pulls_update_review_comment_request 
  # @param [Hash] opts the optional parameters
  # @return [PullRequestReviewComment]
  describe 'pulls_update_review_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
